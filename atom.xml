<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滴水成涓</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://guozhe001.github.io/atom.xml" rel="self"/>
  
  <link href="https://guozhe001.github.io/"/>
  <updated>2021-05-31T09:56:42.985Z</updated>
  <id>https://guozhe001.github.io/</id>
  
  <author>
    <name>guozhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>与swarm-bee交互</title>
    <link href="https://guozhe001.github.io/2021/05/31/blockchain/eth/storage/%E4%B8%8Eswarm-bee%E4%BA%A4%E4%BA%92/"/>
    <id>https://guozhe001.github.io/2021/05/31/blockchain/eth/storage/%E4%B8%8Eswarm-bee%E4%BA%A4%E4%BA%92/</id>
    <published>2021-05-31T09:56:42.985Z</published>
    <updated>2021-05-31T09:56:42.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态检查">状态检查</h2><h3 id="主页">主页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1633</span><br></pre></td></tr></table></figure><h3 id="检查运行是否正常">检查运行是否正常</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:1635/health</span><br></pre></td></tr></table></figure><h3 id="查看当前bee节点的地址">查看当前bee节点的地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee-get-addr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s localhost:1635/addresses | jq .ethereum</span><br></pre></td></tr></table></figure><h3 id="查看链接了多少个peer">查看链接了多少个peer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:1635/peers | jq &#x27;.peers | length&#x27;</span><br></pre></td></tr></table></figure><h3 id="查看网络拓扑">查看网络拓扑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:1635/topology | jq</span><br></pre></td></tr></table></figure><h2 id="上传文件">上传文件</h2><h3 id="上传文件，返回的是一个hash值">上传文件，返回的是一个hash值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -F file=@bee.jpg http://localhost:1633/files</span><br><span class="line">&#123;&quot;reference&quot;:&quot;02a03340405f30c1027b885ee39903fb394ba8909e98029dd6c14371437edafc&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data-binary @bee.jpg  -H &quot;Content-Type: video/jpg&quot; &quot;http://localhost:1633/files?name=bee.jpg&quot;</span><br></pre></td></tr></table></figure><h3 id="下载文件">下载文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -OJ http://localhost:1633/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4</span><br><span class="line">https://gateway.ethswarm.org/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4</span><br></pre></td></tr></table></figure><p><em><strong>特别注意：不要传一些重要数据到swarm除非已经加密，因为上传上去之后的所有文件都是公开的，只要知道hash就能下载。</strong></em></p><h2 id="上传文件夹">上传文件夹</h2><p>比如有一个<a href="https://github.com/guozhe001/hello-swarm.git">前端vue项目</a>，需要上传到swarm</p><h3 id="项目构建">项目构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="把需要上传的文件夹dist打包">把需要上传的文件夹<code>dist</code>打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dist</span><br><span class="line">tar -cf ../hello-swarm.tar .</span><br></pre></td></tr></table></figure><ol><li>把hello-swarm.tar包上传到swarm</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">     -X POST \</span><br><span class="line">     -H &quot;Content-Type: application/x-tar&quot; \</span><br><span class="line">     -H &quot;Swarm-Index-Document: index.html&quot; \</span><br><span class="line">     --data-binary @hello-swarm.tar http://localhost:1633/dirs</span><br></pre></td></tr></table></figure><p>{“reference”:“b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea”}</p><p>访问主页：</p><p><a href="http://localhost:1633/bzz/b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea/index.html">http://localhost:1633/bzz/b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea/index.html</a></p><h2 id="支票信息API">支票信息API</h2><h3 id="查询当前bee节点的余额">查询当前bee节点的余额</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/chequebook/balance | jq</span><br></pre></td></tr></table></figure><h3 id="查看每个节点（当前bee节点连接的）的余额">查看每个节点（当前bee节点连接的）的余额</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/balances | jq</span><br></pre></td></tr></table></figure><h3 id="查看结算信息">查看结算信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/settlements | jq</span><br></pre></td></tr></table></figure><h3 id="查看支票信息">查看支票信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/chequebook/cheque | jq</span><br></pre></td></tr></table></figure><h3 id="支票兑换-地址是上一个命令中显示的地址">支票兑换(地址是上一个命令中显示的地址)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b</span><br></pre></td></tr></table></figure><h3 id="查看支票的兑换状态">查看支票的兑换状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b | jq</span><br></pre></td></tr></table></figure><h3 id="gBZZ提现">gBZZ提现</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:1635/chequebook/withdraw\?amount\=1000 | jq</span><br></pre></td></tr></table></figure><h2 id="管理支票脚本">管理支票脚本</h2><h3 id="下载官方的脚本">下载官方的脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O cashout.sh https://gist.githubusercontent.com/ralph-pichler/3b5ccd7a5c5cd0500e6428752b37e975/raw/7ba05095e0836735f4a648aefe52c584e18e065f/cashout.sh</span><br></pre></td></tr></table></figure><h3 id="添加可执行权限">添加可执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x cashout.sh</span><br></pre></td></tr></table></figure><h3 id="列出所有的没有兑换的支票信息">列出所有的没有兑换的支票信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cashout.sh</span><br></pre></td></tr></table></figure><h3 id="当超过5BZZ时兑换所有支票：">当超过5BZZ时兑换所有支票：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cashout.sh cashout-all 5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;状态检查&quot;&gt;状态检查&lt;/h2&gt;
&lt;h3 id=&quot;主页&quot;&gt;主页&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="swarm" scheme="https://guozhe001.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu20.04设置静态ip</title>
    <link href="https://guozhe001.github.io/2021/05/31/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
    <id>https://guozhe001.github.io/2021/05/31/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</id>
    <published>2021-05-31T09:53:41.564Z</published>
    <updated>2021-05-31T09:53:41.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置静态IP">设置静态IP</h2><h3 id="修改-etc-netplan-01-network-manager-all-yaml文件如下：">修改<code>/etc/netplan/01-network-manager-all.yaml</code>文件如下：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Let NetworkManager manage all devices on this system</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">wlp7s0:</span></span><br><span class="line">            <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.0</span><span class="number">.107</span><span class="string">/24</span>, ]</span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">            <span class="attr">nameservers:</span></span><br><span class="line">                <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span>]</span><br></pre></td></tr></table></figure><p>其中的<code>wlp7s0</code>是网卡信息，可以通过<code>ifconfig</code>获得。</p><h3 id="设置生效：">设置生效：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h2 id="启动ssh">启动ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设置静态IP&quot;&gt;设置静态IP&lt;/h2&gt;
&lt;h3 id=&quot;修改-etc-netplan-01-network-manager-all-yaml文件如下：&quot;&gt;修改&lt;code&gt;/etc/netplan/01-network-manager-all.yaml&lt;/code&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu如何挂载硬盘</title>
    <link href="https://guozhe001.github.io/2021/05/31/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2021/05/31/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</id>
    <published>2021-05-31T09:53:41.564Z</published>
    <updated>2021-05-31T09:53:41.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看已经挂载了哪些">查看已经挂载了哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -l</span></span><br><span class="line">文件系统           1K-块     已用      可用 已用% 挂载点</span><br><span class="line">udev            16362980        0  16362980    0% /dev</span><br><span class="line">tmpfs            3285100     2364   3282736    1% /run</span><br><span class="line">/dev/nvme0n1p7 200537360 18016188 172264740   10% /</span><br><span class="line">tmpfs           16425488   408624  16016864    3% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116    1% /run/lock</span><br><span class="line">tmpfs           16425488        0  16425488    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0         56832    56832         0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1         66432    66432         0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop2         33152    33152         0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop3         52352    52352         0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop4         31872    31872         0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop5        224256   224256         0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/nvme0n1p1     98304    33555     64749   35% /boot/efi</span><br><span class="line">tmpfs            3285096       20   3285076    1% /run/user/125</span><br><span class="line">tmpfs            3285096       92   3285004    1% /run/user/1000</span><br><span class="line">/dev/loop6        101632   101632         0  100% /snap/core/10908</span><br><span class="line">/dev/loop7        435968   435968         0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop8        680192   680192         0  100% /snap/intellij-idea-community/289</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看有哪些">查看有哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo fdisk -l</span></span><br><span class="line">Disk /dev/loop0：55.48 MiB，58159104 字节，113592 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1：64.79 MiB，67915776 字节，132648 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2：32.28 MiB，33841152 字节，66096 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop3：51.4 MiB，53522432 字节，104536 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop4：31.9 MiB，32595968 字节，63664 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop5：218.102 MiB，229629952 字节，448496 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop6：99.22 MiB，104030208 字节，203184 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop7：425.67 MiB，446328832 字节，871736 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/nvme0n1：931.53 GiB，1000204886016 字节，1953525168 个扇区</span><br><span class="line">Disk model: WDC WDS100T2B0C-00PXH0                  </span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：C12B6754-9D12-4F54-92FA-086CE249C548</span><br><span class="line"></span><br><span class="line">设备                 起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/nvme0n1p1       2048     206847    204800   100M EFI 系统</span><br><span class="line">/dev/nvme0n1p2     206848     239615     32768    16M Microsoft 保留</span><br><span class="line">/dev/nvme0n1p3     239616  408449302 408209687 194.7G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p4  408451072  409597951   1146880   560M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p5  409597952 1134321663 724723712 345.6G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p6 1134321664 1543921663 409600000 195.3G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p7 1543921664 1953523711 409602048 195.3G Linux 文件系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda：7.28 TiB，8001563222016 字节，15628053168 个扇区</span><br><span class="line">Disk model: HGST HUS728T8TAL</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：F654D976-A27E-49D1-B0FD-5DCB3914D51D</span><br><span class="line"></span><br><span class="line">设备             起点        末尾       扇区  大小 类型</span><br><span class="line">/dev/sda1          34       32767      32734   16M Microsoft 保留</span><br><span class="line">/dev/sda2       32768  4096032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda3  4096032768  8192032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda4  8192032768 15628050431 7436017664  3.5T Microsoft 基本数据</span><br><span class="line"></span><br><span class="line">分区 1 未起始于物理扇区边界。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop8：664.17 MiB，696426496 字节，1360208 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看想要挂载的硬盘的uuid">查看想要挂载的硬盘的uuid</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br><span class="line">NAME        FSTYPE   LABEL    UUID                                 FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">loop0       squashfs                                                     0   100% /snap/core18/1988</span><br><span class="line">loop1       squashfs                                                     0   100% /snap/gtk-common-themes/1514</span><br><span class="line">loop2       squashfs                                                     0   100% /snap/snapd/11402</span><br><span class="line">loop3       squashfs                                                     0   100% /snap/snap-store/518</span><br><span class="line">loop4       squashfs                                                     0   100% /snap/snapd/11036</span><br><span class="line">loop5       squashfs                                                     0   100% /snap/gnome-3-34-1804/66</span><br><span class="line">loop6       squashfs                                                     0   100% /snap/core/10908</span><br><span class="line">loop7       squashfs                                                     0   100% /snap/pycharm-community/233</span><br><span class="line">loop8       squashfs                                                     0   100% /snap/intellij-idea-community/289</span><br><span class="line">sda                                                                               </span><br><span class="line">├─sda1                                                                            </span><br><span class="line">├─sda2      ntfs     数据     38C09128C090ECFE                                    </span><br><span class="line">├─sda3      ntfs     新加卷   2A9E99709E993573                                    </span><br><span class="line">└─sda4      ntfs     新加卷   C25E9EB25E9E9F2B                                    </span><br><span class="line">nvme0n1                                                                           </span><br><span class="line">├─nvme0n1p1 vfat              2E15-C03F                              63.2M    34% /boot/efi</span><br><span class="line">├─nvme0n1p2                                                                       </span><br><span class="line">├─nvme0n1p3 ntfs              A4AA2056AA2026F0                                    </span><br><span class="line">├─nvme0n1p4 ntfs              FE347AD2347A8D81                                    </span><br><span class="line">├─nvme0n1p5 ntfs     娱乐     E848526348523114                                    </span><br><span class="line">├─nvme0n1p6 ntfs     学习工作 EA1E592A1E58F155                                    </span><br><span class="line">└─nvme0n1p7 ext4              12354a11-9bf9-4882-a202-3e3e675b3158  164.3G     9% /</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如我想要挂载<code>/dev/sda4</code>的uuid为<code>C25E9EB25E9E9F2B</code></p><h2 id="修改-etc-fstab进行挂载">修改<code>/etc/fstab</code>进行挂载</h2><p>参考：<a href="https://blog.51cto.com/13570193/2070157">https://blog.51cto.com/13570193/2070157</a></p><p>比如我的添加了一行：<code>UUID=C25E9EB25E9E9F2B /data ntfs defaults 0 0</code></p><h2 id="重启">重启</h2><h2 id="验证">验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev             16G     0   16G    0% /dev</span><br><span class="line">tmpfs           3.2G  2.3M  3.2G    1% /run</span><br><span class="line">/dev/nvme0n1p7  192G   18G  165G   10% /</span><br><span class="line">tmpfs            16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs            16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       56M   56M     0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1      100M  100M     0  100% /snap/core/10908</span><br><span class="line">/dev/loop2       33M   33M     0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop4       52M   52M     0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop3      426M  426M     0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop5       32M   32M     0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop6       65M   65M     0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop7      219M  219M     0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/loop8      665M  665M     0  100% /snap/intellij-idea-community/289</span><br><span class="line">/dev/nvme0n1p1   96M   33M   64M   35% /boot/efi</span><br><span class="line">/dev/sda4       3.5T  211M  3.5T    1% /data</span><br><span class="line">tmpfs           3.2G   16K  3.2G    1% /run/user/125</span><br><span class="line">tmpfs           3.2G   24K  3.2G    1% /run/user/1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UUID=80A467CBA467C270 /chia/temp1 ntfs defaults 0 0</span><br><span class="line">UUID=A4186E0A186DDBB4 /chia/temp2 ntfs defaults 0 0</span><br><span class="line">UUID=089E5CA89E5C8FD4 /chia/temp3 ntfs defaults 0 0</span><br><span class="line">UUID=38C09128C090ECFE /chia/data1 ntfs defaults 0 0</span><br><span class="line">UUID=2A9E99709E993573 /chia/data2 ntfs defaults 0 0</span><br><span class="line">UUID=C25E9EB25E9E9F2B /chia/data3 ntfs defaults 0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看已经挂载了哪些&quot;&gt;查看已经挂载了哪些&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu系统下nvidia显卡超频设置</title>
    <link href="https://guozhe001.github.io/2021/05/31/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/"/>
    <id>https://guozhe001.github.io/2021/05/31/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-05-31T09:53:41.564Z</published>
    <updated>2021-05-31T09:53:41.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必要条件是先安装nvidia的官方驱动">必要条件是先安装<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">nvidia的官方驱动</a></h2><h3 id="报错解决1：">报错解决1：</h3><h4 id="错误信息：">错误信息：</h4><p><code>ERROR: The Nouveau kernel driver is currently in use by your system. This driver is incompatible with the NVIDIA driver……</code></p><h4 id="解决方法：">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加内容</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>更新使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="报错解决2：">报错解决2：</h3><h4 id="错误信息：-v2">错误信息：</h4><p><code>Unable to find the development tool </code>cc<code> in your path; please make sure that you have the</code></p><p>或：</p><p><code>Unable to find the development tool </code>make<code> in your path; please make sure that you have t</code></p><h4 id="解决方法：-v2">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><h3 id="报错解决3">报错解决3:</h3><h4 id="错误信息：-v3">错误信息：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">An NVIDIA kernel module &#x27;nvidia-drm&#x27; appears to already be loaded in your kernel.  This may be because it is in use (for example, by an X server, a CUDA program, or the</span><br><span class="line">         NVIDIA Persistence Daemon), but this may also happen if your kernel was configured without support for module unloading.  Please be sure to exit any programs that may be</span><br><span class="line">         using the GPU(s) before attempting to upgrade your driver.  If no GPU-based programs are running, you know that your kernel supports module unloading, and you still</span><br><span class="line">         receive this message, then an error may have occurred that has corrupted an NVIDIA kernel module&#x27;s usage count, for which the simplest remedy is to reboot your computer.</span><br></pre></td></tr></table></figure><h4 id="解决方法：-v3">解决方法：</h4><p>卸载驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/nvidia-uninstall</span><br></pre></td></tr></table></figure><h3 id="安装完毕之后检查">安装完毕之后检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><p>在开始之前先打开ssh，并且设置静态ip否则可能无法进入桌面；如果无法进入桌面使用ssh链接然后把<code>/etc/X11/xorg.conf</code>文件删除之后重启即可。</p><p>参考：</p><p><a href="https://www.youtube.com/watch?v=5XaWVQ1GDVY">https://www.youtube.com/watch?v=5XaWVQ1GDVY</a></p><p><a href="https://bitcointalk.org/index.php?topic=2848723.0">https://bitcointalk.org/index.php?topic=2848723.0</a></p><p><a href="https://blog.csdn.net/liufunan/article/details/52090382">https://blog.csdn.net/liufunan/article/details/52090382</a></p><p><a href="https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting">https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting</a></p><h3 id="查看显卡信息：">查看显卡信息：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="设置显卡功率">设置显卡功率</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置第一个显卡的功率为125w</span></span><br><span class="line">sudo nvidia-smi -i 0 -pl 125</span><br></pre></td></tr></table></figure><h3 id="开启超频">开启超频</h3><h4 id="生成xorg-conf文件">生成xorg.conf文件</h4><p>查看有没有<code>/etc/X11/xorg.conf</code>文件，如果没有则生成，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果只有一张显卡，可以执行下面这一行。</span></span><br><span class="line">sudo nvidia-xconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是多个显卡，但是有一个显卡是用来视频输出的，则不要执行下面这一行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo nvidia-xconfig --enable-all-gpus</span></span><br></pre></td></tr></table></figure><h4 id="设置-cool-bits-28">设置<code>--cool-bits=28</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-xconfig --cool-bits&#x3D;28</span><br><span class="line"># sudo nvidia-xconfig -a --cool-bits&#x3D;28</span><br></pre></td></tr></table></figure><p>具体的cool-bits的意思如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cool-bits的值的每一位都代表不同的含义，可以根据自己的需要组合，具体含义摘抄如下。</span><br><span class="line">Coolbits的值是所有位的组合成的二进制数对应的10进制数值：</span><br><span class="line">- 1 (bit0) 允许老的（Fermi核心）之前的显卡超频</span><br><span class="line">- 2 (bit1) 当使用不同显存的GPU需要设置成SLI时，可以设置这一位</span><br><span class="line">- 4 (bit2) 允许手动设置显卡风扇的转速</span><br><span class="line">- 8 (bit3) 允许超频，驱动版本要比337.12新，架构要比Fermi新</span><br><span class="line">- 16 (bit4) 允许超电压，驱动版本要比346.16新，架构要比Fermi新</span><br></pre></td></tr></table></figure><p>设置完成之后查看<code>/etc/X11/xorg.conf</code>文件，我的<code>Device</code>和<code>Screen</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br></pre></td></tr></table></figure><p>需要把<code>Section &quot;Screen&quot;</code>下的<code>Option         &quot;Coolbits&quot; &quot;28&quot;</code>这一行移动到<code>Section Device</code>下面，如果不移动我的会导致显示器黑屏。移动之后如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><h4 id="重启">重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h4 id="超频">超频</h4><h5 id="3070超频设置：">3070超频设置：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=2500&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-350&quot;</span><br></pre></td></tr></table></figure><h5 id="1660超频">1660超频</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUMemoryTransferRateOffset[4]=1400&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUGraphicsClockOffset[4]=-100&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUGraphicsClockOffset[4]=-80&quot;</span><br></pre></td></tr></table></figure><h2 id="ubuntu安装-deb软件">ubuntu安装.deb软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定安装包安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上面的命令报错说缺少依赖，则执行：</span></span><br><span class="line">sudo apt -f -y install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖之后，重新安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="ubuntu更新已经安装的软件">ubuntu更新已经安装的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可更新软件</span></span><br><span class="line">apt list --upgradable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;必要条件是先安装nvidia的官方驱动&quot;&gt;必要条件是先安装&lt;a href=&quot;https://www.nvidia.cn/Download/index.aspx?lang=cn&quot;&gt;nvidia的官方驱动&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;报错解决1：&quot;&gt;报错解决1：</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
    <category term="nvidia" scheme="https://guozhe001.github.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>BurgerSwap被攻击分析</title>
    <link href="https://guozhe001.github.io/2021/05/31/blockchain/eth/Exploit&amp;Attack/BurgerSwap%E8%A2%AB%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/"/>
    <id>https://guozhe001.github.io/2021/05/31/blockchain/eth/Exploit&amp;Attack/BurgerSwap%E8%A2%AB%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/</id>
    <published>2021-05-31T03:07:00.746Z</published>
    <updated>2021-05-31T08:32:31.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件影响">事件影响</h3><ol start="0"><li><p>本次攻击主要是因为burgerswap的智能合约分层时的验证不足，导致被攻击成功</p></li><li><p>BURGER-BNB流动池中的BNB和BURGER都被大量拿走，导致流动性不足</p></li><li><p>因为黑客手里有大量BURGER，后续就算官方补充流动性也会因为黑客抛售BURGER而导致BURGER的价格变低</p></li></ol><h3 id="事件信息">事件信息</h3><p><a href="https://www.jinse.com/news/blockchain/1102202.html">慢雾安全团队BurgerSwap 被黑分析</a></p><h4 id="地址对应的tag与解释：">地址对应的tag与解释：</h4><table><thead><tr><th>TAG</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://bscscan.com/address/0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE">Pancake-BUSDT-BNB-LP</a></td><td>Pancake的BUSDT-BNB流动池</td></tr><tr><td><a href="https://bscscan.com/address/0xae0f538409063e66ff0e382113cb1a051fc069cd">BS-A-Contract</a></td><td>BuegerSwap攻击者使用的合约地址</td></tr><tr><td><a href="https://bscscan.com/address/0x6c9f2b95ca3432e5ec5bcd9c19de0636a23a4994">BS-Attacker</a></td><td>BuegerSwap攻击者的地址</td></tr><tr><td><a href="https://bscscan.com/address/0xa61275f7fbd1959d2a1c9a298e602929f412d2e1">BS-A-Fake-Token</a></td><td>BuegerSwap攻击者的“假币”</td></tr><tr><td><a href="https://bscscan.com/address/0xae9269f27437f0fcbc232d39ec814844a51d6b8f">BURGER</a></td><td>BURGER Token</td></tr><tr><td><a href="https://bscscan.com/address/0x7ac55ac530f2c29659573bde0700c6758d69e677">Demax-BURGER-BNB-LP</a></td><td>Demax的BURGER-BNB流动池</td></tr><tr><td><a href="https://bscscan.com/address/0x1a21cC36242dC733Cf6BdE2ff19437B0dA7A2B4E">BLP-Fake-BURGER</a></td><td>Burger的假币-BURGER流动池</td></tr><tr><td><a href="https://bscscan.com/address/0x7704c4f30c1203Cab03D87836932F01A9497D6E9">Demax-Fake-BURGER-LP</a></td><td>Demax的假币-BURGER流动池</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="攻击交易">攻击交易</h4><p><a href="https://bscscan.com/tx/0xac8a739c1f668b13d065d56a03c37a686e0aa1c9339e79fcbc5a2d0a6311e333">https://bscscan.com/tx/0xac8a739c1f668b13d065d56a03c37a686e0aa1c9339e79fcbc5a2d0a6311e333</a></p><h3 id="事件分析">事件分析</h3><p>本次攻击共分成六个步骤：</p><ol><li>攻击者在Pancake的BUSDT-BNB流动池使用闪电贷贷出6,047个BNB</li><li>攻击者用兑换出的6,028个BNB在burgerswap的BURGER-BNB池兑换出92,677（直到目前为止没有任何问题）<ol><li><img src="https://gitee.com/guozhe001/images/raw/master/image-20210531154523512.png" alt></li></ol></li><li>攻击者使用兑换出的近一半（45,452）的BURGER和自己的token创建一个交易对</li><li>攻击者使用100个自己的token兑换BNB，兑换路径为FakeToken-&gt;BURGER-&gt;BNB<ol><li>在兑换之前，会调用<code>_getAmountsOut</code>先计算出来路径上的金额是多少</li><li>在兑换时会调用&quot;FakeToken&quot;的<code>transfer</code>方法，此时发起重入攻击，使用剩余的45,316个BURGER兑换4,478个BNB</li><li>在攻击完成之后继续兑换路径上的其他<code>transfer</code>方法，原本因为4.2步已经使用45,316个BURGER兑换了4,478个BNB，无法再使用45,452个BURGER兑换出4,478个BNB（因为此时的BNB的价格已经升高，应该兑换的BNB更少才对）；但是因为此处依然使用4.1步骤计算好的兑换金额，并且最底层的兑换逻辑并没有根据<code>x*y=k</code>的公式进行校验，因此导致又以相同的价格兑换了BNB，即兑换出的BNB变多了</li><li><img src="https://gitee.com/guozhe001/images/raw/master/image-20210531154403820.png" alt></li></ol></li><li>在完成第四步的攻击之后，BURGER-BNB池中的BNB数量变少，BURGER的价格变低，因此攻击者又使用491个的BNB兑换出了108,791个BURGER。（注意第一步使用6,028个BNB才换了92,677个BURGER！）<ol><li><img src="https://gitee.com/guozhe001/images/raw/master/image-20210531154634930.png" alt></li></ol></li><li>归还闪电贷6,062个BNB（闪电贷归还的金额必须大于借出的BNB）</li></ol><h3 id="事件涉及的源码">事件涉及的源码</h3><h4 id="步骤4的调用DemaxPlatform合约的swapExactTokensForTokens方法如下">步骤4的调用<code>DemaxPlatform</code>合约的<code>swapExactTokensForTokens</code>方法如下:</h4><p>从合约代码中可以看出，在这里已经计算好了所有兑换路径的所有的兑换出的金额是多少，然后调用<code>_swap</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function swapExactTokensForTokens(</span><br><span class="line">    uint256 amountIn,</span><br><span class="line">    uint256 amountOutMin,</span><br><span class="line">    address[] calldata path,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 deadline</span><br><span class="line">) external ensure(deadline) returns (uint256[] memory amounts) &#123;</span><br><span class="line"></span><br><span class="line">    uint256 percent &#x3D; _getSwapFeePercent();</span><br><span class="line">    &#x2F;&#x2F; 计算路径上的token的out</span><br><span class="line">    amounts &#x3D; _getAmountsOut(amountIn, path, percent);</span><br><span class="line">    &#x2F;&#x2F; 最后一个目标token的数量必须大于等于期待的最小兑换数量</span><br><span class="line">    require(amounts[amounts.length - 1] &gt;&#x3D; amountOutMin, &#39;DEMAX PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    address pair &#x3D; DemaxSwapLibrary.pairFor(FACTORY, path[0], path[1]);</span><br><span class="line">    &#x2F;&#x2F; 先收取交易费</span><br><span class="line">    _innerTransferFrom(</span><br><span class="line">        path[0],</span><br><span class="line">        msg.sender,</span><br><span class="line">        pair,</span><br><span class="line">        SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) &#x2F; PERCENT_DENOMINATOR</span><br><span class="line">    );</span><br><span class="line">    &#x2F;&#x2F; 兑换已经计算好的金额和path</span><br><span class="line">    _swap(amounts, path, to);</span><br><span class="line">    &#x2F;&#x2F; 把收取交易费后的金额转给pair</span><br><span class="line">    _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) &#x2F; PERCENT_DENOMINATOR);</span><br><span class="line">    _swapFee(amounts, path, percent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤4中调用的DemaxPlatform合约的-swap方法如下：">步骤4中调用的<code>DemaxPlatform</code>合约的<code>_swap</code>方法如下：</h4><p>下面的代码展示了在计算好金额之后，如果满足兑换之前的校验就按照计算好的金额在指定的路径进行兑换；最终兑换的逻辑会调用<code>IDemaxPair</code>的<code>swap</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function _swap(</span><br><span class="line">    uint256[] memory amounts,</span><br><span class="line">    address[] memory path,</span><br><span class="line">    address _to</span><br><span class="line">) internal &#123;</span><br><span class="line">    require(!isPause, &quot;DEMAX PAUSED&quot;);</span><br><span class="line">    &#x2F;&#x2F; 做一些swap之前的校验</span><br><span class="line">    require(swapPrecondition(path[path.length - 1]), &#39;DEMAX PLATFORM : CHECK DGAS&#x2F;TOKEN TO VALUE FAIL&#39;);</span><br><span class="line">    for (uint256 i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">        (address input, address output) &#x3D; (path[i], path[i + 1]);</span><br><span class="line">        require(swapPrecondition(input), &#39;DEMAX PLATFORM : CHECK DGAS&#x2F;TOKEN VALUE FROM FAIL&#39;);</span><br><span class="line">        require(IDemaxConfig(CONFIG).checkPair(input, output), &#39;DEMAX PLATFORM : SWAP PAIR CONFIG CHECK FAIL&#39;);</span><br><span class="line">        (address token0, address token1) &#x3D; DemaxSwapLibrary.sortTokens(input, output);</span><br><span class="line">        uint256 amountOut &#x3D; amounts[i + 1];</span><br><span class="line">        (uint256 amount0Out, uint256 amount1Out) &#x3D; input &#x3D;&#x3D; token0</span><br><span class="line">            ? (uint256(0), amountOut)</span><br><span class="line">            : (amountOut, uint256(0));</span><br><span class="line">        address to &#x3D; i &lt; path.length - 2 ? DemaxSwapLibrary.pairFor(FACTORY, output, path[i + 2]) : _to;</span><br><span class="line">        &#x2F;&#x2F; 调用DemaxPair的swap方法，这里直接传递了amount0Out和amount1Out两个金额</span><br><span class="line">        IDemaxPair(DemaxSwapLibrary.pairFor(FACTORY, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));</span><br><span class="line">        if (amount0Out &gt; 0)</span><br><span class="line">            _transferNotify(DemaxSwapLibrary.pairFor(FACTORY, input, output), to, token0, amount0Out);</span><br><span class="line">        if (amount1Out &gt; 0)</span><br><span class="line">            _transferNotify(DemaxSwapLibrary.pairFor(FACTORY, input, output), to, token1, amount1Out);</span><br><span class="line">    &#125;</span><br><span class="line">    emit SwapToken(_to, path[0], path[path.length - 1], amounts[0], amounts[path.length - 1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合约DemaxPair的swap方法如下：">合约<code>DemaxPair</code>的<code>swap</code>方法如下：</h4><p>此合约直接根据传入的金额进行代币的<code>_safeTransfer</code>，最终只是校验了一下<code>amount0In &gt; 0 || amount1In &gt; 0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(</span><br><span class="line">    uint256 amount0Out,</span><br><span class="line">    uint256 amount1Out,</span><br><span class="line">    address to,</span><br><span class="line">    bytes calldata data</span><br><span class="line">) external onlyPlatform lock &#123;</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;DEMAX PAIR : INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1, ) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;DEMAX PAIR :  INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line">    uint256 balance0;</span><br><span class="line">    uint256 balance1;</span><br><span class="line">    &#123;</span><br><span class="line">        address _token0 &#x3D; token0;</span><br><span class="line">        address _token1 &#x3D; token1;</span><br><span class="line">        require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;DEMAX PAIR : INVALID_TO&#39;);</span><br><span class="line">        if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out);</span><br><span class="line">        if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out);</span><br><span class="line">        &#x2F;&#x2F; 因为在demaxPlatform调用此方法时data传入的是空，因此这个地方不会被调用</span><br><span class="line">        if (data.length &gt; 0) IDemaxCallee(to).demaxCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">        balance0 &#x3D; _balanceOf(_token0, address(this));</span><br><span class="line">        balance1 &#x3D; _balanceOf(_token1, address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    uint256 amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint256 amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    uint256 _amount0Out &#x3D; amount0Out;</span><br><span class="line">    uint256 _amount1Out &#x3D; amount1Out;</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;DEMAX PAIR : INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为对比uniswapV2的UniswapV2Pair的swap方法如下：">作为对比uniswapV2的<code>UniswapV2Pair</code>的<code>swap</code>方法如下：</h5><p>在最后验证了新的x’和y‘的乘积必须大于等于原来的x和y的乘积：<code>x‘ * y‘ &gt;= x * y</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;UniswapV2: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;UniswapV2: INVALID_TO&#39;);</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (data.length &gt; 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(3));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(3));</span><br><span class="line">    &#x2F;&#x2F; x‘ * y‘ &#x3D; x * y</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;UniswapV2: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为对比pancakeswap的PancakePair的swap方法代码如下：">作为对比pancakeswap的<code>PancakePair</code>的<code>swap</code>方法代码如下：</h5><p>在最后不仅有校验进入的金额大于出去的金额，也有乘积的校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    &#x2F;&#x2F; 至少有一个token兑换出的金额大于0</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;Pancake: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    &#x2F;&#x2F; 获取当前lp池中的两个token的储备数量</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    &#x2F;&#x2F; 兑换出的token数量必须小于当前池中的token数量</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;Pancake: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    &#x2F;&#x2F; 接收兑换token的地址不能是当前lp池中的token中的任意一个</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;Pancake: INVALID_TO&#39;);</span><br><span class="line">    &#x2F;&#x2F; 如果token0兑换出的金额大于0，则把amount0Out转账给指定的地址to</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    &#x2F;&#x2F; 如果参数data不为空，则调用合约to的pancakeCall方法；接下来就是合约to的表演了</span><br><span class="line">    if (data.length &gt; 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    &#x2F;&#x2F; 当合约to表演完之后，分别获取当前lp在两个token中的余额</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果新的余额大于（当前存储量-兑换出的数量），则amount0In等于新的余额 - （当前存储量-兑换出的数量）</span><br><span class="line">    &#x2F;&#x2F; amount0In和amount1In是在计算实际进来了多少</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    &#x2F;&#x2F; 如果两个都是0，说明新的balance都不大于（存储量-兑换出的金额）；这说明没有进来，那么就报错；</span><br><span class="line">    &#x2F;&#x2F; 其实这个校验是在说打给当前lp池的token数量必须大于兑换出去的数量</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;Pancake: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    &#x2F;&#x2F; 计算调整后的balance，此处会收取千分之二的费用</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(2));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(2));</span><br><span class="line">    &#x2F;&#x2F; 调用此方法后的两个token的积必须大于等于原始储备的两个token的积；即还回来的token在收完手续费之后必须大于借出去的</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;Pancake: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合约DemaxPair的-safeTransfer方法如下：">合约<code>DemaxPair</code>的<code>_safeTransfer</code>方法如下：</h4><p>此方法会调用token的<code>transfer</code>方法，而本次的攻击就是攻击者自己的token的<code>transfer</code>方法又调用了<code>DemaxPlatform</code>合约的<code>swapExactTokensForTokens</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function _safeTransfer(</span><br><span class="line">    address token,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 value</span><br><span class="line">) private &#123;</span><br><span class="line">    &#x2F;&#x2F; 调用token的transfer方法</span><br><span class="line">    (bool success, bytes memory data) &#x3D; token.call(abi.encodeWithSelector(SELECTOR, to, value));</span><br><span class="line">    require(success &amp;&amp; (data.length &#x3D;&#x3D; 0 || abi.decode(data, (bool))), &#39;DEMAX PAIR : TRANSFER_FAILED&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="官方后续处理">官方后续处理</h3><ol><li>创建新的**$cBURGER**并空头给满足条件的原$BURGER的持有者</li><li>使用burgerswap的收入以及原本要奖励给团队的burger建造一个价值700万美元的奖励池</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;事件影响&quot;&gt;事件影响&lt;/h3&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;
&lt;p&gt;本次攻击主要是因为burgerswap的智能合约分层时的验证不足，导致被攻击成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BURGER-BNB流动池中的BNB和BURGER都被大量拿走，导致</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="攻击" scheme="https://guozhe001.github.io/tags/%E6%94%BB%E5%87%BB/"/>
    
    <category term="经济利用" scheme="https://guozhe001.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>AutoShark Finance被套利分析</title>
    <link href="https://guozhe001.github.io/2021/05/26/blockchain/eth/Exploit&amp;Attack/AutoShark-Finance%E8%A2%AB%E5%A5%97%E5%88%A9%E5%88%86%E6%9E%90/"/>
    <id>https://guozhe001.github.io/2021/05/26/blockchain/eth/Exploit&amp;Attack/AutoShark-Finance%E8%A2%AB%E5%A5%97%E5%88%A9%E5%88%86%E6%9E%90/</id>
    <published>2021-05-26T07:24:13.508Z</published>
    <updated>2021-05-28T10:34:08.127Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件总结与影响">事件总结与影响</h3><ol><li>此次事件“攻击者”通过闪电贷借出大量BNB再利用SHARK合约逻辑漏洞操纵BNB-SHARK池来获得大量SHARK，最后把获得的SHARK兑换成BNB获利</li><li>用户质押的SHARK数量没有损失</li><li>因为生成了大量的SHARK然后将其抛售导致SHARK价格下跌，官方给的数据是从1.2跌倒0.01，目前的价格如下图：</li></ol><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210528145633368.png" alt></p><h3 id="事件信息">事件信息</h3><p><a href="https://medium.com/autosharkfin/how-autoshark-got-economically-exploited-3c644de5073a">AutoShark官方提供：AutoShark如何被经济利用</a></p><p><a href="https://www.jinse.com/news/blockchain/1099838.html">慢雾：AutoShark Finance 被黑分析</a></p><p><a href="https://mp.weixin.qq.com/s/lGl4mkk4MAwxaNSPeFcfYw">PeckShield分析</a></p><p><a href="https://bscscan.com/tx/0xfbe65ad3eed6b28d59bf6043debf1166d3420d214020ef54f12d2e0583a66f13">交易信息</a></p><p><a href="https://pantherswap.com/">pantherswap</a></p><p><a href="https://autoshark.finance/">autoshark.finance</a></p><p><a href="https://exchange.pancakeswap.finance/#/swap">pancakeswap</a></p><h3 id="事件分析">事件分析</h3><p>这里直接复用<a href="https://www.jinse.com/news/blockchain/1099838.html">慢雾安全团队</a>的分析步骤，我会结合token的流转和源码和具体的合约地址等再进一步解释。</p><h4 id="为了方便分析，我给涉及到的地址打上了对应的功能标签：">为了方便分析，我给涉及到的地址打上了对应的功能标签：</h4><table><thead><tr><th>address对应的tag</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://bscscan.com/address/0xd9c7efe29f3e90ce3630ea1c665217c7ab298a3b">AS-Exploiter</a></td><td>AutoShark-Exploiter的地址</td></tr><tr><td><a href="https://bscscan.com/address/0x58f876857a02d6762e0101bb5c46a8c1ed44dc16">Pancake-WBNB-BUSD-LP</a></td><td>Pancake的WBNB-BUSD流动池，是本次事件的入口，在这个LP闪电贷的BNB</td></tr><tr><td><a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a></td><td>AutoShark-Exploiter创建的合约地址</td></tr><tr><td><a href="https://bscscan.com/address/0x1fd789fa513871cb89aa655f11ec777cad1784a0">Panther-SHARK-BNB-LP</a></td><td>Panther的SHARK-BNB流动池</td></tr></tbody></table><p>攻击步骤如下：</p><h4 id="1-攻击者从-Pancake-的-WBNB-BUSD-交易对中借出大量-WBNB；">1. 攻击者从 Pancake 的 WBNB/BUSD 交易对中借出大量 WBNB；</h4><p>对应的交易中的token转移如下：<br><img src="https://gitee.com/guozhe001/images/raw/master/image-20210526161635589.png" alt></p><p>此处是通过调用<a href="https://bscscan.com/address/0x58f876857a02d6762e0101bb5c46a8c1ed44dc16">Pancake-WBNB-BUSD-LP</a>合约的<code>swap</code>方法来实现的，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    &#x2F;&#x2F; 至少有一个token兑换出的金额大于0</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;Pancake: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    &#x2F;&#x2F; 获取当前lp池中的两个token的储备数量</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    &#x2F;&#x2F; 兑换出的token数量必须小于当前池中的token数量</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;Pancake: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    &#x2F;&#x2F; 接收兑换token的地址不能是当前lp池中的token中的任意一个</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;Pancake: INVALID_TO&#39;);</span><br><span class="line">    &#x2F;&#x2F; 如果token0兑换出的金额大于0，则把amount0Out转账给指定的地址to</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    &#x2F;&#x2F; 如果参数data不为空，则调用合约to的pancakeCall方法；接下来就是合约to的表演了</span><br><span class="line">    if (data.length &gt; 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    &#x2F;&#x2F; 当合约to表演完之后，分别获取当前lp在两个token中的余额</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果新的余额大于（当前存储量-兑换出的数量），则amount0In等于新的余额 - （当前存储量-兑换出的数量）</span><br><span class="line">    &#x2F;&#x2F; amount0In和amount1In是在计算实际进来了多少</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    &#x2F;&#x2F; 如果两个都是0，说明新的balance都不大于（存储量-兑换出的金额）；这说明没有进来，那么就报错；</span><br><span class="line">    &#x2F;&#x2F; 其实这个校验是在说打给当前lp池的token数量必须大于兑换出去的数量</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;Pancake: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    &#x2F;&#x2F; 计算调整后的balance，此处会收取千分之二的费用</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(2));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(2));</span><br><span class="line">    &#x2F;&#x2F; 调用此方法后的两个token的积必须大于等于原始储备的两个token的积；即还回来的token在收完手续费之后必须大于借出去的</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;Pancake: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地事件的第一步就是调用swap，入参如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Function: swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) ***</span><br><span class="line"></span><br><span class="line">MethodID: 0x022c0d9f</span><br><span class="line">[0]:  00000000000000000000000000000000000000000000152d02c7e14af6800000</span><br><span class="line">[1]:  0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[2]:  00000000000000000000000022de6648685e4e47fd944e68b264e0e0667e2e00</span><br><span class="line">[3]:  0000000000000000000000000000000000000000000000000000000000000080</span><br><span class="line">[4]:  0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="line">[5]:  0100000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>前面的三个参数是在描述“兑换100000个BNB和0个BUSD给<a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a>”，然后因为<code>data</code>参数不为空，所以会调用<a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a>合于的<code>pancakeCall</code>方法。</p><h4 id="2-将第-1-步借出的全部-WBNB-中的一半通过-Panther-的-SHARK-WBNB-交易对兑换出大量的-SHARK，同时池中-WBNB-的数量增多；">2. 将第 1 步借出的全部 WBNB 中的一半通过 Panther 的 SHARK/WBNB 交易对兑换出大量的 SHARK，同时池中 WBNB 的数量增多；</h4><p>对应的交易中的token转移如下：<br><img src="https://gitee.com/guozhe001/images/raw/master/image-20210526163530873.png" alt></p><p>此处是一个兑换动作，调用合约的话其实有多种方式实现，下面是一种实现方式，调用<code>PantherPair.sol</code>的<code>swapExactTokensForTokens</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function swapExactTokensForTokens(</span><br><span class="line">    uint amountIn,</span><br><span class="line">    uint amountOutMin,</span><br><span class="line">    address[] calldata path,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) external virtual override ensure(deadline) returns (uint[] memory amounts) &#123;</span><br><span class="line">    amounts &#x3D; PantherLibrary.getAmountsOut(factory, amountIn, path);</span><br><span class="line">    require(amounts[amounts.length - 1] &gt;&#x3D; amountOutMin, &#39;PantherRouter: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    TransferHelper.safeTransferFrom(</span><br><span class="line">        path[0], msg.sender, PantherLibrary.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">    );</span><br><span class="line">    _swap(amounts, path, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-将第-1-步和第-2-步的-WBNB-和-SHARK-打入到-SharkMinter-中，为后续攻击做准备；">3. 将第 1 步和第 2 步的 WBNB 和 SHARK 打入到 SharkMinter 中，为后续攻击做准备；</h4><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210526163723014.png" alt></p><h4 id="4-调用-AutoShark-项目中的-WBNB-SHARK-策略池中的-getReward-函数，该函数会根据用户获利的资金从中抽出一部分手续费，作为贡献值给用户奖励-SHARK-代币，这部分操作在-SharkMinter-合约中进行操作；">4. 调用 AutoShark 项目中的 WBNB/SHARK 策略池中的 getReward 函数，该函数会根据用户获利的资金从中抽出一部分手续费，作为贡献值给用户奖励 SHARK 代币，这部分操作在 SharkMinter 合约中进行操作；</h4><h4 id="5-SharkMinter-合约在收到用户收益的-LP-手续费之后，会将-LP-重新拆成对应的-WBNB-和-SHARK，重新加入到-Panther-的-WBNB-SHARK-交易池中；">5. SharkMinter 合约在收到用户收益的 LP 手续费之后，会将 LP 重新拆成对应的 WBNB 和 SHARK，重新加入到 Panther 的 WBNB/SHARK 交易池中；</h4><h4 id="6-由于第-3-步攻击者已经事先将对应的代币打入到-SharkMinter-合约中，SharkMinter-合约在移除流动性后再添加流动性的时候，使用的是-SharkMinter-合约本身的-WBNB-和-SHARK-余额进行添加，这部分余额包含攻击者在第-3-步打入-SharkMinter-的余额，导致最后合约获取的添加流动性的余额是错误的，也就是说-SharkMinter-合约误以为攻击者打入了巨量的手续费到合约中；">6. 由于第 3 步攻击者已经事先将对应的代币打入到 SharkMinter 合约中，SharkMinter 合约在移除流动性后再添加流动性的时候，使用的是 SharkMinter 合约本身的 WBNB 和 SHARK 余额进行添加，这部分余额包含攻击者在第 3 步打入 SharkMinter 的余额，导致最后合约获取的添加流动性的余额是错误的，也就是说 SharkMinter 合约误以为攻击者打入了巨量的手续费到合约中；</h4><h4 id="7-SharkMinter-合约在获取到手续费的数量后，会通过-tvlInWBNB-函数计算这部分手续费的价值，然后根据手续费的价值铸币-SHARK-代币给用户。但是在计算-LP-价值的时候，使用的是-Panther-WBNB-SHARK-池的-WBNB-实时数量除以-LP-总量来计算-LP-能兑换多少-WBNB。但是由于在第-2-步中，Panther-池中-WBNB-的数量已经非常多，导致计算出来的-LP-的价值非常高；">7. SharkMinter 合约在获取到手续费的数量后，会通过 tvlInWBNB 函数计算这部分手续费的价值，然后根据手续费的价值铸币 SHARK 代币给用户。但是在计算 LP 价值的时候，使用的是 Panther WBNB/SHARK 池的 WBNB 实时数量除以 LP 总量来计算 LP 能兑换多少 WBNB。但是由于在第 2 步中，Panther 池中 WBNB 的数量已经非常多，导致计算出来的 LP 的价值非常高；</h4><p>对应的<code>SharkMinter</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function mintFor(address flip, uint _withdrawalFee, uint _performanceFee, address to, uint, uint boostRate) override external onlyMinter returns(uint mintAmount) &#123;</span><br><span class="line">    uint feeSum &#x3D; _performanceFee.add(_withdrawalFee);</span><br><span class="line">    uint tax &#x3D; 0;</span><br><span class="line">    if (flip &#x3D;&#x3D; address(PANTHER)) &#123;</span><br><span class="line">        tax &#x3D; feeSum.mul(PANTHER.transferTaxRate()).div(10000);</span><br><span class="line">    &#125;</span><br><span class="line">    IBEP20(flip).safeTransferFrom(msg.sender, address(this), feeSum.sub(tax).sub(1));</span><br><span class="line"></span><br><span class="line">    uint sharkBNBAmount &#x3D; tokenToSharkBNB(flip, IBEP20(flip).balanceOf(address(this)));</span><br><span class="line">    address flipToken &#x3D; sharkBNBFlipToken();</span><br><span class="line">    IBEP20(flipToken).safeTransfer(sharkPool, sharkBNBAmount);</span><br><span class="line">    IStakingRewards(sharkPool).notifyRewardAmount(sharkBNBAmount);</span><br><span class="line">    &#x2F;&#x2F; 这里计算的贡献变大了</span><br><span class="line">    uint contribution &#x3D; helper.tvlInBNB(flipToken, sharkBNBAmount).mul(_performanceFee).div(feeSum);</span><br><span class="line">    &#x2F;&#x2F; 所以计算出的要铸造的shark的数量也变大了</span><br><span class="line">    uint mintShark &#x3D; amountSharkToMint(contribution).mul(boostRate).div(10000);</span><br><span class="line">    mint(mintShark, to);</span><br><span class="line">    mintAmount &#x3D; mintShark;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>合约<code>StrategyHelperV1</code>的<code>tvlInBNB</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function tvlInBNB(address _flip, uint amount) override public view returns (uint) &#123;</span><br><span class="line">    if (_flip &#x3D;&#x3D; address(PANTHER)) &#123;</span><br><span class="line">        return pantherPriceInBNB().mul(amount).div(1e18);</span><br><span class="line">    &#125;</span><br><span class="line">    address _token0 &#x3D; IPantherPair(_flip).token0();</span><br><span class="line">    address _token1 &#x3D; IPantherPair(_flip).token1();</span><br><span class="line">    if (_token0 &#x3D;&#x3D; address(WBNB) || _token1 &#x3D;&#x3D; address(WBNB)) &#123;</span><br><span class="line">        &#x2F;&#x2F; _flip是lp，因为此交易对的bnb很多，所以在得到的bnb就很大</span><br><span class="line">        uint bnb &#x3D; WBNB.balanceOf(address(_flip)).mul(amount).div(IBEP20(_flip).totalSupply());</span><br><span class="line">        return bnb.mul(2);</span><br><span class="line">    &#125;</span><br><span class="line">    uint balanceToken0 &#x3D; IBEP20(_token0).balanceOf(_flip);</span><br><span class="line">    &#x2F;&#x2F; 因为之前使用大量的bnb兑换token，导致price变大了</span><br><span class="line">    uint price &#x3D; tokenPriceInBNB(_token0);</span><br><span class="line">    &#x2F;&#x2F; (((balanceToken0 * price) &#x2F; 1e18) * 2 * amount) &#x2F; totalSupply</span><br><span class="line">    return balanceToken0.mul(price).div(1e18).mul(2).mul(amount).div(IBEP20(_flip).totalSupply());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-在-LP-价值错误和手续费获取数量错误的情况下，SharkMinter-合约最后在计算攻击者的贡献的时候计算出了一个非常大的值，导致-SharkMinter-合约给攻击者铸出了大量的-SHARK-代币；">8. 在 LP 价值错误和手续费获取数量错误的情况下，SharkMinter 合约最后在计算攻击者的贡献的时候计算出了一个非常大的值，导致 SharkMinter 合约给攻击者铸出了大量的 SHARK 代币；</h4><p>对应的交易中的token转移如下：图中从0地址到SharkMinter就是在铸造大量的SHARK。</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210528154858329.png" alt></p><h4 id="9-攻击者后续通过卖出-SHARK-代币来换出-WBNB，偿还闪电贷。然后获利离开。">9. 攻击者后续通过卖出 SHARK 代币来换出 WBNB，偿还闪电贷。然后获利离开。</h4><p>对应的交易中的token转移如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210528154659796.png" alt></p><p>此步骤的操作逻辑比较简单，主要是调用<a href="https://bscscan.com/address/0x1fd789fa513871cb89aa655f11ec777cad1784a0#code">Panther-SHARK-BNB-LP</a>合约的<code>swapTokensForExactTokens</code>方法；然后再把WBNB转给Pancake 的 WBNB/BUSD 交易对（调用<a href="https://bscscan.com/address/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c">WBNB</a>的<code>transfer</code>方法）来偿还闪电贷。</p><h3 id="事件处理结果">事件处理结果</h3><h4 id="AutoShark官方给的补偿计划："><a href="https://medium.com/autosharkfin/how-autoshark-got-economically-exploited-3c644de5073a">AutoShark官方给的补偿计划</a>：</h4><ol><li>使用新的代币$JAW代替原来的$SHARK</li><li>以<a href="https://bscscan.com/block/7698695">被攻击前一个区块</a>作为快照将$JAW分配给此时的$SHARK持有人</li><li>在180天里将所有金库的盈利的30%给$JAW的持有者</li><li>之前每铸造100个$SHARK，然后再额外铸造15个$SHARK给研发人员；接下来的60天里每铸造100个$JAW将其中的15个$JAW给$JAW的持有者。</li><li>将在PantherSwap平台发起IPO所得的部分BNB分配给$JAW持有者（金额没说）</li><li>将自己平台持有的所有$SHARK全部销毁</li><li>集成ChainLink的资产报价</li></ol><h4 id="PantherSwap关停所有-SHARK的LP池">PantherSwap关停所有$SHARK的LP池</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;事件总结与影响&quot;&gt;事件总结与影响&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;此次事件“攻击者”通过闪电贷借出大量BNB再利用SHARK合约逻辑漏洞操纵BNB-SHARK池来获得大量SHARK，最后把获得的SHARK兑换成BNB获利&lt;/li&gt;
&lt;li&gt;用户质押的SHARK数量没有</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="审计报告" scheme="https://guozhe001.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>CERTIK针对SOLO.TOP的审计报告学习</title>
    <link href="https://guozhe001.github.io/2021/05/25/blockchain/eth/audit/CERTIK%E9%92%88%E5%AF%B9SOLO.TOP%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
    <id>https://guozhe001.github.io/2021/05/25/blockchain/eth/audit/CERTIK%E9%92%88%E5%AF%B9SOLO.TOP%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-25T02:41:13.190Z</published>
    <updated>2021-05-25T07:24:30.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习结论">学习结论</h2><ol><li>审计报告内容比较简单，审计发现的代码问题因给的代码较少难以做进一步的判断</li><li>从审计报告中看项目的代码是比较健康的，审计发现的问题也都做了修复</li><li>代码未开源无法判定其他风险</li></ol><h2 id="基本信息">基本信息</h2><p><a href="https://solo.top/#/index">SOLO.TOP</a></p><p><a href="https://solo.top/Solo_Top_Final_Audit_Report_By_CertiK.pdf">Audit Report </a></p><h3 id="审计结果">审计结果</h3><p>共发现12个问题，其中2个是Minor级别，其余的都是information级别。<br><img src="https://gitee.com/guozhe001/images/raw/master/%E6%88%AA%E5%B1%8F2021-05-25%2011.43.48.png" alt></p><h4 id="审计种类">审计种类</h4><ul><li>Gas优化</li><li>数学计算</li><li>逻辑问题</li><li>流程控制</li><li>代码样式</li><li>魔法数字</li><li>编译错误</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习结论&quot;&gt;学习结论&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;审计报告内容比较简单，审计发现的代码问题因给的代码较少难以做进一步的判断&lt;/li&gt;
&lt;li&gt;从审计报告中看项目的代码是比较健康的，审计发现的问题也都做了修复&lt;/li&gt;
&lt;li&gt;代码未开源无法判定其他风险&lt;/li&gt;
</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="审计报告" scheme="https://guozhe001.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>审计智能合约需要关注哪些内容</title>
    <link href="https://guozhe001.github.io/2021/05/24/blockchain/eth/audit/%E5%AE%A1%E8%AE%A1%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/"/>
    <id>https://guozhe001.github.io/2021/05/24/blockchain/eth/audit/%E5%AE%A1%E8%AE%A1%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/</id>
    <published>2021-05-24T03:00:11.075Z</published>
    <updated>2021-05-26T07:23:41.427Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了<a href="https://www.certik.org/">CERTIK</a>、<a href="https://www.fairyproof.com/">灵踪安全</a>、<a href="https://www.lianantech.com/#/index?index=0">成都链安</a>、<a href="https://www.trailofbits.com/">Trail of Bits</a> 等公司的合约审计报告；在此做一个总结，通过学习审计报告中的关注点来尽量避免在以后的合约开发过程中踩这些坑。</p><p>虽然列出的内容很多，但是背后的逻辑与思想并没有完全了解与吃透，后续还需要继续学习与消化。</p><h2 id="合约审计的维度">合约审计的维度</h2><p>合约审计主要包括下面这些大类</p><ul><li>代码规范审计</li><li>代码漏洞审计</li><li>测试与验证审计</li><li>业务逻辑审计</li></ul><h2 id="合约审计的方式">合约审计的方式</h2><ul><li>形式化验证</li><li>静态分析</li><li>动态分析</li><li>典型案例测试</li><li>人工审核</li></ul><h2 id="代码规范审计">代码规范审计</h2><h4 id="编译器版本安全审计">编译器版本安全审计</h4><p>老版本的编译器可能会导致各种已知的安全问题，建议开发者在代码中指定合约代码采用最新的编译器版本，并消除编译器告警。</p><h4 id="弃用项审计">弃用项审计</h4><p>Solidity智能合约开发语言处于快速迭代中，部分关键字已被新版本的编译器弃用，如throw、years等，为了消除其可能导致的隐患，合约开发者不应该使用当前编译器版本已弃用的关键字。</p><h4 id="冗余代码审计">冗余代码审计</h4><p>智能合约中的冗余代码会降低代码可读性，并可能需要消耗更多的gas用于合约部署，建议消除冗余代码。</p><h4 id="SafeMath-功能审计">SafeMath 功能审计</h4><p>检查合约中是否正确使用SafeMath库内的函数进行数学运算，或者进行其他防溢出的检查。</p><h4 id="require-assert-使用审计">require/assert 使用审计</h4><p>Solidity使用状态恢复异常来处理错误。这种机制将会撤消对当前调用(及其所有子调用)中的状态所做的所有更改，并向调用者标记错误。函数assert和require可用于检查条件并在条件不满足时抛出异常。</p><ul><li><p>assert函数只能用于测试内部错误，并检查非变量。</p></li><li><p>require函数用于确认条件有效性，例如输入变量，或合约状态变量是否满足条件，或验证外部合约调用的返回值。</p></li></ul><h4 id="gas-消耗审计">gas 消耗审计</h4><h4 id="可见性规范审计">可见性规范审计</h4><h4 id="fallback-函数使用审计">fallback 函数使用审计</h4><h4 id="代码样式">代码样式</h4><h4 id="魔法数字">魔法数字</h4><h4 id="编译错误">编译错误</h4><h4 id="代码封装">代码封装</h4><h4 id="集中化">集中化</h4><h4 id="可升级性">可升级性</h4><h4 id="监控">监控</h4><h2 id="代码漏洞审计">代码漏洞审计</h2><h4 id="整型溢出审计">整型溢出审计</h4><p>整型溢出是很多语言都存在的安全问题，它们在智能合约中尤其危险。Solidity最多能处理256位的数字(2**256-1)，最大数字增加1会溢出得到0。同样，当数字为uint类型时，0减去1会下溢得到最大数字值。溢出情况会导致不正确的结果，特别是如果其可能的结果未被预期，可能会影响程序的可靠性和安全性。</p><h4 id="重入攻击审计">重入攻击审计</h4><p>重入漏洞是最典型的智能合约漏洞，曾导致了The DAO被攻击。该漏洞原因是Solidity中的call.value()函数在被用来发送ETH的时候会消耗它接收到的所有gas，当调用call.value()函数发送ETH的逻辑顺序存在错误时，就会存在重入攻击的风险。</p><h4 id="伪随机数生成审计">伪随机数生成审计</h4><p>智能合约中可能会使用到随机数，在solidity下常见的是用block区块信息作为随机因子生成，但是这样使用是不安全的，区块信息是可以被矿工控制或被攻击者在交易时获取到，这类随机数在一定程度上是可预测或可碰撞的，比较典型的例子就是fomo3d的airdrop随机数可以被碰撞。</p><h4 id="交易顺序依赖审计">交易顺序依赖审计</h4><p>在交易打包执行过程中，面对相同难度的交易时，矿工往往会选择gas费用高的优先打包，因此用户可以指定更高的gas费用，使自己的交易优先被打包执行。</p><h4 id="拒绝服务攻击审计">拒绝服务攻击审计</h4><p>拒绝服务攻击，即Denial of Service，可以使目标无法提供正常的服务。在智能合约中也会存在此类问题，由于智能合约的不可更改性，该类攻击可能使得合约永远无法恢复正常工作状态。导致智能合约拒绝服务的原因有很多种，包括在作为交易接收方时的恶意revert、代码设计缺陷导致gas耗尽等等。</p><h4 id="函数调用权限审计">函数调用权限审计</h4><p>智能合约如果存在高权限功能，如：铸币、自毁、change owner等，需要对函数调用做权限限制，避免权限泄露导致的安全问题。</p><h4 id="call-delegatecall-安全审计">call/delegatecall 安全审计</h4><p>Solidity中提供了call/delegatecall函数来进行函数调用，如果使用不当，会造成call注入漏洞，例如call的参数如果可控，则可以控制本合约进行越权操作或调用其他合约的危险函数</p><h4 id="返回值安全审计">返回值安全审计</h4><p>在Solidity中存在transfer()、send()、call.value()等方法中，transfer转账失败交易会回滚，而send和call.value转账失败会return false，如果未对返回做正确判断，则可能会执行到未预期的逻辑;另外在HRC20 Token的transfer/transferFrom功能实现中，也要避免转账失败returnfalse的情况，以免造成假充值漏洞。</p><h4 id="tx-origin-使用安全审计">tx.origin 使用安全审计</h4><p>在智能合约的复杂调用中，tx.origin表示交易的初始创建者地址，如果使用tx.origin进行权限判断，可能会出现错误;另外，如果合约需要判断调用方是否为合约地址时则需要使用tx.origin，不能使用extcodesize。</p><h4 id="重放攻击审计">重放攻击审计</h4><p>重放攻击是指如果两份合约使用了相同的代码实现，并且身份鉴权在传参中，当用户在向一份合<br>约中执行一笔交易，交易信息可以被复制并且向另一份合约重放执行该笔交易。</p><h4 id="变量覆盖审计">变量覆盖审计</h4><p>智能合约中存在着复杂的变量类型，例如结构体、动态数组等，如果使用不当，对其赋值后，可能导致覆盖已有状态变量的值，造成合约执行逻辑异常。</p><h4 id="其他的攻击与安全检查的点">其他的攻击与安全检查的点</h4><p>下面这些审计的点后续再做持续的学习与解释补充</p><ul><li>重排攻击</li><li>注入攻击</li><li>条件竞争攻击</li><li>时间戳依赖攻击</li><li>冗余的回调函数</li><li>函数状态变量的显式可见性</li><li>逻辑缺陷</li><li>未声明的存储指针</li><li>算术精度误差</li><li>假充值漏洞</li><li>变量覆盖</li><li>设计缺陷</li><li>潜在后门</li><li>代币发行</li><li>代理升级</li><li>委托调用插槽共享</li><li>用户资金安全</li><li>迁移管理</li></ul><h2 id="测试和验证">测试和验证</h2><h4 id="自动化测试与验证工具：">自动化测试与验证工具：</h4><ul><li><a href="https://github.com/crytic/slither">Slither</a></li><li><a href="https://github.com/crytic/echidna">Echidna</a></li></ul><h4 id="测试和验证关注点">测试和验证关注点</h4><ul><li>代码自动化测试覆盖率</li><li>代码测试用例通过率</li></ul><h2 id="业务逻辑审计">业务逻辑审计</h2><p>根据白皮书和被审计公司的业务逻辑进行的审计，包括：</p><ul><li>业务逻辑审计</li><li>业务实现审计</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近学习了&lt;a href=&quot;https://www.certik.org/&quot;&gt;CERTIK&lt;/a&gt;、&lt;a href=&quot;https://www.fairyproof.com/&quot;&gt;灵踪安全&lt;/a&gt;、&lt;a href=&quot;https://www.lianantech.com/#/in</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="审计报告" scheme="https://guozhe001.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>CoinWind审计报告学习</title>
    <link href="https://guozhe001.github.io/2021/05/24/blockchain/eth/audit/CoinWind%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
    <id>https://guozhe001.github.io/2021/05/24/blockchain/eth/audit/CoinWind%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-24T02:50:49.686Z</published>
    <updated>2021-05-25T07:20:40.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习结论">学习结论</h2><ol><li>审计报告不严谨，如“成都链安”的审计报告存在拼写错误（错误见中文版“审计类型及结果”），“灵踪安全”的审计报告是一个模板但是未替换模板的内容（错误见中文版&quot;引用文档&quot;）。</li><li>代码未开源，无法从官网、审计报告以及搜索引擎获得项目的源码，审计报告中只存在部分代码片段。（个人使用此网站进行审批时调用的合约也<a href="https://bscscan.com/bytecode-decompiler?a=0x6ba7d75ec6576f88a10be832c56f0f27dc040ddd">无法完全反编译</a>）</li><li>成都链安的审计结论说的很中立：“项目中管理权限 owner 和 governance 对整 个项目有较高的控制权，建议做好权限管控。”<ol><li>报告中显示有个只允许owner调用的提现的方法，因为代码不全无法根据上下文判断这个是不是后门。如下图</li><li><img src="https://gitee.com/guozhe001/images/raw/master/image-20210524171340292.png" alt></li></ol></li></ol><p><strong>因为代码未开源且owner和管理员有较高的权限，注意风险</strong></p><h2 id="基本信息">基本信息</h2><p>官网：<a href="https://coinwind.pro/">https://coinwind.pro/</a></p><p>审计平台：<a href="https://www.fairyproof.com/">灵踪安全</a>、<a href="https://www.lianantech.com/#/index?index=0">成都链安</a></p><h2 id="成都链安"><a href="https://www.lianantech.com/#/index?index=0">成都链安</a></h2><p>审计报告：<a href="https://www.coinwind.com/BEOSIN_en.pdf">英文</a>、<a href="https://www.coinwind.com/BEOSIN_zh.pdf">中文</a></p><ol><li>审计报告中列出了一些审计的代码片段，最终结果为pass</li><li>“owner 和 governance ”权限较高</li></ol><h2 id="灵踪安全"><a href="https://www.fairyproof.com/">灵踪安全</a></h2><p>审计报告：<a href="https://www.coinwind.com/flyhub_en.pdf">英文</a>、<a href="https://www.coinwind.com/flyhub_zh.pdf">中文</a></p><ol><li>审计报告中提到的问题没有对应的代码片段，读了之后并没有办法理解是什么问题</li><li>从灵踪安全的角度来说发现了5个问题并且项目方已经解决</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习结论&quot;&gt;学习结论&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;审计报告不严谨，如“成都链安”的审计报告存在拼写错误（错误见中文版“审计类型及结果”），“灵踪安全”的审计报告是一个模板但是未替换模板的内容（错误见中文版&amp;quot;引用文档&amp;quot;）。&lt;/li&gt;
&lt;li&gt;代码</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="审计报告" scheme="https://guozhe001.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>certik针对pancakeswap的审计报告学习</title>
    <link href="https://guozhe001.github.io/2021/05/21/blockchain/eth/audit/certik%E9%92%88%E5%AF%B9pancakeswap%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
    <id>https://guozhe001.github.io/2021/05/21/blockchain/eth/audit/certik%E9%92%88%E5%AF%B9pancakeswap%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-21T10:28:39.675Z</published>
    <updated>2021-05-25T07:26:15.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="审计报告总结">审计报告总结</h3><ol><li>共发现9个问题，其中5个是information级别，其他更严重级别的问题pancakeswap团队已经修复或者跟certik沟通表示没有影响</li><li>通过审计报告看项目还是很健康的。</li></ol><h3 id="审计项目地址">审计项目地址</h3><p><a href="https://www.certik.org/projects/pancakeswap">https://www.certik.org/projects/pancakeswap</a></p><h3 id="审计发现的问题">审计发现的问题</h3><p>暂时忽略代码格式之类的问题，主要列出中级以上的问题。</p><h4 id="SBR-01-Incorrect-Delegation-Flow">SBR-01: Incorrect Delegation Flow</h4><p>问题比较简单直接看修复提交的代码：在<code>burn</code>时需要把此账户的授权的地址修改为<code>0</code>地址，其实就是把授权移除；这个问题应该是个手误。</p><p><a href="https://github.com/pancakeswap/pancake-farm/commit/dacf82832df75d11ea52c18fd6a6e9ddc59d0834#diff-2de7312011f133f37ba339716dbb7c9304a9364fa63be4471e99980fb0cc92e3">commit</a></p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210521190424282.png" alt></p><h4 id="SCF-01-addressList-Inaccuracy"><a href="https://github.com/pancakeswap/pancake-farm/commit/2b6732162bba5232e7fe5d9d41ac5d71d4b3a1d4#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">SCF-01</a> addressList Inaccuracy</h4><h5 id="Description">Description:</h5><p>The first linked <code>if</code> block pushes a new <code>address</code> to the <code>addressList</code> array in the case the <code>userInfo</code> mapping lookup yields <code>0</code> on the <code>amount</code> member. This case is possible even after the user has already been added to the array, either by invoking <code>emergencyWithdraw</code> or withdrawing the full amount held by the user.</p><h5 id="Recommendation">Recommendation:</h5><p>We advise that the push mechanism is revised to ensure that the user does not already exist in the array.</p><h5 id="Alleviation">Alleviation:</h5><p>The PancakeSwap team altered the condition for pushing new items to the addressList array, however duplicates can still exist. After conversing with the team, we were informed that the array is not utilized on-chain and is meant to aid off-chain processes in an airdrop mechanism which will eliminate duplicate addresses. As such, this issue can be safely ignored. We would like to note that this is not an optimal mechanism to conduct this, as it would be better to instead rely on  emitted events and blockchain analysis rather than contract storage</p><h5 id="修复后的代码如下：">修复后的代码如下：</h5><p>certik提出的问题意思是，在存款时通过用户的amount是否为0判断地址是否存在<code>addressList</code>中不严谨，因为可能之前存过一次然后全部提现了，这样就会导致<code>amount</code>为0并且在<code>addressList</code>中存在。</p><p>pancakeswap团队通过遍历<code>addressList</code>来判断地址是否存在于<code>addressList</code>中。</p><p><a href="https://github.com/pancakeswap/pancake-farm/commit/2b6732162bba5232e7fe5d9d41ac5d71d4b3a1d4#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">commit</a></p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210521184602489.png" alt></p><h5 id="个人理解">个人理解</h5><p><em>通过遍历<code>addressList</code>的方式来查找某个地址是否在这个列表中不太可取，因为这增加了gas费。</em></p><p><em>如果别人想要攻击一直存入很小的<code>amount</code>来增加<code>addressList</code>的大小会导致存款的方法的gas费特别高。</em></p><h4 id="SCF-03-Incorrect-Reset-Mechanism"><a href="https://github.com/pancakeswap/pancake-farm/commit/8604c236388cd6e30fcf09321553324f308d1209#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">SCF-03</a> Incorrect Reset Mechanism</h4><h5 id="Description-v2">Description:</h5><p>The emergencyWithdraw function is meant to “reset” a user’s state and withdraw his deposited tokens. In this case, the rewardPending variable of the user struct is not zeroed out.</p><h5 id="Recommendation-v2">Recommendation:</h5><p>As the rewardPending member is cumulative, it is possible to exploit this behavior and artificially increase the pending rewards of a user. We advise that either a manual 0 assignment statement is introduced in the emergencyWithdraw function or a delete operation is conducted on the full struct located at userInfo[msg.sender].</p><h5 id="Alleviation-v2">Alleviation:</h5><p>The emergencyWithdraw function was properly fixed to zero out all members of the UserInfo struct</p><h5 id="修复后代码如下">修复后代码如下</h5><p>此问题是说在转账之后应该吧user结构里面的值都更新为0，团队已经做了修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; Withdraw without caring about rewards. EMERGENCY ONLY.</span><br><span class="line">function emergencyWithdraw() public &#123;</span><br><span class="line">    UserInfo storage user &#x3D; userInfo[msg.sender];</span><br><span class="line">    syrup.safeTransfer(address(msg.sender), user.amount);</span><br><span class="line">    emit EmergencyWithdraw(msg.sender, user.amount);</span><br><span class="line">    user.amount &#x3D; 0;</span><br><span class="line">    user.rewardDebt &#x3D; 0;</span><br><span class="line">    user.rewardPending &#x3D; 0; &#x2F;&#x2F; 此行为修复行</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="个人理解-v2">个人理解</h5><p><em>最好是先修改user结构中的值在进行转账，这样应该是最佳开发实践。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;审计报告总结&quot;&gt;审计报告总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;共发现9个问题，其中5个是information级别，其他更严重级别的问题pancakeswap团队已经修复或者跟certik沟通表示没有影响&lt;/li&gt;
&lt;li&gt;通过审计报告看项目还是很健康的。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="智能合约" scheme="https://guozhe001.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
    <category term="solidity" scheme="https://guozhe001.github.io/tags/solidity/"/>
    
    <category term="审计报告" scheme="https://guozhe001.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/05/18/language/d%20/"/>
    <id>https://guozhe001.github.io/2021/05/18/language/d%20/</id>
    <published>2021-05-18T07:12:07.368Z</published>
    <updated>2021-05-20T02:23:29.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="runtime-cgo">runtime/cgo</h1><p>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;runtime-cgo&quot;&gt;runtime/cgo&lt;/h1&gt;
&lt;p&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/05/12/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/"/>
    <id>https://guozhe001.github.io/2021/05/12/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/</id>
    <published>2021-05-12T08:58:44.228Z</published>
    <updated>2021-05-12T10:01:21.674Z</updated>
    
    <content type="html"><![CDATA[<p>一些好的但是还没有上线（或发币）的项目跟踪</p><table><thead><tr><th>项目名称</th><th>项目描述</th><th>项目地址</th><th>个人备注</th></tr></thead><tbody><tr><td>optimism</td><td>layer 2解决方案</td><td><a href="https://optimism.io/">https://optimism.io/</a></td><td>uniswap等defi项目支持</td></tr><tr><td><strong>ZK Rollup</strong></td><td>layer 2解决方案</td><td><a href="https://zksync.io/">https://zksync.io/</a></td><td><a href="https://zhuanlan.zhihu.com/p/352515617">2021值得关注的l2</a></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些好的但是还没有上线（或发币）的项目跟踪&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目名称&lt;/th&gt;
&lt;th&gt;项目描述&lt;/th&gt;
&lt;th&gt;项目地址&lt;/th&gt;
&lt;th&gt;个人备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;op</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/05/11/blockchain/eth/Solidity%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://guozhe001.github.io/2021/05/11/blockchain/eth/Solidity%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-11T07:16:48.628Z</published>
    <updated>2021-05-11T08:13:19.761Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://zhuanlan.zhihu.com/p/154124920">【译】Solidity 0.6.x更新：继承</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/154124920&quot;&gt;【译】Solidity 0.6.x更新：继承&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python总结</title>
    <link href="https://guozhe001.github.io/2021/04/20/language/Python%E6%80%BB%E7%BB%93/"/>
    <id>https://guozhe001.github.io/2021/04/20/language/Python%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-20T06:26:38.351Z</published>
    <updated>2021-05-20T02:23:28.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter">Jupyter</h2><h3 id="启动">启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="ModuleNotFoundError-No-module-named-‘okex’">ModuleNotFoundError: No module named ‘okex’</h3><p>在导入本地文件夹的文件时报错如上，可以在import这个模块之前添加以下代码，然后再import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module_path = os.path.abspath(os.path.join(<span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;module_path=&quot;</span>, module_path)</span><br><span class="line"><span class="keyword">if</span> module_path <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(module_path)</span><br></pre></td></tr></table></figure><h3 id="AttributeError-module-‘util-file-util’-has-no-attribute-‘exists’"><a href="https://www.528btc.com/bk/160265922370218.html">AttributeError</a>: module ‘util.file_util’ has no attribute ‘exists’</h3><p>如果本地的python代码已经修改，如果不重启（刷新）jupyter会报错如上，刷新一下即可。</p><h2 id="Pydoc">Pydoc</h2><p>本地启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pydoc -p 6789</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Jupyter&quot;&gt;Jupyter&lt;/h2&gt;
&lt;h3 id=&quot;启动&quot;&gt;启动&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="language" scheme="https://guozhe001.github.io/categories/language/"/>
    
    <category term="Python" scheme="https://guozhe001.github.io/categories/language/Python/"/>
    
    
    <category term="language" scheme="https://guozhe001.github.io/tags/language/"/>
    
    <category term="Python" scheme="https://guozhe001.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>结合交易页面与源码看1INCH的兑换逻辑</title>
    <link href="https://guozhe001.github.io/2021/04/15/blockchain/eth/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E7%9C%8B1inch%E7%9A%84%E5%85%91%E6%8D%A2%E9%80%BB%E8%BE%91/"/>
    <id>https://guozhe001.github.io/2021/04/15/blockchain/eth/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E7%9C%8B1inch%E7%9A%84%E5%85%91%E6%8D%A2%E9%80%BB%E8%BE%91/</id>
    <published>2021-04-15T08:09:33.939Z</published>
    <updated>2021-05-31T07:55:48.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1INCH的主要优缺点">1INCH的主要优缺点</h2><h3 id="优点">优点</h3><ol><li>支持主流的DEX，计算的兑换路径比较</li><li>支持用户自定义允许的最大划点、交易速度（gas费价格）</li></ol><h3 id="缺点">缺点</h3><ol><li>在计算好兑换路径之后，可能会因为兑换链路过长而导致价格已经变化；此时会回滚交易，浪费了gas费又没有成交</li><li>在交易时如果gas费没有用完，会归1INCH合约所有而不是返还给调用者。</li></ol><h2 id="1INCH的主要逻辑">1INCH的主要逻辑</h2><p>总结成一句话是在以太坊网络上查询其他的去中心化交易所的兑换汇率，然后通过<strong>拆分</strong>或者<strong>过渡令牌</strong>交换的方式选择最佳的兑换方式。</p><h3 id="两种兑换方式">两种兑换方式</h3><h4 id="过渡令牌">过渡令牌</h4><p>如下图ETH/USDT的交易对，1inch算出的最佳方案是先兑换成sUSD，再用sUSD兑换WETH，再用WETH兑换ETH。</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210415160725165.png" alt="image-20210415160725165"></p><h4 id="拆分">拆分</h4><p>下面的SNX/USDT交易对的图显示先用过渡令牌，最后一步时拆分到两个交易所兑换SNX。</p><p><img src="https://gitee.com/guozhe001/images/raw/master/SNX:USDT%E6%8B%86%E5%88%86.png" alt="SNX:USDT拆分"></p><h3 id="目前支持的DEX">目前支持的DEX</h3><ul><li><p><a href="https://v1.uniswap.exchange/">Uniswap</a></p></li><li><p><a href="https://uniswap.exchange/">Uniswap V2</a></p></li><li><p><a href="https://kyber.network/">Kyber</a></p></li><li><p><a href="https://bancor.network/">Bancor</a></p></li><li><p><a href="https://oasis.app/">Oasis</a></p></li><li><p><a href="https://curve.fi/">Curve</a></p></li><li><p><a href="https://github.com/1inch/1inchProtocol/blob/master">Mooniswap</a></p></li><li><p><a href="https://trade.dforce.network/">Dforce XSwap</a></p></li><li><p><a href="https://www.shellprotocol.io/">Shell</a></p></li><li><p><a href="https://app.mstable.org/">mStable</a></p></li><li><p><a href="https://chai.money/">CHAI</a></p></li><li><p><a href="https://btu-protocol.com/">BDAI</a></p></li><li><p><a href="https://aave.com/">Aave</a></p></li><li><p><a href="https://fulcrum.trade/">Fulcrum</a></p></li><li><p><a href="https://compound.finance/">Compound</a></p></li><li><p><a href="https://iearn.finance/">Iearn</a></p></li><li><p><a href="https://idle.finance/">Idle</a></p></li><li><p><a href="https://weth.io/ru/">WETH</a></p></li></ul><h2 id="背后的逻辑">背后的逻辑</h2><h3 id="代币源码：1INCH">代币源码：<a href="https://cn.etherscan.com/token/0x111111111117dC0aa78b770fA6A738034120C302">1INCH</a></h3><ul><li>是一个ERC20代币</li><li>总共发行15亿枚</li><li>可以被销毁（必须由持有者允许）</li></ul><p>合约代码如下，没有其他的特殊性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">contract OneInch is ERC20Permit, ERC20Burnable, Ownable &#123;</span><br><span class="line">    constructor(address _owner) public ERC20(&quot;1INCH Token&quot;, &quot;1INCH&quot;) EIP712(&quot;1INCH Token&quot;, &quot;1&quot;) &#123;</span><br><span class="line">        _mint(_owner, 1.5e9 ether);</span><br><span class="line">        transferOwnership(_owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mint(address to, uint256 amount) external onlyOwner &#123;</span><br><span class="line">        _mint(to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协议源码：1inchProtocol">协议源码：<a href="https://github.com/1inch/1inchProtocol">1inchProtocol</a></h3><p>此协议描述了1INCH的工作原理（<em>此协议的代码比较多，只看了一下主要的流程忽略了具体的交易所实现</em>），在兑换时的步骤具体如下：</p><ol><li>使用<code>getExpectedReturn</code>方法试算本次的最佳兑换方式</li><li>使用<code>getExpectedReturnWithGas</code>方法试算在考虑gas费的情况下的最佳兑换方式</li><li>使用前面的方法返回的值（兑换多少，和兑换渠道）作为参数调用<code>swap</code>方法进行兑换</li></ol><h4 id="试算兑换金额和路径的getExpectedReturn">试算兑换金额和路径的<code>getExpectedReturn</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; @notice Calculate expected returning amount of &#96;destToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param fromToken (IERC20) Address of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param destToken (IERC20) Address of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param amount (uint256) Amount for &#96;fromToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param parts (uint256) Number of pieces source volume could be splitted,</span><br><span class="line">&#x2F;&#x2F;&#x2F; works like granularity, higly affects gas usage. Should be called offchain,</span><br><span class="line">&#x2F;&#x2F;&#x2F; but could be called onchain if user swaps not his own funds, but this is still considered as not safe.</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param flags (uint256) Flags for enabling and disabling some features, default 0</span><br><span class="line">function getExpectedReturn(</span><br><span class="line">    IERC20 fromToken, &#x2F;&#x2F; 从A币</span><br><span class="line">    IERC20 destToken, &#x2F;&#x2F; 兑换成B币</span><br><span class="line">    uint256 amount,   &#x2F;&#x2F; 出多少A币</span><br><span class="line">    uint256 parts,&#x2F;&#x2F; 允许拆分成多少份</span><br><span class="line">    uint256 flags &#x2F;&#x2F; See contants in IOneSplit.sol &#x2F;&#x2F; gas费</span><br><span class="line">)</span><br><span class="line">    public</span><br><span class="line">    view</span><br><span class="line">    returns(</span><br><span class="line">        uint256 returnAmount, &#x2F;&#x2F; 可以兑换多少B币</span><br><span class="line">        uint256[] memory distribution &#x2F;&#x2F; 拆分权重数组，描述的是在哪个交易所兑换多少</span><br><span class="line">    )</span><br><span class="line">&#123;</span><br><span class="line">    (returnAmount, , distribution) &#x3D; getExpectedReturnWithGas(</span><br><span class="line">        fromToken,</span><br><span class="line">        destToken,</span><br><span class="line">        amount,</span><br><span class="line">        parts,</span><br><span class="line">        flags,</span><br><span class="line">        0</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="交换方法swap">交换方法<code>swap</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; @notice Swap &#96;amount&#96; of first element of &#96;tokens&#96; to the latest element of &#96;destToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param tokens (IERC20[]) Addresses of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param amount (uint256) Amount for &#96;fromToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param minReturn (uint256) Minimum expected return, else revert</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param distribution (uint256[]) Array of weights for volume distribution returned by &#96;getExpectedReturn&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param flags (uint256[]) Flags for enabling and disabling some features, default 0</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param referral (address) Address of referral</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)</span><br><span class="line">function swapWithReferralMulti(</span><br><span class="line">    IERC20[] memory tokens,</span><br><span class="line">    uint256 amount,</span><br><span class="line">    uint256 minReturn,</span><br><span class="line">    uint256[] memory distribution,</span><br><span class="line">    uint256[] memory flags,</span><br><span class="line">    address referral,</span><br><span class="line">    uint256 feePercent</span><br><span class="line">) public payable returns(uint256 returnAmount) &#123;</span><br><span class="line">    require(tokens.length &gt;&#x3D; 2 &amp;&amp; amount &gt; 0, &quot;OneSplit: swap makes no sense&quot;);</span><br><span class="line">    require(flags.length &#x3D;&#x3D; tokens.length - 1, &quot;OneSplit: flags array length is invalid&quot;);</span><br><span class="line">    require((msg.value !&#x3D; 0) &#x3D;&#x3D; tokens.first().isETH(), &quot;OneSplit: msg.value should be used only for ETH swap&quot;);</span><br><span class="line">    require(feePercent &lt;&#x3D; 0.03e18, &quot;OneSplit: feePercent out of range&quot;);</span><br><span class="line"></span><br><span class="line">    uint256 gasStart &#x3D; gasleft();</span><br><span class="line"></span><br><span class="line">    Balances memory beforeBalances &#x3D; _getFirstAndLastBalances(tokens, true);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Transfer From</span><br><span class="line">    if (amount &#x3D;&#x3D; uint256(-1)) &#123;</span><br><span class="line">        amount &#x3D; Math.min(</span><br><span class="line">            tokens.first().balanceOf(msg.sender),</span><br><span class="line">            tokens.first().allowance(msg.sender, address(this))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    tokens.first().universalTransferFromSenderToThis(amount);</span><br><span class="line">    uint256 confirmed &#x3D; tokens.first().universalBalanceOf(address(this)).sub(beforeBalances.ofFromToken);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Swap</span><br><span class="line">    tokens.first().universalApprove(address(oneSplitImpl), confirmed);</span><br><span class="line">    oneSplitImpl.swapMulti.value(tokens.first().isETH() ? confirmed : 0)(</span><br><span class="line">        tokens,</span><br><span class="line">        confirmed,</span><br><span class="line">        minReturn,</span><br><span class="line">        distribution,</span><br><span class="line">        flags</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Balances memory afterBalances &#x3D; _getFirstAndLastBalances(tokens, false);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return</span><br><span class="line">    returnAmount &#x3D; afterBalances.ofDestToken.sub(beforeBalances.ofDestToken);</span><br><span class="line">    require(returnAmount &gt;&#x3D; minReturn, &quot;OneSplit: actual return amount is less than minReturn&quot;);</span><br><span class="line">    tokens.last().universalTransfer(referral, returnAmount.mul(feePercent).div(1e18));</span><br><span class="line">    tokens.last().universalTransfer(msg.sender, returnAmount.sub(returnAmount.mul(feePercent).div(1e18)));</span><br><span class="line"></span><br><span class="line">    emit Swapped(</span><br><span class="line">        tokens.first(),</span><br><span class="line">        tokens.last(),</span><br><span class="line">        amount,</span><br><span class="line">        returnAmount,</span><br><span class="line">        minReturn,</span><br><span class="line">        distribution,</span><br><span class="line">        flags,</span><br><span class="line">        referral,</span><br><span class="line">        feePercent</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return remainder</span><br><span class="line">    if (afterBalances.ofFromToken &gt; beforeBalances.ofFromToken) &#123;</span><br><span class="line">        tokens.first().universalTransfer(msg.sender, afterBalances.ofFromToken.sub(beforeBalances.ofFromToken));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((flags[0] &amp; (FLAG_ENABLE_CHI_BURN | FLAG_ENABLE_CHI_BURN_BY_ORIGIN)) &gt; 0) &#123;</span><br><span class="line">        uint256 gasSpent &#x3D; 21000 + gasStart - gasleft() + 16 * msg.data.length;</span><br><span class="line">        _chiBurnOrSell(</span><br><span class="line">            ((flags[0] &amp; FLAG_ENABLE_CHI_BURN_BY_ORIGIN) &gt; 0) ? tx.origin : msg.sender,</span><br><span class="line">            (gasSpent + 14154) &#x2F; 41947</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    else if ((flags[0] &amp; FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP) &gt; 0) &#123;</span><br><span class="line">        uint256 gasSpent &#x3D; 21000 + gasStart - gasleft() + 16 * msg.data.length;</span><br><span class="line">        IReferralGasSponsor(referral).makeGasDiscount(gasSpent, returnAmount, msg.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1INCH的主要优缺点&quot;&gt;1INCH的主要优缺点&lt;/h2&gt;
&lt;h3 id=&quot;优点&quot;&gt;优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;支持主流的DEX，计算的兑换路径比较&lt;/li&gt;
&lt;li&gt;支持用户自定义允许的最大划点、交易速度（gas费价格）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="1INCH" scheme="https://guozhe001.github.io/tags/1INCH/"/>
    
  </entry>
  
  <entry>
    <title>etherscan提供的API调用</title>
    <link href="https://guozhe001.github.io/2021/04/13/blockchain/eth/etherscan%E6%8F%90%E4%BE%9B%E7%9A%84API%E8%B0%83%E7%94%A8/"/>
    <id>https://guozhe001.github.io/2021/04/13/blockchain/eth/etherscan%E6%8F%90%E4%BE%9B%E7%9A%84API%E8%B0%83%E7%94%A8/</id>
    <published>2021-04-13T06:55:30.814Z</published>
    <updated>2021-04-15T11:39:13.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建etherscan-API-KEY">创建etherscan API-KEY</h2><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20210413145420807.png" alt="image-20210413145420807"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建etherscan-API-KEY&quot;&gt;创建etherscan API-KEY&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/guozhe001/images/raw/master/image-20210413145420807.png</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="etherscan" scheme="https://guozhe001.github.io/tags/etherscan/"/>
    
  </entry>
  
  <entry>
    <title>Geth源码学习之MPT</title>
    <link href="https://guozhe001.github.io/2021/04/12/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BMPT/"/>
    <id>https://guozhe001.github.io/2021/04/12/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BMPT/</id>
    <published>2021-04-12T04:00:34.160Z</published>
    <updated>2021-04-12T09:36:20.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构mpt学习-go-ethereum-trie-trie-go：">数据结构mpt学习<code>/go-ethereum/trie/trie.go</code>：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package trie implements Merkle Patricia Tries.</span></span><br><span class="line"><span class="keyword">package</span> trie</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// emptyRoot is the known root hash of an empty trie.</span></span><br><span class="line">emptyRoot = common.HexToHash(<span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// emptyState is the known hash of an empty state trie entry.</span></span><br><span class="line">emptyState = crypto.Keccak256Hash(<span class="literal">nil</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LeafCallback is a callback type invoked when a trie operation reaches a leaf</span></span><br><span class="line"><span class="comment">// node. It&#x27;s used by state sync and commit to allow handling external references</span></span><br><span class="line"><span class="comment">// between account and storage tries.</span></span><br><span class="line"><span class="keyword">type</span> LeafCallback <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="keyword">byte</span>, leaf []<span class="keyword">byte</span>, parent common.Hash)</span> <span class="title">error</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Trie is a Merkle Patricia Trie.</span></span><br><span class="line"><span class="comment">// The zero value is an empty trie with no database.</span></span><br><span class="line"><span class="comment">// Use New to create a trie that sits on top of a database.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Trie is not safe for concurrent use.</span></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">db   *Database</span><br><span class="line">root node</span><br><span class="line"><span class="comment">// Keep track of the number leafs which have been inserted since the last</span></span><br><span class="line"><span class="comment">// hashing operation. This number will not directly map to the number of</span></span><br><span class="line"><span class="comment">// actually unhashed nodes</span></span><br><span class="line">unhashed <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newFlag returns the cache flag value for a newly created node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">newFlag</span><span class="params">()</span> <span class="title">nodeFlag</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> nodeFlag&#123;dirty: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New creates a trie with an existing root node from db.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If root is the zero hash or the sha3 hash of an empty string, the</span></span><br><span class="line"><span class="comment">// trie is initially empty and does not require a database. Otherwise,</span></span><br><span class="line"><span class="comment">// New will panic if db is nil and returns a MissingNodeError if root does</span></span><br><span class="line"><span class="comment">// not exist in the database. Accessing the trie loads nodes from db on demand.</span></span><br><span class="line"><span class="comment">// 无论root是zero hash还是一个空字符串，都需要传入Database，否则会panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(root common.Hash, db *Database)</span> <span class="params">(*Trie, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;trie.New called without a database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">trie := &amp;Trie&#123;</span><br><span class="line">db: db,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果root不为zero hash并且也不是一个空字符串，则从数据库中获取节点数据</span></span><br><span class="line"><span class="keyword">if</span> root != (common.Hash&#123;&#125;) &amp;&amp; root != emptyRoot &#123;</span><br><span class="line">rootnode, err := trie.resolveHash(root[:], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">trie.root = rootnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trie, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeIterator returns an iterator that returns nodes of the trie. Iteration starts at</span></span><br><span class="line"><span class="comment">// the key after the given start key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">NodeIterator</span><span class="params">(start []<span class="keyword">byte</span>)</span> <span class="title">NodeIterator</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> newNodeIterator(t, start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get returns the value for key stored in the trie.</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Get</span><span class="params">(key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">res, err := t.TryGet(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryGet returns the value for key stored in the trie.</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller.</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryGet</span><span class="params">(key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value, newroot, didResolve, err := t.tryGet(t.root, keybytesToHex(key), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">t.root = newroot</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">tryGet</span><span class="params">(origNode node, key []<span class="keyword">byte</span>, pos <span class="keyword">int</span>)</span> <span class="params">(value []<span class="keyword">byte</span>, newnode node, didResolve <span class="keyword">bool</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> n := (origNode).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="keyword">return</span> n, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// 如果key的长度小于n.key的长度，则说明这个key不是当前node的子节点也不是当前node本身</span></span><br><span class="line"><span class="comment">// 如果key的len(n.key)的前缀与n.key不一样，也说明这个key不在当前node的子节点中</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key)-pos &lt; <span class="built_in">len</span>(n.Key) || !bytes.Equal(n.Key, key[pos:pos+<span class="built_in">len</span>(n.Key)]) &#123;</span><br><span class="line"><span class="comment">// key not found in trie</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 到这里时，key的len(n.key)长度的前缀与n.key相同，说明key在node的子节点，（而不是当前节点本身）</span></span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Val, key, pos+<span class="built_in">len</span>(n.Key))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Val = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Children[key[pos]], key, pos+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Children[key[pos]] = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line">child, err := t.resolveHash(n, key[:pos])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">true</span>, err</span><br><span class="line">&#125;</span><br><span class="line">value, newnode, _, err := t.tryGet(child, key, pos)</span><br><span class="line"><span class="keyword">return</span> value, newnode, <span class="literal">true</span>, err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, origNode, origNode))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryGetNode attempts to retrieve a trie node by compact-encoded path. It is not</span></span><br><span class="line"><span class="comment">// possible to use keybyte-encoding as the path might contain odd nibbles.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryGetNode</span><span class="params">(path []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, <span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">item, newroot, resolved, err := t.tryGetNode(t.root, compactToHex(path), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resolved, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">t.root = newroot</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> item == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resolved, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, resolved, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">tryGetNode</span><span class="params">(origNode node, path []<span class="keyword">byte</span>, pos <span class="keyword">int</span>)</span> <span class="params">(item []<span class="keyword">byte</span>, newnode node, resolved <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// If we reached the requested path, return the current node</span></span><br><span class="line"><span class="keyword">if</span> pos &gt;= <span class="built_in">len</span>(path) &#123;</span><br><span class="line"><span class="comment">// Although we most probably have the original node expanded, encoding</span></span><br><span class="line"><span class="comment">// that into consensus form can be nasty (needs to cascade down) and</span></span><br><span class="line"><span class="comment">// time consuming. Instead, just pull the hash up from disk directly.</span></span><br><span class="line"><span class="keyword">var</span> hash hashNode</span><br><span class="line"><span class="keyword">if</span> node, ok := origNode.(hashNode); ok &#123;</span><br><span class="line">hash = node</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hash, _ = origNode.cache()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> hash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, origNode, <span class="number">0</span>, errors.New(<span class="string">&quot;non-consensus node&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">blob, err := t.db.Node(common.BytesToHash(hash))</span><br><span class="line"><span class="keyword">return</span> blob, origNode, <span class="number">1</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Path still needs to be traversed, descend into children</span></span><br><span class="line"><span class="keyword">switch</span> n := (origNode).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="comment">// Non-existent path requested, abort</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="comment">// Path prematurely ended, abort</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path)-pos &lt; <span class="built_in">len</span>(n.Key) || !bytes.Equal(n.Key, path[pos:pos+<span class="built_in">len</span>(n.Key)]) &#123;</span><br><span class="line"><span class="comment">// Path branches off from short node</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">item, newnode, resolved, err = t.tryGetNode(n.Val, path, pos+<span class="built_in">len</span>(n.Key))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Val = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, n, resolved, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">item, newnode, resolved, err = t.tryGetNode(n.Children[path[pos]], path, pos+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Children[path[pos]] = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, n, resolved, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line">child, err := t.resolveHash(n, path[:pos])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="number">1</span>, err</span><br><span class="line">&#125;</span><br><span class="line">item, newnode, resolved, err := t.tryGetNode(child, path, pos)</span><br><span class="line"><span class="keyword">return</span> item, newnode, resolved + <span class="number">1</span>, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, origNode, origNode))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update associates key with value in the trie. Subsequent calls to</span></span><br><span class="line"><span class="comment">// Get will return value. If value has length zero, any existing value</span></span><br><span class="line"><span class="comment">// is deleted from the trie and calls to Get will return nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller while they are</span></span><br><span class="line"><span class="comment">// stored in the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Update</span><span class="params">(key, value []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := t.TryUpdate(key, value); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryUpdate associates key with value in the trie. Subsequent calls to</span></span><br><span class="line"><span class="comment">// Get will return value. If value has length zero, any existing value</span></span><br><span class="line"><span class="comment">// is deleted from the trie and calls to Get will return nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller while they are</span></span><br><span class="line"><span class="comment">// stored in the trie.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="comment">// 这个方法是更新t，如果value不为0则意味着插入一个新的节点或者更新原来的节点的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryUpdate</span><span class="params">(key, value []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">t.unhashed++</span><br><span class="line">k := keybytesToHex(key)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(value) != <span class="number">0</span> &#123;</span><br><span class="line">_, n, err := t.insert(t.root, <span class="literal">nil</span>, k, valueNode(value))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">_, n, err := t.<span class="built_in">delete</span>(t.root, <span class="literal">nil</span>, k)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 向节点n中插入（或更新）key等于key，value等于value的数据</span></span><br><span class="line"><span class="comment">// 返回值bool表示是否更新</span></span><br><span class="line"><span class="comment">// node是更新后的新的node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">insert</span><span class="params">(n node, prefix, key []<span class="keyword">byte</span>, value node)</span> <span class="params">(<span class="keyword">bool</span>, node, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果key的长度为0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 判断n是不是valueNode类型，如果是</span></span><br><span class="line"><span class="keyword">if</span> v, ok := n.(valueNode); ok &#123;</span><br><span class="line"><span class="comment">// 返回n中的value和传入的value是否相同</span></span><br><span class="line"><span class="keyword">return</span> !bytes.Equal(v, value.(valueNode)), value, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果key的长度为0并且n不是valueNode类型，直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, value, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> n := n.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// 计算key和n.key的公共前缀长度</span></span><br><span class="line">matchlen := prefixLen(key, n.Key)</span><br><span class="line"><span class="comment">// If the whole key matches, keep this short node as is</span></span><br><span class="line"><span class="comment">// and only update the value.</span></span><br><span class="line"><span class="comment">// 如果前缀的长度等于整个key的长度，则表示这个是最终的节点了，直接插入值</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="built_in">len</span>(n.Key) &#123;</span><br><span class="line">dirty, nn, err := t.insert(n.Val, <span class="built_in">append</span>(prefix, key[:matchlen]...), key[matchlen:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, nn, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise branch out at the index where they differ.</span></span><br><span class="line"><span class="comment">// 如果key和n.key的前缀长度不等于n.key的长度，说明需要在现在的基础上扩展一个branchNode，（即fullNode）</span></span><br><span class="line">branch := &amp;fullNode&#123;flags: t.newFlag()&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// node节点的值放在branchNode中</span></span><br><span class="line">_, branch.Children[n.Key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, n.Key[:matchlen+<span class="number">1</span>]...), n.Key[matchlen+<span class="number">1</span>:], n.Val)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新的key和value也放在branchNode中</span></span><br><span class="line">_, branch.Children[key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, key[:matchlen+<span class="number">1</span>]...), key[matchlen+<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Replace this shortNode with the branch if it occurs at index 0.</span></span><br><span class="line"><span class="comment">// 如果key和n.key没有公共前缀，则使用branchNode替代当前的extensionNode（即shortNode）</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, branch, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, replace it with a short node leading up to the branch.</span></span><br><span class="line"><span class="comment">// 其他情况则使用新的branchNode替换shortNode的value</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key[:matchlen], branch, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line"><span class="comment">// 如果是fullNode，则根据key的第一个字符获得应该插入的节点，然后插入到这个节点</span></span><br><span class="line">dirty, nn, err := t.insert(n.Children[key[<span class="number">0</span>]], <span class="built_in">append</span>(prefix, key[<span class="number">0</span>]), key[<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.flags = t.newFlag()</span><br><span class="line">n.Children[key[<span class="number">0</span>]] = nn</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, n, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key, value, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line"><span class="comment">// We&#x27;ve hit a part of the trie that isn&#x27;t loaded yet. Load</span></span><br><span class="line"><span class="comment">// the node and insert into it. This leaves all child nodes on</span></span><br><span class="line"><span class="comment">// the path to the value in the trie.</span></span><br><span class="line">rn, err := t.resolveHash(n, prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">dirty, nn, err := t.insert(rn, prefix, key, value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, rn, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, nn, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, n, n))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete removes any existing value for key from the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Delete</span><span class="params">(key []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := t.TryDelete(key); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryDelete removes any existing value for key from the trie.</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryDelete</span><span class="params">(key []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">t.unhashed++</span><br><span class="line">k := keybytesToHex(key)</span><br><span class="line">_, n, err := t.<span class="built_in">delete</span>(t.root, <span class="literal">nil</span>, k)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete returns the new root of the trie with key deleted.</span></span><br><span class="line"><span class="comment">// It reduces the trie to minimal form by simplifying</span></span><br><span class="line"><span class="comment">// nodes on the way up after deleting recursively.</span></span><br><span class="line"><span class="comment">// 返回值bool代表是否删除</span></span><br><span class="line"><span class="comment">// 返回值node代表删除后的node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">delete</span><span class="params">(n node, prefix, key []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">bool</span>, node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> n := n.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line">matchlen := prefixLen(key, n.Key)</span><br><span class="line"><span class="comment">// 如果key和n.key的公共前缀长度小于n.key的长度，说明key这个节点不再当前的n节点，因此直接返回不删除</span></span><br><span class="line"><span class="keyword">if</span> matchlen &lt; <span class="built_in">len</span>(n.Key) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, <span class="literal">nil</span> <span class="comment">// don&#x27;t replace n on mismatch</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果key和n.key的公共前缀长度等于key的长度，说明当前的n就是需要删除的目标，直接删除</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="built_in">len</span>(key) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span>, <span class="literal">nil</span> <span class="comment">// remove n entirely for whole matches</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The key is longer than n.Key. Remove the remaining suffix</span></span><br><span class="line"><span class="comment">// from the subtrie. Child can never be nil here since the</span></span><br><span class="line"><span class="comment">// subtrie must contain at least two other values with keys</span></span><br><span class="line"><span class="comment">// longer than n.Key.</span></span><br><span class="line"><span class="comment">// 到这里说明如果的长度大于n.key的长度，如果key存在与当前节点下那么当前节点的value肯定是一个branchNode，如果是一个branchNode则里面的值肯定不止一个，不然没有必要是branchNode。</span></span><br><span class="line">dirty, child, err := t.<span class="built_in">delete</span>(n.Val, <span class="built_in">append</span>(prefix, key[:<span class="built_in">len</span>(n.Key)]...), key[<span class="built_in">len</span>(n.Key):])</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> child := child.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// Deleting from the subtrie reduced it to another</span></span><br><span class="line"><span class="comment">// short node. Merge the nodes to avoid creating a</span></span><br><span class="line"><span class="comment">// shortNode&#123;..., shortNode&#123;...&#125;&#125;. Use concat (which</span></span><br><span class="line"><span class="comment">// always creates a new slice) instead of append to</span></span><br><span class="line"><span class="comment">// avoid modifying n.Key since it might be shared with</span></span><br><span class="line"><span class="comment">// other nodes.</span></span><br><span class="line"><span class="comment">// 如果删除之后的返回child是shortNode类型，说明原来的branchNode一共有两个值，删除之后现在只剩下一个值，就不需要再有child了，直接把当前的节点的值改为child的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;concat(n.Key, child.Key...), child.Val, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, child, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">dirty, nn, err := t.<span class="built_in">delete</span>(n.Children[key[<span class="number">0</span>]], <span class="built_in">append</span>(prefix, key[<span class="number">0</span>]), key[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.flags = t.newFlag()</span><br><span class="line">n.Children[key[<span class="number">0</span>]] = nn</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check how many non-nil entries are left after deleting and</span></span><br><span class="line"><span class="comment">// reduce the full node to a short node if only one entry is</span></span><br><span class="line"><span class="comment">// left. Since n must&#x27;ve contained at least two children</span></span><br><span class="line"><span class="comment">// before deletion (otherwise it would not be a full node) n</span></span><br><span class="line"><span class="comment">// can never be reduced to nil.</span></span><br><span class="line"><span class="comment">// 检查删除后的branchNode有多少个非nil的为止，如果只有一个则把它缩短为shortNode。</span></span><br><span class="line"><span class="comment">// 在删除元素之前，节点n肯定至少包含两个子节点，因为如果不包含两个子节点他就不是一个fullNode，因此n不会减少为nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// When the loop is done, pos contains the index of the single</span></span><br><span class="line"><span class="comment">// value that is left in n or -2 if n contains at least two</span></span><br><span class="line"><span class="comment">// values.</span></span><br><span class="line">pos := <span class="number">-1</span></span><br><span class="line"><span class="comment">// 遍历n的所有子节点</span></span><br><span class="line"><span class="keyword">for</span> i, cld := <span class="keyword">range</span> &amp;n.Children &#123;</span><br><span class="line"><span class="comment">// 如果子节点不为nil</span></span><br><span class="line"><span class="keyword">if</span> cld != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 第一次到这里时，pos肯定等于-1，所以&quot;pos == -1&quot;是true</span></span><br><span class="line"><span class="keyword">if</span> pos == <span class="number">-1</span> &#123;</span><br><span class="line">pos = i</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 有第二个子节点不为nil，并且pos已经不是-1时才会进入到这里，因此说明删除后的n还有至少两个子节点不为nil</span></span><br><span class="line">pos = <span class="number">-2</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果pos&gt;=0说明删除后的n只剩下一个子节点有值</span></span><br><span class="line"><span class="keyword">if</span> pos &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// pos != 16说明删除后的branchNode的最后一个child为nil</span></span><br><span class="line"><span class="keyword">if</span> pos != <span class="number">16</span> &#123;</span><br><span class="line"><span class="comment">// If the remaining entry is a short node, it replaces</span></span><br><span class="line"><span class="comment">// n and its key gets the missing nibble tacked to the</span></span><br><span class="line"><span class="comment">// front. This avoids creating an invalid</span></span><br><span class="line"><span class="comment">// shortNode&#123;..., shortNode&#123;...&#125;&#125;.  Since the entry</span></span><br><span class="line"><span class="comment">// might not be loaded yet, resolve it just for this</span></span><br><span class="line"><span class="comment">// check.</span></span><br><span class="line">cnode, err := t.resolve(n.Children[pos], prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cnode, ok := cnode.(*shortNode); ok &#123;</span><br><span class="line">k := <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(pos)&#125;, cnode.Key...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;k, cnode.Val, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, n is replaced by a one-nibble short node</span></span><br><span class="line"><span class="comment">// containing the child.</span></span><br><span class="line"><span class="comment">// 到这里说明pos等于16，说明前面的16个child都是nil，把当前节点缩短为shortNode</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;[]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(pos)&#125;, n.Children[pos], t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n still contains at least two values and cannot be reduced.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, n, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line"><span class="comment">// We&#x27;ve hit a part of the trie that isn&#x27;t loaded yet. Load</span></span><br><span class="line"><span class="comment">// the node and delete from it. This leaves all child nodes on</span></span><br><span class="line"><span class="comment">// the path to the value in the trie.</span></span><br><span class="line">rn, err := t.resolveHash(n, prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">dirty, nn, err := t.<span class="built_in">delete</span>(rn, prefix, key)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, rn, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, nn, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v (%v)&quot;</span>, n, n, key))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">concat</span><span class="params">(s1 []<span class="keyword">byte</span>, s2 ...<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">r := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s1)+<span class="built_in">len</span>(s2))</span><br><span class="line"><span class="built_in">copy</span>(r, s1)</span><br><span class="line"><span class="built_in">copy</span>(r[<span class="built_in">len</span>(s1):], s2)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">resolve</span><span class="params">(n node, prefix []<span class="keyword">byte</span>)</span> <span class="params">(node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n, ok := n.(hashNode); ok &#123;</span><br><span class="line"><span class="keyword">return</span> t.resolveHash(n, prefix)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolveHash 根据hashNode从数据库中获取node数据，如果获取不到则返回MissingNodeError错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">resolveHash</span><span class="params">(n hashNode, prefix []<span class="keyword">byte</span>)</span> <span class="params">(node, error)</span></span> &#123;</span><br><span class="line">hash := common.BytesToHash(n)</span><br><span class="line"><span class="keyword">if</span> node := t.db.node(hash); node != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;MissingNodeError&#123;NodeHash: hash, Path: prefix&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the root hash of the trie. It does not write to the</span></span><br><span class="line"><span class="comment">// database and can be used even if the trie doesn&#x27;t have one.</span></span><br><span class="line"><span class="comment">// 返回trie的root的hash，这个hash不进行持久化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line">hash, cached, _ := t.hashRoot()</span><br><span class="line">t.root = cached</span><br><span class="line"><span class="keyword">return</span> common.BytesToHash(hash.(hashNode))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commit writes all nodes to the trie&#x27;s memory database, tracking the internal</span></span><br><span class="line"><span class="comment">// and external (for account tries) references.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Commit</span><span class="params">(onleaf LeafCallback)</span> <span class="params">(root common.Hash, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;commit called on trie with nil database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t.root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> emptyRoot, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Derive the hash for all dirty nodes first. We hold the assumption</span></span><br><span class="line"><span class="comment">// in the following procedure that all nodes are hashed.</span></span><br><span class="line">rootHash := t.Hash()</span><br><span class="line">h := newCommitter()</span><br><span class="line"><span class="keyword">defer</span> returnCommitterToPool(h)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do a quick check if we really need to commit, before we spin</span></span><br><span class="line"><span class="comment">// up goroutines. This can happen e.g. if we load a trie for reading storage</span></span><br><span class="line"><span class="comment">// values, but don&#x27;t write to it.</span></span><br><span class="line"><span class="keyword">if</span> _, dirty := t.root.cache(); !dirty &#123;</span><br><span class="line"><span class="keyword">return</span> rootHash, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">if</span> onleaf != <span class="literal">nil</span> &#123;</span><br><span class="line">h.onleaf = onleaf</span><br><span class="line">h.leafCh = <span class="built_in">make</span>(<span class="keyword">chan</span> *leaf, leafChanSize)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">h.commitLoop(t.db)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newRoot hashNode</span><br><span class="line">newRoot, err = h.Commit(t.root, t.db)</span><br><span class="line"><span class="keyword">if</span> onleaf != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// The leafch is created in newCommitter if there was an onleaf callback</span></span><br><span class="line"><span class="comment">// provided. The commitLoop only _reads_ from it, and the commit</span></span><br><span class="line"><span class="comment">// operation was the sole writer. Therefore, it&#x27;s safe to close this</span></span><br><span class="line"><span class="comment">// channel here.</span></span><br><span class="line"><span class="built_in">close</span>(h.leafCh)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> common.Hash&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">t.root = newRoot</span><br><span class="line"><span class="keyword">return</span> rootHash, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hashRoot calculates the root hash of the given trie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">hashRoot</span><span class="params">()</span> <span class="params">(node, node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hashNode(emptyRoot.Bytes()), <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the number of changes is below 100, we let one thread handle it</span></span><br><span class="line">h := newHasher(t.unhashed &gt;= <span class="number">100</span>)</span><br><span class="line"><span class="keyword">defer</span> returnHasherToPool(h)</span><br><span class="line">hashed, cached := h.hash(t.root, <span class="literal">true</span>)</span><br><span class="line">t.unhashed = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> hashed, cached, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset drops the referenced root node and cleans all internal state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">t.root = <span class="literal">nil</span></span><br><span class="line">t.unhashed = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据结构mpt学习-go-ethereum-trie-trie-go：&quot;&gt;数据结构mpt学习&lt;code&gt;/go-ethereum/trie/trie.go&lt;/code&gt;：&lt;/h3&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="swarm" scheme="https://guozhe001.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>Geth源码学习之共识与奖励</title>
    <link href="https://guozhe001.github.io/2021/04/09/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B1%E8%AF%86%E4%B8%8E%E5%A5%96%E5%8A%B1/"/>
    <id>https://guozhe001.github.io/2021/04/09/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B1%E8%AF%86%E4%B8%8E%E5%A5%96%E5%8A%B1/</id>
    <published>2021-04-09T07:28:00.829Z</published>
    <updated>2021-04-12T09:23:26.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算挖矿奖励">计算挖矿奖励</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AccumulateRewards credits the coinbase of the given block with the mining</span></span><br><span class="line"><span class="comment">// reward. The total reward consists of the static block reward and rewards for</span></span><br><span class="line"><span class="comment">// included uncles. The coinbase of each uncle block is also rewarded.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accumulateRewards</span><span class="params">(config *params.ChainConfig, state *state.StateDB, header *types.Header, uncles []*types.Header)</span></span> &#123;</span><br><span class="line"><span class="comment">// Select the correct block reward based on chain progression</span></span><br><span class="line"><span class="comment">// 根据不同的阶段，获取静态的区块奖励</span></span><br><span class="line">blockReward := FrontierBlockReward</span><br><span class="line"><span class="keyword">if</span> config.IsByzantium(header.Number) &#123;</span><br><span class="line">blockReward = ByzantiumBlockReward</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> config.IsConstantinople(header.Number) &#123;</span><br><span class="line">blockReward = ConstantinopleBlockReward</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Accumulate the rewards for the miner and any included uncles</span></span><br><span class="line">reward := <span class="built_in">new</span>(big.Int).Set(blockReward)</span><br><span class="line">r := <span class="built_in">new</span>(big.Int)</span><br><span class="line"><span class="keyword">for</span> _, uncle := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">r.Add(uncle.Number, big8) <span class="comment">// r = uncle.Number + 8</span></span><br><span class="line">r.Sub(r, header.Number) <span class="comment">// r = r - header.Number</span></span><br><span class="line">r.Mul(r, blockReward)  <span class="comment">// r = r * blockReward</span></span><br><span class="line">r.Div(r, big8) <span class="comment">// r = r / 8</span></span><br><span class="line">state.AddBalance(uncle.Coinbase, r) <span class="comment">// 挖出叔父区块的miner获得静态的（2个）奖励</span></span><br><span class="line"><span class="comment">//叔父区块number当前区块numberr.Add(uncle.Number, big8)r.Sub(r, header.Number)r.Mul(r, blockReward)r.Div(r, big8)挖出叔父区块的奖励blockReward</span></span><br><span class="line"><span class="comment">//1297141.75八分之七2</span></span><br><span class="line"><span class="comment">//1396121.5八分之六2</span></span><br><span class="line"><span class="comment">//1495101.25八分之五2</span></span><br><span class="line"><span class="comment">//159481八分之四2</span></span><br><span class="line"><span class="comment">//169360.75八分之三2</span></span><br><span class="line"><span class="comment">//179240.5八分之二2</span></span><br><span class="line"><span class="comment">//189120.25八分之一2</span></span><br><span class="line"><span class="comment">//199000八分之零2</span></span><br><span class="line"><span class="comment">//1109-1-2-0.25八分之零2</span></span><br><span class="line"><span class="comment">// 叔块距离当前区块越远，能够得到的奖励越少，最多不超过8个区块</span></span><br><span class="line"><span class="comment">// 不会出现负数的原因应该是在添加叔父区块时有判断，只有距离在8个区块之内的区块才能算是叔父区块，其他的不让添加</span></span><br><span class="line">r.Div(blockReward, big32) <span class="comment">// 当前挖到区块的miner每添加一个叔块获得1/32的静态（2个）的奖励</span></span><br><span class="line">reward.Add(reward, r)</span><br><span class="line">&#125;</span><br><span class="line">state.AddBalance(header.Coinbase, reward)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析源码中叔父区块的挖矿者获得的奖励">解析源码中叔父区块的挖矿者获得的奖励</h4><p>blockReward=2,不会出现负数的原因应该是在添加叔父区块时有判断，只有距离在8个区块之内的区块才能算是叔父区块，其他的不让添加</p><table><thead><tr><th>叔父区块number</th><th>当前区块number</th><th>r.Add(uncle.Number, big8)</th><th>r.Sub(r, header.Number)</th><th>r.Mul(r, blockReward)</th><th>r.Div(r, big8)</th><th>挖出叔父区块的奖励</th><th>blockReward</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>9</td><td>7</td><td>14</td><td>1.75</td><td>八分之七</td><td>2</td></tr><tr><td>1</td><td>3</td><td>9</td><td>6</td><td>12</td><td>1.5</td><td>八分之六</td><td>2</td></tr><tr><td>1</td><td>4</td><td>9</td><td>5</td><td>10</td><td>1.25</td><td>八分之五</td><td>2</td></tr><tr><td>1</td><td>5</td><td>9</td><td>4</td><td>8</td><td>1</td><td>八分之四</td><td>2</td></tr><tr><td>1</td><td>6</td><td>9</td><td>3</td><td>6</td><td>0.75</td><td>八分之三</td><td>2</td></tr><tr><td>1</td><td>7</td><td>9</td><td>2</td><td>4</td><td>0.5</td><td>八分之二</td><td>2</td></tr><tr><td>1</td><td>8</td><td>9</td><td>1</td><td>2</td><td>0.25</td><td>八分之一</td><td>2</td></tr><tr><td>1</td><td>9</td><td>9</td><td>0</td><td>0</td><td>0</td><td>八分之零</td><td>2</td></tr><tr><td>1</td><td>10</td><td>9</td><td>-1</td><td>-2</td><td>-0.25</td><td>八分之零</td><td>2</td></tr></tbody></table><h4 id="块头验证">块头验证</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// VerifyHeader checks whether a header conforms to the consensus rules of the</span></span><br><span class="line"><span class="comment">// stock Ethereum ethash engine.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span> <span class="title">VerifyHeader</span><span class="params">(chain consensus.ChainHeaderReader, header *types.Header, seal <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// If we&#x27;re running a full engine faking, accept any input as valid</span></span><br><span class="line"><span class="keyword">if</span> ethash.config.PowMode == ModeFullFake &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Short circuit if the header is known, or its parent not</span></span><br><span class="line">number := header.Number.Uint64()</span><br><span class="line"><span class="comment">// 根据区块号和区块头的hash获取区块信息，只有区块高度为number的区块头的hash等于指定hash才返回数据，否则返回nil</span></span><br><span class="line"><span class="keyword">if</span> chain.GetHeader(header.Hash(), number) != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取父区块，父区块不能为nil</span></span><br><span class="line">parent := chain.GetHeader(header.ParentHash, number<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrUnknownAncestor</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sanity checks passed, do a proper verification</span></span><br><span class="line"><span class="keyword">return</span> ethash.verifyHeader(chain, header, parent, <span class="literal">false</span>, seal, time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// verifyHeader checks whether a header conforms to the consensus rules of the</span></span><br><span class="line"><span class="comment">// stock Ethereum ethash engine.</span></span><br><span class="line"><span class="comment">// See YP section 4.3.4. &quot;Block Header Validity&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span> <span class="title">verifyHeader</span><span class="params">(chain consensus.ChainHeaderReader, header, parent *types.Header, uncle <span class="keyword">bool</span>, seal <span class="keyword">bool</span>, unixNow <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Ensure that the header&#x27;s extra-data section is of a reasonable size</span></span><br><span class="line"><span class="comment">// 块头的扩展数据的字符长度不能超过32</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint64</span>(<span class="built_in">len</span>(header.Extra)) &gt; params.MaximumExtraDataSize &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;extra-data too long: %d &gt; %d&quot;</span>, <span class="built_in">len</span>(header.Extra), params.MaximumExtraDataSize)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the header&#x27;s timestamp</span></span><br><span class="line"><span class="keyword">if</span> !uncle &#123;</span><br><span class="line"><span class="comment">// 如果块头的时间超过了当前时间+15秒，抛异常；</span></span><br><span class="line"><span class="keyword">if</span> header.Time &gt; <span class="keyword">uint64</span>(unixNow+allowedFutureBlockTimeSeconds) &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrFutureBlock</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果块头的时间小于父区块的时间，也抛异常</span></span><br><span class="line"><span class="keyword">if</span> header.Time &lt;= parent.Time &#123;</span><br><span class="line"><span class="keyword">return</span> errOlderBlockTime</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the block&#x27;s difficulty based on its timestamp and parent&#x27;s difficulty</span></span><br><span class="line"><span class="comment">// 根据父区块的难度和当前区块的时间获取期望的难度</span></span><br><span class="line">expected := ethash.CalcDifficulty(chain, header.Time, parent)</span><br><span class="line"><span class="comment">// 如果当前区块的难度和计算的难度不一致，则抛异常</span></span><br><span class="line"><span class="keyword">if</span> expected.Cmp(header.Difficulty) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid difficulty: have %v, want %v&quot;</span>, header.Difficulty, expected)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the gas limit is &lt;= 2^63-1</span></span><br><span class="line"><span class="comment">// 区块的gas总量不能超过2^63-1</span></span><br><span class="line"><span class="built_in">cap</span> := <span class="keyword">uint64</span>(<span class="number">0x7fffffffffffffff</span>)</span><br><span class="line"><span class="keyword">if</span> header.GasLimit &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gasLimit: have %v, max %v&quot;</span>, header.GasLimit, <span class="built_in">cap</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the gasUsed is &lt;= gasLimit</span></span><br><span class="line"><span class="comment">// 使用的gas不能超过gas上限</span></span><br><span class="line"><span class="keyword">if</span> header.GasUsed &gt; header.GasLimit &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gasUsed: have %d, gasLimit %d&quot;</span>, header.GasUsed, header.GasLimit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the gas limit remains within allowed bounds</span></span><br><span class="line"><span class="comment">// 当前区块的gas上限与父区块的gas上限相减取绝对值</span></span><br><span class="line">diff := <span class="keyword">int64</span>(parent.GasLimit) - <span class="keyword">int64</span>(header.GasLimit)</span><br><span class="line"><span class="keyword">if</span> diff &lt; <span class="number">0</span> &#123;</span><br><span class="line">diff *= <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">limit := parent.GasLimit / params.GasLimitBoundDivisor</span><br><span class="line"><span class="comment">// 此处的整体意思是每次gas费的上限增加不能超过上一个区块的gas上限的1024分之一；也不能少于区块的gas最小上限5000</span></span><br><span class="line"><span class="comment">// 转账最少都需要21000的gas费，gas费怎么会少于5000呢？</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint64</span>(diff) &gt;= limit || header.GasLimit &lt; params.MinGasLimit &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gas limit: have %d, want %d += %d&quot;</span>, header.GasLimit, parent.GasLimit, limit)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the block number is parent&#x27;s +1</span></span><br><span class="line"><span class="comment">// 这个校验没有用吧，因为上面的父区块的获取方式是在当前区块高度的基础上-1；所以只要能获取到父区块父区块的高度肯定比当前区块少1</span></span><br><span class="line"><span class="comment">// 因为这个方法中的父区块是传入的，而不是在当前方法查询的，所以有这个判断是没问题的，但是可以把这个放在gasLimit的前面，如果这个父区块不是当前区块的父区块就没有必要验证gasLimit了</span></span><br><span class="line"><span class="keyword">if</span> diff := <span class="built_in">new</span>(big.Int).Sub(header.Number, parent.Number); diff.Cmp(big.NewInt(<span class="number">1</span>)) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrInvalidNumber</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the engine specific seal securing the block</span></span><br><span class="line"><span class="keyword">if</span> seal &#123;</span><br><span class="line"><span class="comment">// 验证nonce是否符合难度</span></span><br><span class="line"><span class="keyword">if</span> err := ethash.verifySeal(chain, header, <span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If all checks passed, validate any special fields for hard forks</span></span><br><span class="line"><span class="keyword">if</span> err := misc.VerifyDAOHeaderExtraData(chain.Config(), header); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := misc.VerifyForkHashes(chain.Config(), header, uncle); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="难度计算">难度计算</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// calcDifficultyByzantium is the difficulty adjustment algorithm. It returns</span></span><br><span class="line"><span class="comment">// the difficulty that a new block should have when created at time given the</span></span><br><span class="line"><span class="comment">// parent block&#x27;s time and difficulty. The calculation uses the Byzantium rules.</span></span><br><span class="line"><span class="comment">// Specification EIP-649: https://eips.ethereum.org/EIPS/eip-649</span></span><br><span class="line"><span class="comment">// 数字3000000是为了计算难度炸弹，目前的区块高度是12184295；2^(12184295-3000000)/100000 = 2^91 = 2.47588e+27！！！</span></span><br><span class="line">calcDifficultyByzantium = makeDifficultyCalculator(big.NewInt(<span class="number">3000000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// makeDifficultyCalculator creates a difficultyCalculator with the given bomb-delay.</span></span><br><span class="line"><span class="comment">// the difficulty is calculated with Byzantium rules, which differs from Homestead in</span></span><br><span class="line"><span class="comment">// how uncles affect the calculation</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeDifficultyCalculator</span><span class="params">(bombDelay *big.Int)</span> <span class="title">func</span><span class="params">(time <span class="keyword">uint64</span>, parent *types.Header)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="comment">// Note, the calculations below looks at the parent number, which is 1 below</span></span><br><span class="line"><span class="comment">// the block number. Thus we remove one from the delay given</span></span><br><span class="line">bombDelayFromParent := <span class="built_in">new</span>(big.Int).Sub(bombDelay, big1)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(time <span class="keyword">uint64</span>, parent *types.Header)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="comment">// https://github.com/ethereum/EIPs/issues/100.</span></span><br><span class="line"><span class="comment">// algorithm:</span></span><br><span class="line"><span class="comment">// diff = (parent_diff +</span></span><br><span class="line"><span class="comment">//         (parent_diff / 2048 * max((2 if len(parent.uncles) else 1) - ((timestamp - parent.timestamp) // 9), -99))</span></span><br><span class="line"><span class="comment">//        ) + 2^(periodCount - 2)</span></span><br><span class="line"></span><br><span class="line">bigTime := <span class="built_in">new</span>(big.Int).SetUint64(time)</span><br><span class="line">bigParentTime := <span class="built_in">new</span>(big.Int).SetUint64(parent.Time)</span><br><span class="line"></span><br><span class="line"><span class="comment">// holds intermediate values to make the algo easier to read &amp; audit</span></span><br><span class="line">x := <span class="built_in">new</span>(big.Int)</span><br><span class="line">y := <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2 if len(parent_uncles) else 1) - (block_timestamp - parent_timestamp) // 9</span></span><br><span class="line">x.Sub(bigTime, bigParentTime)</span><br><span class="line">x.Div(x, big9)</span><br><span class="line"><span class="keyword">if</span> parent.UncleHash == types.EmptyUncleHash &#123;</span><br><span class="line">x.Sub(big1, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x.Sub(big2, x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// max((2 if len(parent_uncles) else 1) - (block_timestamp - parent_timestamp) // 9, -99)</span></span><br><span class="line"><span class="comment">// 最多减少的难度不能超过99个单元，一个单元 = parent_diff / 2048；即最多减少的难度不能大于99*parent_diff / 2048</span></span><br><span class="line"><span class="keyword">if</span> x.Cmp(bigMinus99) &lt; <span class="number">0</span> &#123;</span><br><span class="line">x.Set(bigMinus99)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// parent_diff + (parent_diff / 2048 * max((2 if len(parent.uncles) else 1) - ((timestamp - parent.timestamp) // 9), -99))</span></span><br><span class="line">y.Div(parent.Difficulty, params.DifficultyBoundDivisor)</span><br><span class="line">x.Mul(y, x)</span><br><span class="line">x.Add(parent.Difficulty, x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minimum difficulty can ever be (before exponential factor)</span></span><br><span class="line"><span class="comment">// 最小难度不能少于131072，即100000000000000000</span></span><br><span class="line"><span class="keyword">if</span> x.Cmp(params.MinimumDifficulty) &lt; <span class="number">0</span> &#123;</span><br><span class="line">x.Set(params.MinimumDifficulty)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate a fake block number for the ice-age delay</span></span><br><span class="line"><span class="comment">// Specification: https://eips.ethereum.org/EIPS/eip-1234</span></span><br><span class="line"><span class="comment">// 如果已经过了bombDelayFromParent区块高度，则计算直到父区块为止过去了多少个区块了</span></span><br><span class="line">fakeBlockNumber := <span class="built_in">new</span>(big.Int)</span><br><span class="line"><span class="keyword">if</span> parent.Number.Cmp(bombDelayFromParent) &gt;= <span class="number">0</span> &#123;</span><br><span class="line">fakeBlockNumber = fakeBlockNumber.Sub(parent.Number, bombDelayFromParent)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for the exponential factor</span></span><br><span class="line"><span class="comment">// 每隔100000（十万）个区块，periodCount增加1，即每隔十万个区块难度炸弹的难度翻一倍</span></span><br><span class="line">periodCount := fakeBlockNumber</span><br><span class="line">periodCount.Div(periodCount, expDiffPeriod)</span><br><span class="line"></span><br><span class="line"><span class="comment">// the exponential factor, commonly referred to as &quot;the bomb&quot;</span></span><br><span class="line"><span class="comment">// diff = diff + 2^(periodCount - 2)</span></span><br><span class="line"><span class="comment">// 难度再加上难度炸弹的难度</span></span><br><span class="line"><span class="keyword">if</span> periodCount.Cmp(big1) &gt; <span class="number">0</span> &#123;</span><br><span class="line">y.Sub(periodCount, big2)</span><br><span class="line">y.Exp(big2, y, <span class="literal">nil</span>)</span><br><span class="line">x.Add(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算挖矿奖励&quot;&gt;计算挖矿奖励&lt;/h3&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="swarm" scheme="https://guozhe001.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>Geth源码学习之Transaction</title>
    <link href="https://guozhe001.github.io/2021/04/09/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BTransaction/"/>
    <id>https://guozhe001.github.io/2021/04/09/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BTransaction/</id>
    <published>2021-04-09T03:48:18.162Z</published>
    <updated>2021-04-09T03:48:41.605Z</updated>
    
    <content type="html"><![CDATA[<p>学习<code>github.com/ethereum/go-ethereum/core/types.transaction.go</code>源码<code>Version: 1.10.2-unstable</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;container/heap&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/rlp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrInvalidSig           = errors.New(<span class="string">&quot;invalid transaction v, r, s values&quot;</span>)</span><br><span class="line">ErrUnexpectedProtection = errors.New(<span class="string">&quot;transaction type does not supported EIP-155 protected signatures&quot;</span>)</span><br><span class="line">ErrInvalidTxType        = errors.New(<span class="string">&quot;transaction type not valid in this context&quot;</span>)</span><br><span class="line">ErrTxTypeNotSupported   = errors.New(<span class="string">&quot;transaction type not supported&quot;</span>)</span><br><span class="line">errEmptyTypedTx         = errors.New(<span class="string">&quot;empty typed transaction bytes&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction types.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LegacyTxType = <span class="literal">iota</span></span><br><span class="line">AccessListTxType</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction is an Ethereum transaction.</span></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">inner TxData    <span class="comment">// Consensus contents of a transaction 交易中需要共识的内容</span></span><br><span class="line">time  time.Time <span class="comment">// Time first seen locally (spam avoidance)  第一次收到交易的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// caches</span></span><br><span class="line">hash atomic.Value <span class="comment">// 交易的hash</span></span><br><span class="line">size atomic.Value <span class="comment">// 交易的大小</span></span><br><span class="line">from atomic.Value <span class="comment">// 交易的发起者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTx creates a new transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTx</span><span class="params">(inner TxData)</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line">tx := <span class="built_in">new</span>(Transaction)</span><br><span class="line">tx.setDecoded(inner.<span class="built_in">copy</span>(), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> tx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxData is the underlying data of a transaction.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This is implemented by LegacyTx and AccessListTx.</span></span><br><span class="line"><span class="keyword">type</span> TxData <span class="keyword">interface</span> &#123;</span><br><span class="line">txType() <span class="keyword">byte</span> <span class="comment">// returns the type ID</span></span><br><span class="line"><span class="built_in">copy</span>() TxData <span class="comment">// creates a deep copy and initializes all fields</span></span><br><span class="line"></span><br><span class="line">chainID() *big.Int <span class="comment">//链ID</span></span><br><span class="line">accessList() AccessList</span><br><span class="line">data() []<span class="keyword">byte</span> <span class="comment">// 交易中的数据</span></span><br><span class="line">gas() <span class="keyword">uint64</span> <span class="comment">// 交易的消耗了多少gas</span></span><br><span class="line">gasPrice() *big.Int <span class="comment">//交易的gas价格</span></span><br><span class="line">value() *big.Int <span class="comment">// 交易中带的以太币的数量</span></span><br><span class="line">nonce() <span class="keyword">uint64</span> <span class="comment">// 对于发送交易的人来说，这是第几笔交易</span></span><br><span class="line">to() *common.Address <span class="comment">// 交易发送给谁</span></span><br><span class="line"></span><br><span class="line">rawSignatureValues() (v, r, s *big.Int) <span class="comment">// 获取签名相关信息</span></span><br><span class="line">setSignatureValues(chainID, v, r, s *big.Int) <span class="comment">// 设置签名相关信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP implements rlp.Encoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line">buf := encodeBufferPool.Get().(*bytes.Buffer)</span><br><span class="line"><span class="keyword">defer</span> encodeBufferPool.Put(buf)</span><br><span class="line">buf.Reset()</span><br><span class="line"><span class="keyword">if</span> err := tx.encodeTyped(buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, buf.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeTyped writes the canonical encoding of a typed transaction to w.</span></span><br><span class="line"><span class="comment">// 将交易中的inner数据写入到入参w</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">encodeTyped</span><span class="params">(w *bytes.Buffer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">w.WriteByte(tx.Type())</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalBinary returns the canonical encoding of the transaction.</span></span><br><span class="line"><span class="comment">// For legacy transactions, it returns the RLP encoding. For EIP-2718 typed</span></span><br><span class="line"><span class="comment">// transactions, it returns the type and payload.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">MarshalBinary</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.EncodeToBytes(tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">err := tx.encodeTyped(&amp;buf)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP implements rlp.Decoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">kind, size, err := s.Kind()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err != <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> kind == rlp.List:</span><br><span class="line"><span class="comment">// It&#x27;s a legacy transaction.</span></span><br><span class="line"><span class="keyword">var</span> inner LegacyTx</span><br><span class="line">err := s.Decode(&amp;inner)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">tx.setDecoded(&amp;inner, <span class="keyword">int</span>(rlp.ListSize(size)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> kind == rlp.String:</span><br><span class="line"><span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> b, err = s.Bytes(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">inner, err := tx.decodeTyped(b)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">tx.setDecoded(inner, <span class="built_in">len</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> rlp.ErrExpectedList</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalBinary decodes the canonical encoding of transactions.</span></span><br><span class="line"><span class="comment">// It supports legacy RLP transactions and EIP2718 typed transactions.</span></span><br><span class="line"><span class="comment">// 将字节数组b解码设置到交易的inner字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">UnmarshalBinary</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="number">0</span> &amp;&amp; b[<span class="number">0</span>] &gt; <span class="number">0x7f</span> &#123;</span><br><span class="line"><span class="comment">// It&#x27;s a legacy transaction.</span></span><br><span class="line"><span class="keyword">var</span> data LegacyTx</span><br><span class="line">err := rlp.DecodeBytes(b, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">tx.setDecoded(&amp;data, <span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It&#x27;s an EIP2718 typed transaction envelope.</span></span><br><span class="line">inner, err := tx.decodeTyped(b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">tx.setDecoded(inner, <span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decodeTyped decodes a typed transaction from the canonical format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">decodeTyped</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(TxData, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errEmptyTypedTx</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> b[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> AccessListTxType:</span><br><span class="line"><span class="keyword">var</span> inner AccessListTx</span><br><span class="line">err := rlp.DecodeBytes(b[<span class="number">1</span>:], &amp;inner)</span><br><span class="line"><span class="keyword">return</span> &amp;inner, err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrTxTypeNotSupported</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setDecoded sets the inner transaction and size after decoding.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">setDecoded</span><span class="params">(inner TxData, size <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">tx.inner = inner</span><br><span class="line">tx.time = time.Now()</span><br><span class="line"><span class="keyword">if</span> size &gt; <span class="number">0</span> &#123;</span><br><span class="line">tx.size.Store(common.StorageSize(size))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sanityCheckSignature</span><span class="params">(v *big.Int, r *big.Int, s *big.Int, maybeProtected <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &amp;&amp; !maybeProtected &#123;</span><br><span class="line"><span class="keyword">return</span> ErrUnexpectedProtection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plainV <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &#123;</span><br><span class="line">chainID := deriveChainId(v).Uint64()</span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64() - <span class="number">35</span> - <span class="number">2</span>*chainID)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> maybeProtected &#123;</span><br><span class="line"><span class="comment">// Only EIP-155 signatures can be optionally protected. Since</span></span><br><span class="line"><span class="comment">// we determined this v value is not protected, it must be a</span></span><br><span class="line"><span class="comment">// raw 27 or 28.</span></span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64() - <span class="number">27</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// If the signature is not optionally protected, we assume it</span></span><br><span class="line"><span class="comment">// must already be equal to the recovery id.</span></span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !crypto.ValidateSignatureValues(plainV, r, s, <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrInvalidSig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isProtectedV</span><span class="params">(V *big.Int)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> V.BitLen() &lt;= <span class="number">8</span> &#123;</span><br><span class="line">v := V.Uint64()</span><br><span class="line"><span class="keyword">return</span> v != <span class="number">27</span> &amp;&amp; v != <span class="number">28</span> &amp;&amp; v != <span class="number">1</span> &amp;&amp; v != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// anything not 27 or 28 is considered protected</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Protected says whether the transaction is replay-protected.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Protected</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> tx := tx.inner.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *LegacyTx:</span><br><span class="line"><span class="keyword">return</span> tx.V != <span class="literal">nil</span> &amp;&amp; isProtectedV(tx.V)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type returns the transaction type.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">uint8</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.txType()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChainId returns the EIP155 chain ID of the transaction. The return value will always be</span></span><br><span class="line"><span class="comment">// non-nil. For legacy transactions which are not replay-protected, the return value is</span></span><br><span class="line"><span class="comment">// zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">ChainId</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.chainID()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data returns the input data of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Data</span><span class="params">()</span> []<span class="title">byte</span></span> &#123; <span class="keyword">return</span> tx.inner.data() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AccessList returns the access list of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">AccessList</span><span class="params">()</span> <span class="title">AccessList</span></span> &#123; <span class="keyword">return</span> tx.inner.accessList() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gas returns the gas limit of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Gas</span><span class="params">()</span> <span class="title">uint64</span></span> &#123; <span class="keyword">return</span> tx.inner.gas() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPrice returns the gas price of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPrice</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(tx.inner.gasPrice()) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value returns the ether amount of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Value</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(tx.inner.value()) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nonce returns the sender account nonce of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span> &#123; <span class="keyword">return</span> tx.inner.nonce() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// To returns the recipient address of the transaction.</span></span><br><span class="line"><span class="comment">// For contract-creation transactions, To returns nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">To</span><span class="params">()</span> *<span class="title">common</span>.<span class="title">Address</span></span> &#123;</span><br><span class="line"><span class="comment">// Copy the pointed-to address.</span></span><br><span class="line">ito := tx.inner.to()</span><br><span class="line"><span class="keyword">if</span> ito == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">cpy := *ito</span><br><span class="line"><span class="keyword">return</span> &amp;cpy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cost returns gas * gasPrice + value.</span></span><br><span class="line"><span class="comment">// 这个交易的发起者总共需要支付多少以太币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Cost</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">total := <span class="built_in">new</span>(big.Int).Mul(tx.GasPrice(), <span class="built_in">new</span>(big.Int).SetUint64(tx.Gas()))</span><br><span class="line">total.Add(total, tx.Value())</span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RawSignatureValues returns the V, R, S signature values of the transaction.</span></span><br><span class="line"><span class="comment">// The return values should not be modified by the caller.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">RawSignatureValues</span><span class="params">()</span> <span class="params">(v, r, s *big.Int)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.rawSignatureValues()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPriceCmp compares the gas prices of two transactions.</span></span><br><span class="line"><span class="comment">// 比较当前交易和其他交易的gas价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPriceCmp</span><span class="params">(other *Transaction)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.gasPrice().Cmp(other.inner.gasPrice())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPriceIntCmp compares the gas price of the transaction against the given price.</span></span><br><span class="line"><span class="comment">// 比较当前交易和其他交易的gas价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPriceIntCmp</span><span class="params">(other *big.Int)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.gasPrice().Cmp(other)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the transaction hash.</span></span><br><span class="line"><span class="comment">// 获取交易的hash，如果已经存在则直接返回，如果不存在则计算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> hash := tx.hash.Load(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash.(common.Hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h common.Hash</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line">h = rlpHash(tx.inner)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">h = prefixedRlpHash(tx.Type(), tx.inner)</span><br><span class="line">&#125;</span><br><span class="line">tx.hash.Store(h)</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the true RLP encoded storage size of the transaction, either by</span></span><br><span class="line"><span class="comment">// encoding and returning it, or returning a previously cached value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> size := tx.size.Load(); size != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size.(common.StorageSize)</span><br><span class="line">&#125;</span><br><span class="line">c := writeCounter(<span class="number">0</span>)</span><br><span class="line">rlp.Encode(&amp;c, &amp;tx.inner)</span><br><span class="line">tx.size.Store(common.StorageSize(c))</span><br><span class="line"><span class="keyword">return</span> common.StorageSize(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithSignature returns a new transaction with the given signature.</span></span><br><span class="line"><span class="comment">// This signature needs to be in the [R || S || V] format where V is 0 or 1.</span></span><br><span class="line"><span class="comment">// 对交易进行签名，并返回一个新的签名后的交易</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">WithSignature</span><span class="params">(signer Signer, sig []<span class="keyword">byte</span>)</span> <span class="params">(*Transaction, error)</span></span> &#123;</span><br><span class="line">r, s, v, err := signer.SignatureValues(tx, sig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">cpy := tx.inner.<span class="built_in">copy</span>()</span><br><span class="line">cpy.setSignatureValues(signer.ChainID(), v, r, s)</span><br><span class="line"><span class="keyword">return</span> &amp;Transaction&#123;inner: cpy, time: tx.time&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transactions implements DerivableList for transactions.</span></span><br><span class="line"><span class="keyword">type</span> Transactions []*Transaction</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len returns the length of s.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Transactions)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeIndex encodes the i&#x27;th transaction to w. Note that this does not check for errors</span></span><br><span class="line"><span class="comment">// because we assume that *Transaction will only ever contain valid txs that were either</span></span><br><span class="line"><span class="comment">// constructed by decoding or via public API in this package.</span></span><br><span class="line"><span class="comment">// 将指定下标i的交易的inner数据解码写入w中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Transactions)</span> <span class="title">EncodeIndex</span><span class="params">(i <span class="keyword">int</span>, w *bytes.Buffer)</span></span> &#123;</span><br><span class="line">tx := s[i]</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line">rlp.Encode(w, tx.inner)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tx.encodeTyped(w)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxDifference returns a new set which is the difference between a and b.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TxDifference</span><span class="params">(a, b Transactions)</span> <span class="title">Transactions</span></span> &#123;</span><br><span class="line">keep := <span class="built_in">make</span>(Transactions, <span class="number">0</span>, <span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">remove := <span class="built_in">make</span>(<span class="keyword">map</span>[common.Hash]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> _, tx := <span class="keyword">range</span> b &#123;</span><br><span class="line">remove[tx.Hash()] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tx := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := remove[tx.Hash()]; !ok &#123;</span><br><span class="line">keep = <span class="built_in">append</span>(keep, tx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> keep</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxByNonce implements the sort interface to allow sorting a list of transactions</span></span><br><span class="line"><span class="comment">// by their nonces. This is usually only useful for sorting transactions from a</span></span><br><span class="line"><span class="comment">// single account, otherwise a nonce comparison doesn&#x27;t make much sense.</span></span><br><span class="line"><span class="comment">// 实现了排序的交易列表，排序的方式是nonce，只有同一个地址的nonce的比较才有意义，不同地址的nonce比较没有意义</span></span><br><span class="line"><span class="keyword">type</span> TxByNonce Transactions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i].Nonce() &lt; s[j].Nonce() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxByPriceAndTime implements both the sort and the heap interface, making it useful</span></span><br><span class="line"><span class="comment">// for all at once sorting as well as individually adding and removing elements.</span></span><br><span class="line"><span class="keyword">type</span> TxByPriceAndTime Transactions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// If the prices are equal, use the time the transaction was first seen for</span></span><br><span class="line"><span class="comment">// deterministic sorting</span></span><br><span class="line"><span class="comment">// 先按照价格排序，如果价格相等再按照时间排序</span></span><br><span class="line">cmp := s[i].GasPrice().Cmp(s[j].GasPrice())</span><br><span class="line"><span class="keyword">if</span> cmp == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s[i].time.Before(s[j].time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cmp &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *TxByPriceAndTime)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, x.(*Transaction))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *TxByPriceAndTime)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">old := *s</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">x := old[n<span class="number">-1</span>]</span><br><span class="line">*s = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransactionsByPriceAndNonce represents a set of transactions that can return</span></span><br><span class="line"><span class="comment">// transactions in a profit-maximizing sorted order, while supporting removing</span></span><br><span class="line"><span class="comment">// entire batches of transactions for non-executable accounts.</span></span><br><span class="line"><span class="keyword">type</span> TransactionsByPriceAndNonce <span class="keyword">struct</span> &#123;</span><br><span class="line">txs    <span class="keyword">map</span>[common.Address]Transactions <span class="comment">// Per account nonce-sorted list of transactions</span></span><br><span class="line">heads  TxByPriceAndTime                <span class="comment">// Next transaction for each unique account (price heap)</span></span><br><span class="line">signer Signer                          <span class="comment">// Signer for the set of transactions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTransactionsByPriceAndNonce creates a transaction set that can retrieve</span></span><br><span class="line"><span class="comment">// price sorted transactions in a nonce-honouring way.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note, the input map is reowned so the caller should not interact any more with</span></span><br><span class="line"><span class="comment">// if after providing it to the constructor.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTransactionsByPriceAndNonce</span><span class="params">(signer Signer, txs <span class="keyword">map</span>[common.Address]Transactions)</span> *<span class="title">TransactionsByPriceAndNonce</span></span> &#123;</span><br><span class="line"><span class="comment">// Initialize a price and received time based heap with the head transactions</span></span><br><span class="line">heads := <span class="built_in">make</span>(TxByPriceAndTime, <span class="number">0</span>, <span class="built_in">len</span>(txs))</span><br><span class="line"><span class="keyword">for</span> from, accTxs := <span class="keyword">range</span> txs &#123;</span><br><span class="line"><span class="comment">// Ensure the sender address is from the signer</span></span><br><span class="line"><span class="keyword">if</span> acc, _ := Sender(signer, accTxs[<span class="number">0</span>]); acc != from &#123;</span><br><span class="line"><span class="built_in">delete</span>(txs, from)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">heads = <span class="built_in">append</span>(heads, accTxs[<span class="number">0</span>])</span><br><span class="line">txs[from] = accTxs[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line">heap.Init(&amp;heads)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assemble and return the transaction set</span></span><br><span class="line"><span class="keyword">return</span> &amp;TransactionsByPriceAndNonce&#123;</span><br><span class="line">txs:    txs,</span><br><span class="line">heads:  heads,</span><br><span class="line">signer: signer,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Peek returns the next transaction by price.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Peek</span><span class="params">()</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t.heads) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t.heads[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shift replaces the current best head with the next one from the same account.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Shift</span><span class="params">()</span></span> &#123;</span><br><span class="line">acc, _ := Sender(t.signer, t.heads[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> txs, ok := t.txs[acc]; ok &amp;&amp; <span class="built_in">len</span>(txs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">t.heads[<span class="number">0</span>], t.txs[acc] = txs[<span class="number">0</span>], txs[<span class="number">1</span>:]</span><br><span class="line">heap.Fix(&amp;t.heads, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">heap.Pop(&amp;t.heads)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop removes the best transaction, *not* replacing it with the next one from</span></span><br><span class="line"><span class="comment">// the same account. This should be used when a transaction cannot be executed</span></span><br><span class="line"><span class="comment">// and hence all subsequent ones should be discarded from the same account.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">heap.Pop(&amp;t.heads)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message is a fully derived transaction and implements core.Message</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> In a future PR this will be removed.</span></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">to         *common.Address</span><br><span class="line">from       common.Address</span><br><span class="line">nonce      <span class="keyword">uint64</span></span><br><span class="line">amount     *big.Int</span><br><span class="line">gasLimit   <span class="keyword">uint64</span></span><br><span class="line">gasPrice   *big.Int</span><br><span class="line">data       []<span class="keyword">byte</span></span><br><span class="line">accessList AccessList</span><br><span class="line">checkNonce <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessage</span><span class="params">(from common.Address, to *common.Address, nonce <span class="keyword">uint64</span>, amount *big.Int, gasLimit <span class="keyword">uint64</span>, gasPrice *big.Int, data []<span class="keyword">byte</span>, accessList AccessList, checkNonce <span class="keyword">bool</span>)</span> <span class="title">Message</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Message&#123;</span><br><span class="line">from:       from,</span><br><span class="line">to:         to,</span><br><span class="line">nonce:      nonce,</span><br><span class="line">amount:     amount,</span><br><span class="line">gasLimit:   gasLimit,</span><br><span class="line">gasPrice:   gasPrice,</span><br><span class="line">data:       data,</span><br><span class="line">accessList: accessList,</span><br><span class="line">checkNonce: checkNonce,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsMessage returns the transaction as a core.Message.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">AsMessage</span><span class="params">(s Signer)</span> <span class="params">(Message, error)</span></span> &#123;</span><br><span class="line">msg := Message&#123;</span><br><span class="line">nonce:      tx.Nonce(),</span><br><span class="line">gasLimit:   tx.Gas(),</span><br><span class="line">gasPrice:   <span class="built_in">new</span>(big.Int).Set(tx.GasPrice()),</span><br><span class="line">to:         tx.To(),</span><br><span class="line">amount:     tx.Value(),</span><br><span class="line">data:       tx.Data(),</span><br><span class="line">accessList: tx.AccessList(),</span><br><span class="line">checkNonce: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">msg.from, err = Sender(s, tx)</span><br><span class="line"><span class="keyword">return</span> msg, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">From</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Address</span></span>   &#123; <span class="keyword">return</span> m.from &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">To</span><span class="params">()</span> *<span class="title">common</span>.<span class="title">Address</span></span>    &#123; <span class="keyword">return</span> m.to &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">GasPrice</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>     &#123; <span class="keyword">return</span> m.gasPrice &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Value</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>        &#123; <span class="keyword">return</span> m.amount &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Gas</span><span class="params">()</span> <span class="title">uint64</span></span>            &#123; <span class="keyword">return</span> m.gasLimit &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span>          &#123; <span class="keyword">return</span> m.nonce &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Data</span><span class="params">()</span> []<span class="title">byte</span></span>           &#123; <span class="keyword">return</span> m.data &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">AccessList</span><span class="params">()</span> <span class="title">AccessList</span></span> &#123; <span class="keyword">return</span> m.accessList &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">CheckNonce</span><span class="params">()</span> <span class="title">bool</span></span>       &#123; <span class="keyword">return</span> m.checkNonce &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对比etherscan-io的显示的Transaction字段：">对比etherscan.io的显示的Transaction字段：</h3><p><img src="https://gitee.com/guozhe001/images/raw/master/etherscan_transaction.png" alt="etherscan_transaction"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习&lt;code&gt;github.com/ethereum/go-ethereum/core/types.transaction.go&lt;/code&gt;源码&lt;code&gt;Version: 1.10.2-unstable&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="swarm" scheme="https://guozhe001.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>Geth源码学习之block</title>
    <link href="https://guozhe001.github.io/2021/04/08/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bblock/"/>
    <id>https://guozhe001.github.io/2021/04/08/blockchain/eth/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bblock/</id>
    <published>2021-04-08T11:19:30.904Z</published>
    <updated>2021-04-15T11:39:15.334Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习github-com-ethereum-go-ethereum-core-types-block-go源码Version-1-10-2-unstable">学习<code>github.com/ethereum/go-ethereum/core/types.block.go</code>源码<code>Version: 1.10.2-unstable</code>:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package types contains data types related to Ethereum consensus.</span></span><br><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common/hexutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/rlp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">EmptyRootHash  = common.HexToHash(<span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>)</span><br><span class="line">EmptyUncleHash = rlpHash([]*Header(<span class="literal">nil</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A BlockNonce is a 64-bit hash which proves (combined with the</span></span><br><span class="line"><span class="comment">// mix-hash) that a sufficient amount of computation has been carried</span></span><br><span class="line"><span class="comment">// out on a block.</span></span><br><span class="line"><span class="keyword">type</span> BlockNonce [<span class="number">8</span>]<span class="keyword">byte</span>  <span class="comment">// 挖矿就是找这个nonce，nonce是一个64位的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeNonce converts the given integer to a block nonce.</span></span><br><span class="line"><span class="comment">// 把十进制的数字i转换成BlockNonce</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncodeNonce</span><span class="params">(i <span class="keyword">uint64</span>)</span> <span class="title">BlockNonce</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n BlockNonce</span><br><span class="line">binary.BigEndian.PutUint64(n[:], i)</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint64 returns the integer value of a block nonce.</span></span><br><span class="line"><span class="comment">// 与EncodeNonce相反，把BlockNonce转换成十进制数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span> <span class="title">Uint64</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> binary.BigEndian.Uint64(n[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalText encodes n as a hex string with 0x prefix.</span></span><br><span class="line"><span class="comment">// 返回一个带有0x前缀的十六进制的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span> <span class="title">MarshalText</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> hexutil.Bytes(n[:]).MarshalText()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalText implements encoding.TextUnmarshaler.</span></span><br><span class="line"><span class="comment">// 把一个带有0x前缀的十六进制字符串赋值给n</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *BlockNonce)</span> <span class="title">UnmarshalText</span><span class="params">(input []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> hexutil.UnmarshalFixedText(<span class="string">&quot;BlockNonce&quot;</span>, input, n[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate gencodec -type Header -field-override headerMarshaling -out gen_header_json.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Header represents a block header in the Ethereum blockchain.</span></span><br><span class="line"><span class="comment">// 区块的头</span></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">ParentHash  common.Hash    <span class="string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 父区块的hash</span></span><br><span class="line">UncleHash   common.Hash    <span class="string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 叔区块数组的hash</span></span><br><span class="line">Coinbase    common.Address <span class="string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span> <span class="comment">// 谁挖出的此块</span></span><br><span class="line">Root        common.Hash    <span class="string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">//</span></span><br><span class="line">TxHash      common.Hash    <span class="string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span> <span class="comment">// 交易的hash，使用mpt结构的交易的根hash</span></span><br><span class="line">ReceiptHash common.Hash    <span class="string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span> <span class="comment">// 回执（交易响应）的hash，使用mpt结构的回执的根hash</span></span><br><span class="line">Bloom       Bloom          <span class="string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 使用交易回执算出的Bloom过滤器</span></span><br><span class="line">Difficulty  *big.Int       <span class="string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的难度</span></span><br><span class="line">Number      *big.Int       <span class="string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的高度</span></span><br><span class="line">GasLimit    <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的总的gas上限</span></span><br><span class="line">GasUsed     <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的总共使用的gas</span></span><br><span class="line">Time        <span class="keyword">uint64</span>         <span class="string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的生成时间</span></span><br><span class="line">Extra       []<span class="keyword">byte</span>         <span class="string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 额外的数据</span></span><br><span class="line">MixDigest   common.Hash    <span class="string">`json:&quot;mixHash&quot;`</span> <span class="comment">// 使用header中的上面的字段算出来的ethash和nonce算出来的hash值</span></span><br><span class="line">Nonce       BlockNonce     <span class="string">`json:&quot;nonce&quot;`</span> <span class="comment">// 当前区块的nonce</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// field type overrides for gencodec</span></span><br><span class="line"><span class="keyword">type</span> headerMarshaling <span class="keyword">struct</span> &#123;</span><br><span class="line">Difficulty *hexutil.Big</span><br><span class="line">Number     *hexutil.Big</span><br><span class="line">GasLimit   hexutil.Uint64</span><br><span class="line">GasUsed    hexutil.Uint64</span><br><span class="line">Time       hexutil.Uint64</span><br><span class="line">Extra      hexutil.Bytes</span><br><span class="line">Hash       common.Hash <span class="string">`json:&quot;hash&quot;`</span> <span class="comment">// adds call to Hash() in MarshalJSON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the block hash of the header, which is simply the keccak256 hash of its</span></span><br><span class="line"><span class="comment">// RLP encoding.</span></span><br><span class="line"><span class="comment">// 计算区块头h的hash，使用keccak256hash算法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> rlpHash(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> headerSize = common.StorageSize(reflect.TypeOf(Header&#123;&#125;).Size())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the approximate memory used by all internal contents. It is used</span></span><br><span class="line"><span class="comment">// to approximate and limit the memory consumption of various caches.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> headerSize + common.StorageSize(<span class="built_in">len</span>(h.Extra)+(h.Difficulty.BitLen()+h.Number.BitLen())/<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SanityCheck checks a few basic things -- these checks are way beyond what</span></span><br><span class="line"><span class="comment">// any &#x27;sane&#x27; production values should hold, and can mainly be used to prevent</span></span><br><span class="line"><span class="comment">// that the unbounded fields are stuffed with junk data to add processing</span></span><br><span class="line"><span class="comment">// overhead</span></span><br><span class="line"><span class="comment">// 检查区块头的字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">SanityCheck</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> h.Number != <span class="literal">nil</span> &amp;&amp; !h.Number.IsUint64() &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block number: bitlen %d&quot;</span>, h.Number.BitLen())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h.Difficulty != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> diffLen := h.Difficulty.BitLen(); diffLen &gt; <span class="number">80</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block difficulty: bitlen %d&quot;</span>, diffLen)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> eLen := <span class="built_in">len</span>(h.Extra); eLen &gt; <span class="number">100</span>*<span class="number">1024</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block extradata: size %d&quot;</span>, eLen)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EmptyBody returns true if there is no additional &#x27;body&#x27; to complete the header</span></span><br><span class="line"><span class="comment">// that is: no transactions and no uncles.</span></span><br><span class="line"><span class="comment">// 检查是否有额外的body数据，没有交易并且没有数块即代表为没有body</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">EmptyBody</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.TxHash == EmptyRootHash &amp;&amp; h.UncleHash == EmptyUncleHash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EmptyReceipts returns true if there are no receipts for this header/block.</span></span><br><span class="line"><span class="comment">// 检查回执是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">EmptyReceipts</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.ReceiptHash == EmptyRootHash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body is a simple (mutable, non-safe) data container for storing and moving</span></span><br><span class="line"><span class="comment">// a block&#x27;s data contents (transactions and uncles) together.</span></span><br><span class="line"><span class="comment">// 区块中的body信息，包括交易列表和叔块header列表</span></span><br><span class="line"><span class="keyword">type</span> Body <span class="keyword">struct</span> &#123;</span><br><span class="line">Transactions []*Transaction</span><br><span class="line">Uncles       []*Header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block represents an entire block in the Ethereum blockchain.</span></span><br><span class="line"><span class="comment">// 区块</span></span><br><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">header       *Header <span class="comment">// 块头</span></span><br><span class="line">uncles       []*Header <span class="comment">// 数块头</span></span><br><span class="line">transactions Transactions <span class="comment">// 交易列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// caches</span></span><br><span class="line">hash atomic.Value <span class="comment">// 区块hash</span></span><br><span class="line">size atomic.Value <span class="comment">// 区块大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Td is used by package core to store the total difficulty</span></span><br><span class="line"><span class="comment">// of the chain up to and including the block.</span></span><br><span class="line">td *big.Int <span class="comment">// total difficulty 当前网络的总难度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These fields are used by package eth to track</span></span><br><span class="line"><span class="comment">// inter-peer block relay.</span></span><br><span class="line">ReceivedAt   time.Time <span class="comment">// 接收到的时间</span></span><br><span class="line">ReceivedFrom <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 提交区块的Peer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeprecatedTd is an old relic for extracting the TD of a block. It is in the</span></span><br><span class="line"><span class="comment">// code solely to facilitate upgrading the database from the old format to the</span></span><br><span class="line"><span class="comment">// new, after which it should be deleted. Do not use!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">DeprecatedTd</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.td</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="comment">// StorageBlock defines the RLP encoding of a Block stored in the</span></span><br><span class="line"><span class="comment">// state database. The StorageBlock encoding contains fields that</span></span><br><span class="line"><span class="comment">// would otherwise need to be recomputed.</span></span><br><span class="line"><span class="keyword">type</span> StorageBlock Block</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;external&quot; block encoding. used for eth protocol, etc.</span></span><br><span class="line"><span class="keyword">type</span> extblock <span class="keyword">struct</span> &#123;</span><br><span class="line">Header *Header</span><br><span class="line">Txs    []*Transaction</span><br><span class="line">Uncles []*Header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="comment">// &quot;storage&quot; block encoding. used for database.</span></span><br><span class="line"><span class="keyword">type</span> storageblock <span class="keyword">struct</span> &#123;</span><br><span class="line">Header *Header</span><br><span class="line">Txs    []*Transaction</span><br><span class="line">Uncles []*Header</span><br><span class="line">TD     *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBlock creates a new block. The input data is copied,</span></span><br><span class="line"><span class="comment">// changes to header and to the field values will not affect the</span></span><br><span class="line"><span class="comment">// block.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The values of TxHash, UncleHash, ReceiptHash and Bloom in header</span></span><br><span class="line"><span class="comment">// are ignored and set to values derived from the given txs, uncles</span></span><br><span class="line"><span class="comment">// and receipts.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(header *Header, txs []*Transaction, uncles []*Header, receipts []*Receipt, hasher TrieHasher)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">b := &amp;Block&#123;header: CopyHeader(header), td: <span class="built_in">new</span>(big.Int)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> panic if len(txs) != len(receipts)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(txs) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.TxHash = EmptyRootHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.TxHash = DeriveSha(Transactions(txs), hasher)</span><br><span class="line">b.transactions = <span class="built_in">make</span>(Transactions, <span class="built_in">len</span>(txs))</span><br><span class="line"><span class="built_in">copy</span>(b.transactions, txs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(receipts) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.ReceiptHash = EmptyRootHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.ReceiptHash = DeriveSha(Receipts(receipts), hasher)</span><br><span class="line">b.header.Bloom = CreateBloom(receipts)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(uncles) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.UncleHash = EmptyUncleHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.UncleHash = CalcUncleHash(uncles)</span><br><span class="line">b.uncles = <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">b.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBlockWithHeader creates a block with the given header data. The</span></span><br><span class="line"><span class="comment">// header data is copied, changes to header and to the field values</span></span><br><span class="line"><span class="comment">// will not affect the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockWithHeader</span><span class="params">(header *Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Block&#123;header: CopyHeader(header)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CopyHeader creates a deep copy of a block header to prevent side effects from</span></span><br><span class="line"><span class="comment">// modifying a header variable.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyHeader</span><span class="params">(h *Header)</span> *<span class="title">Header</span></span> &#123;</span><br><span class="line">cpy := *h</span><br><span class="line"><span class="keyword">if</span> cpy.Difficulty = <span class="built_in">new</span>(big.Int); h.Difficulty != <span class="literal">nil</span> &#123;</span><br><span class="line">cpy.Difficulty.Set(h.Difficulty)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cpy.Number = <span class="built_in">new</span>(big.Int); h.Number != <span class="literal">nil</span> &#123;</span><br><span class="line">cpy.Number.Set(h.Number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(h.Extra) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cpy.Extra = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(h.Extra))</span><br><span class="line"><span class="built_in">copy</span>(cpy.Extra, h.Extra)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;cpy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP decodes the Ethereum</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> eb extblock</span><br><span class="line">_, size, _ := s.Kind()</span><br><span class="line"><span class="keyword">if</span> err := s.Decode(&amp;eb); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">b.header, b.uncles, b.transactions = eb.Header, eb.Uncles, eb.Txs</span><br><span class="line">b.size.Store(common.StorageSize(rlp.ListSize(size)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP serializes b into the Ethereum RLP block format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, extblock&#123;</span><br><span class="line">Header: b.header,</span><br><span class="line">Txs:    b.transactions,</span><br><span class="line">Uncles: b.uncles,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *StorageBlock)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sb storageblock</span><br><span class="line"><span class="keyword">if</span> err := s.Decode(&amp;sb); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">b.header, b.uncles, b.transactions, b.td = sb.Header, sb.Uncles, sb.Txs, sb.TD</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> copies</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Uncles</span><span class="params">()</span> []*<span class="title">Header</span></span>          &#123; <span class="keyword">return</span> b.uncles &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Transactions</span><span class="params">()</span> <span class="title">Transactions</span></span> &#123; <span class="keyword">return</span> b.transactions &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Transaction</span><span class="params">(hash common.Hash)</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, transaction := <span class="keyword">range</span> b.transactions &#123;</span><br><span class="line"><span class="keyword">if</span> transaction.Hash() == hash &#123;</span><br><span class="line"><span class="keyword">return</span> transaction</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Number</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>     &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Number) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">GasLimit</span><span class="params">()</span> <span class="title">uint64</span></span>     &#123; <span class="keyword">return</span> b.header.GasLimit &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">GasUsed</span><span class="params">()</span> <span class="title">uint64</span></span>      &#123; <span class="keyword">return</span> b.header.GasUsed &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Difficulty</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Difficulty) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Time</span><span class="params">()</span> <span class="title">uint64</span></span>         &#123; <span class="keyword">return</span> b.header.Time &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">NumberU64</span><span class="params">()</span> <span class="title">uint64</span></span>        &#123; <span class="keyword">return</span> b.header.Number.Uint64() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">MixDigest</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>   &#123; <span class="keyword">return</span> b.header.MixDigest &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span>            &#123; <span class="keyword">return</span> binary.BigEndian.Uint64(b.header.Nonce[:]) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Bloom</span><span class="params">()</span> <span class="title">Bloom</span></span>             &#123; <span class="keyword">return</span> b.header.Bloom &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Coinbase</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Address</span></span> &#123; <span class="keyword">return</span> b.header.Coinbase &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Root</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>        &#123; <span class="keyword">return</span> b.header.Root &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">ParentHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>  &#123; <span class="keyword">return</span> b.header.ParentHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">TxHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>      &#123; <span class="keyword">return</span> b.header.TxHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">ReceiptHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123; <span class="keyword">return</span> b.header.ReceiptHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">UncleHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>   &#123; <span class="keyword">return</span> b.header.UncleHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Extra</span><span class="params">()</span> []<span class="title">byte</span></span>            &#123; <span class="keyword">return</span> common.CopyBytes(b.header.Extra) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Header</span><span class="params">()</span> *<span class="title">Header</span></span> &#123; <span class="keyword">return</span> CopyHeader(b.header) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body returns the non-header content of the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Body</span><span class="params">()</span> *<span class="title">Body</span></span> &#123; <span class="keyword">return</span> &amp;Body&#123;b.transactions, b.uncles&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the true RLP encoded storage size of the block, either by encoding</span></span><br><span class="line"><span class="comment">// and returning it, or returning a previsouly cached value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> size := b.size.Load(); size != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size.(common.StorageSize)</span><br><span class="line">&#125;</span><br><span class="line">c := writeCounter(<span class="number">0</span>)</span><br><span class="line">rlp.Encode(&amp;c, b)</span><br><span class="line">b.size.Store(common.StorageSize(c))</span><br><span class="line"><span class="keyword">return</span> common.StorageSize(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SanityCheck can be used to prevent that unbounded fields are</span></span><br><span class="line"><span class="comment">// stuffed with junk data to add processing overhead</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">SanityCheck</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.header.SanityCheck()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> writeCounter common.StorageSize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *writeCounter)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">*c += writeCounter(<span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalcUncleHash</span><span class="params">(uncles []*Header)</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(uncles) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> EmptyUncleHash</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlpHash(uncles)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithSeal returns a new block with the data from b but the header replaced with</span></span><br><span class="line"><span class="comment">// the sealed one.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">WithSeal</span><span class="params">(header *Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">cpy := *header</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Block&#123;</span><br><span class="line">header:       &amp;cpy,</span><br><span class="line">transactions: b.transactions,</span><br><span class="line">uncles:       b.uncles,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithBody returns a new block with the given transaction and uncle contents.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">WithBody</span><span class="params">(transactions []*Transaction, uncles []*Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">block := &amp;Block&#123;</span><br><span class="line">header:       CopyHeader(b.header),</span><br><span class="line">transactions: <span class="built_in">make</span>([]*Transaction, <span class="built_in">len</span>(transactions)),</span><br><span class="line">uncles:       <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles)),</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(block.transactions, transactions)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">block.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the keccak256 hash of b&#x27;s header.</span></span><br><span class="line"><span class="comment">// The hash is computed on the first call and cached thereafter.</span></span><br><span class="line"><span class="comment">// 获取当前区块的hash，如果已经有了直接返回，否则计算当前区块的hash再返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> hash := b.hash.Load(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash.(common.Hash)</span><br><span class="line">&#125;</span><br><span class="line">v := b.header.Hash()</span><br><span class="line">b.hash.Store(v)</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blocks []*Block</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对比etherscan-io的显示的Block字段：">对比etherscan.io的显示的Block字段：</h3><p><img src="https://gitee.com/guozhe001/images/raw/master/etherscan_block.png" alt="etherscan_block"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;学习github-com-ethereum-go-ethereum-core-types-block-go源码Version-1-10-2-unstable&quot;&gt;学习&lt;code&gt;github.com/ethereum/go-ethereum/core/types.b</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="ethereum" scheme="https://guozhe001.github.io/tags/ethereum/"/>
    
    <category term="swarm" scheme="https://guozhe001.github.io/tags/swarm/"/>
    
  </entry>
  
</feed>
