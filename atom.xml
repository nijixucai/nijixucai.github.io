<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滴水成涓</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://guozhe001.github.io/atom.xml" rel="self"/>
  
  <link href="https://guozhe001.github.io/"/>
  <updated>2021-04-01T10:18:57.780Z</updated>
  <id>https://guozhe001.github.io/</id>
  
  <author>
    <name>guozhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85go-ethereum%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85go-ethereum%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2021-04-01T10:18:57.780Z</published>
    <updated>2021-04-01T10:18:57.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在ubantu上启动go-ethereum客户端">如何在ubantu上启动go-ethereum客户端</h1><h2 id="环境准备">环境准备</h2><ul><li>安装git:<code>sudo apt install git</code></li><li>安装go:<code>sudo apt install golang-go</code></li></ul><h2 id="go-ethereum（Geth）客户端下载和编译">go-ethereum（Geth）客户端下载和编译</h2><h3 id="clone源码：">clone源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/guozhe001/go-ethereum.git</span><br></pre></td></tr></table></figure><h3 id="从源码构建geth">从源码构建geth</h3><p><em>需要科学上网</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd go-ethereum</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure><p>编译结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br></pre></td><td class="code"><pre><span class="line">env GO111MODULE=on go run build/ci.go install ./cmd/geth</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; /usr/lib/go-1.13/bin/go build -ldflags -X main.gitCommit=54c0d573d75ab9baa239db3f071d6cb4d1ec6aad -X main.gitDate=20210325 -trimpath -v -o /home/guozhe/code/go-ethereum/build/bin/geth ./cmd/geth</span></span><br><span class="line">go: downloading github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: downloading github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: downloading golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: downloading github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: downloading github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: downloading github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: downloading github.com/golang/protobuf v1.4.3</span><br><span class="line">go: downloading github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: downloading github.com/rs/cors v1.7.0</span><br><span class="line">go: downloading github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: extracting github.com/rs/cors v1.7.0</span><br><span class="line">go: downloading github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: extracting github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: extracting github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: downloading github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: extracting github.com/golang/protobuf v1.4.3</span><br><span class="line">go: downloading github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: extracting golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: downloading github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: extracting github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: downloading github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: extracting github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: downloading github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: extracting github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: downloading golang.org/x/text v0.3.3</span><br><span class="line">go: extracting github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: downloading github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: downloading google.golang.org/protobuf v1.23.0</span><br><span class="line">go: extracting github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: downloading github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: extracting github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: downloading github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: extracting github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: downloading github.com/pkg/errors v0.8.1</span><br><span class="line">go: extracting github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: downloading github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: extracting github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: downloading github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: extracting github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: extracting github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: downloading github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: extracting github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: downloading github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: extracting google.golang.org/protobuf v1.23.0</span><br><span class="line">go: downloading github.com/fatih/color v1.7.0</span><br><span class="line">go: extracting github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: downloading github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: extracting github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: downloading github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: extracting github.com/pkg/errors v0.8.1</span><br><span class="line">go: extracting github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: downloading github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: extracting github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: extracting github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: downloading github.com/google/uuid v1.1.5</span><br><span class="line">go: downloading github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: extracting github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: downloading github.com/go-stack/stack v1.8.0</span><br><span class="line">go: extracting github.com/fatih/color v1.7.0</span><br><span class="line">go: downloading golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: extracting github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: extracting github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: downloading gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: extracting github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: downloading github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: extracting github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: downloading github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">go: extracting golang.org/x/text v0.3.3</span><br><span class="line">go: extracting github.com/google/uuid v1.1.5</span><br><span class="line">go: downloading github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: downloading github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: downloading github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: downloading github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: extracting github.com/go-stack/stack v1.8.0</span><br><span class="line">go: extracting golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: extracting gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: extracting github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: downloading github.com/cespare/xxhash v1.1.0</span><br><span class="line">go: extracting github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">go: extracting github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: extracting github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: extracting github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: extracting golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: extracting github.com/cespare/xxhash v1.1.0</span><br><span class="line">go: downloading github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: extracting github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: extracting github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: finding gopkg.in/urfave/cli.v1 v1.20.0</span><br><span class="line">go: finding github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: finding github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: finding github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: finding github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: finding github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: finding github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: finding github.com/go-stack/stack v1.8.0</span><br><span class="line">go: finding github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: finding github.com/fjl/memsize v0.0.0-20190710130421-bcb5799ab5e5</span><br><span class="line">go: finding github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: finding github.com/naoina/toml v0.1.2-0.20170918210437-9fafd6967416</span><br><span class="line">go: finding github.com/mattn/go-colorable v0.1.0</span><br><span class="line">go: finding github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: finding github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: finding github.com/fatih/color v1.7.0</span><br><span class="line">go: finding github.com/golang/protobuf v1.4.3</span><br><span class="line">go: finding github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: finding github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: finding github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: finding github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: finding github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: finding github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: finding github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: finding github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: finding golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: finding github.com/google/uuid v1.1.5</span><br><span class="line">go: finding github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: finding github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: finding github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: finding github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: finding github.com/pkg/errors v0.8.1</span><br><span class="line">go: finding golang.org/x/text v0.3.3</span><br><span class="line">go: finding github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: finding github.com/gballet/go-libpcsclite v0.0.0-20190607065134-2772fd86a8ff</span><br><span class="line">go: finding github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: finding github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: finding github.com/rs/cors v1.7.0</span><br><span class="line">go: finding github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: finding google.golang.org/protobuf v1.23.0</span><br><span class="line">go: finding github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: finding github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: finding github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: finding github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: finding golang.org/x/time v0.0.0-20190308202827-9d24e82272b4</span><br><span class="line">go: finding gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: finding golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: finding golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: finding github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">unicode</span><br><span class="line">unicode/utf8</span><br><span class="line">vendor/golang.org/x/crypto/cryptobyte/asn1</span><br><span class="line">crypto/internal/subtle</span><br><span class="line">math/bits</span><br><span class="line">golang.org/x/sys/internal/unsafeheader</span><br><span class="line">container/list</span><br><span class="line">internal/nettrace</span><br><span class="line">vendor/golang.org/x/crypto/internal/subtle</span><br><span class="line">encoding</span><br><span class="line">golang.org/x/net/html/atom</span><br><span class="line">crypto/subtle</span><br><span class="line">runtime/internal/sys</span><br><span class="line">golang.org/x/text/encoding/internal/identifier</span><br><span class="line">golang.org/x/text/internal/utf8internal</span><br><span class="line">runtime/cgo</span><br><span class="line">google.golang.org/protobuf/internal/flags</span><br><span class="line">unicode/utf16</span><br><span class="line">runtime/internal/atomic</span><br><span class="line">container/ring</span><br><span class="line">vendor/golang.org/x/crypto/curve25519</span><br><span class="line">internal/race</span><br><span class="line">internal/cpu</span><br><span class="line">google.golang.org/protobuf/internal/fieldnum</span><br><span class="line">sync/atomic</span><br><span class="line">google.golang.org/protobuf/internal/genname</span><br><span class="line">github.com/ethereum/go-ethereum/internal/web3ext</span><br><span class="line">runtime/internal/math</span><br><span class="line">internal/testlog</span><br><span class="line">google.golang.org/protobuf/internal/set</span><br><span class="line">internal/bytealg</span><br><span class="line">math</span><br><span class="line">runtime</span><br><span class="line">internal/reflectlite</span><br><span class="line">sync</span><br><span class="line">google.golang.org/protobuf/internal/pragma</span><br><span class="line">internal/singleflight</span><br><span class="line">math/rand</span><br><span class="line">errors</span><br><span class="line">sort</span><br><span class="line">internal/oserror</span><br><span class="line">io</span><br><span class="line">github.com/ethereum/go-ethereum/common/bitutil</span><br><span class="line">github.com/hashicorp/golang-lru/simplelru</span><br><span class="line">vendor/golang.org/x/net/dns/dnsmessage</span><br><span class="line">strconv</span><br><span class="line">syscall</span><br><span class="line">container/heap</span><br><span class="line">golang.org/x/text/internal/tag</span><br><span class="line">bytes</span><br><span class="line">hash</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb</span><br><span class="line">crypto/internal/randutil</span><br><span class="line">strings</span><br><span class="line">text/tabwriter</span><br><span class="line">github.com/go-sourcemap/sourcemap/internal/base64vlq</span><br><span class="line">crypto/hmac</span><br><span class="line">hash/fnv</span><br><span class="line">hash/crc32</span><br><span class="line">golang.org/x/crypto/pbkdf2</span><br><span class="line">vendor/golang.org/x/crypto/hkdf</span><br><span class="line">golang.org/x/crypto/hkdf</span><br><span class="line">crypto/rc4</span><br><span class="line">github.com/dop251/goja/token</span><br><span class="line">crypto</span><br><span class="line">reflect</span><br><span class="line">golang.org/x/crypto/ripemd160</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/comparer</span><br><span class="line">golang.org/x/text/transform</span><br><span class="line">vendor/golang.org/x/text/transform</span><br><span class="line">bufio</span><br><span class="line">path</span><br><span class="line">github.com/influxdata/influxdb/pkg/escape</span><br><span class="line">encoding/base32</span><br><span class="line">html</span><br><span class="line">regexp/syntax</span><br><span class="line">golang.org/x/text/runes</span><br><span class="line">golang.org/x/text/encoding</span><br><span class="line">golang.org/x/text/encoding/internal</span><br><span class="line">golang.org/x/text/encoding/unicode</span><br><span class="line">golang.org/x/text/encoding/charmap</span><br><span class="line">golang.org/x/text/encoding/japanese</span><br><span class="line">golang.org/x/text/encoding/traditionalchinese</span><br><span class="line">golang.org/x/text/encoding/korean</span><br><span class="line">golang.org/x/text/encoding/simplifiedchinese</span><br><span class="line">github.com/ethereum/go-ethereum/common/fdlimit</span><br><span class="line">internal/syscall/unix</span><br><span class="line">github.com/mattn/go-isatty</span><br><span class="line">time</span><br><span class="line">regexp</span><br><span class="line">context</span><br><span class="line">github.com/naoina/toml/ast</span><br><span class="line">github.com/ethereum/go-ethereum/common/mclock</span><br><span class="line">internal/poll</span><br><span class="line">github.com/ethereum/go-ethereum/common/prque</span><br><span class="line">golang.org/x/sync/errgroup</span><br><span class="line">os</span><br><span class="line">internal/fmtsort</span><br><span class="line">encoding/binary</span><br><span class="line">crypto/md5</span><br><span class="line">github.com/cespare/xxhash/v2</span><br><span class="line">encoding/base64</span><br><span class="line">crypto/sha1</span><br><span class="line">crypto/sha256</span><br><span class="line">golang.org/x/crypto/sha3</span><br><span class="line">crypto/cipher</span><br><span class="line">vendor/golang.org/x/crypto/poly1305</span><br><span class="line">crypto/sha512</span><br><span class="line">crypto/ed25519/internal/edwards25519</span><br><span class="line">github.com/golang/snappy</span><br><span class="line">vendor/golang.org/x/sys/cpu</span><br><span class="line">golang.org/x/sys/unix</span><br><span class="line">fmt</span><br><span class="line">runtime/debug</span><br><span class="line">path/filepath</span><br><span class="line">github.com/mattn/go-runewidth</span><br><span class="line">os/signal</span><br><span class="line">google.golang.org/protobuf/internal/detrand</span><br><span class="line">github.com/mattn/go-colorable</span><br><span class="line">net</span><br><span class="line">encoding/pem</span><br><span class="line">crypto/aes</span><br><span class="line">crypto/des</span><br><span class="line">vendor/golang.org/x/crypto/internal/chacha20</span><br><span class="line">golang.org/x/crypto/scrypt</span><br><span class="line">io/ioutil</span><br><span class="line">os/exec</span><br><span class="line">vendor/golang.org/x/crypto/chacha20poly1305</span><br><span class="line">golang.org/x/sys/cpu</span><br><span class="line">database/sql/driver</span><br><span class="line">encoding/json</span><br><span class="line">encoding/hex</span><br><span class="line">github.com/ethereum/go-ethereum/event</span><br><span class="line">github.com/go-stack/stack</span><br><span class="line">log</span><br><span class="line">net/url</span><br><span class="line">github.com/VictoriaMetrics/fastcache</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/util</span><br><span class="line">math/big</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/storage</span><br><span class="line">encoding/csv</span><br><span class="line">github.com/pkg/errors</span><br><span class="line">compress/flate</span><br><span class="line">github.com/hashicorp/golang-lru</span><br><span class="line">vendor/golang.org/x/net/http2/hpack</span><br><span class="line">encoding/gob</span><br><span class="line">mime</span><br><span class="line">mime/quotedprintable</span><br><span class="line">flag</span><br><span class="line">vendor/golang.org/x/text/unicode/norm</span><br><span class="line">net/http/internal</span><br><span class="line">github.com/peterh/liner</span><br><span class="line">vendor/golang.org/x/text/unicode/bidi</span><br><span class="line">github.com/olekukonko/tablewriter</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/blake2b</span><br><span class="line">encoding/xml</span><br><span class="line">golang.org/x/net/html</span><br><span class="line">golang.org/x/text/internal/language</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/cache</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/filter</span><br><span class="line">github.com/status-im/keycard-go/derivationpath</span><br><span class="line">golang.org/x/text/unicode/norm</span><br><span class="line">google.golang.org/protobuf/internal/errors</span><br><span class="line">go/token</span><br><span class="line">google.golang.org/protobuf/internal/version</span><br><span class="line">github.com/karalabe/usb</span><br><span class="line">google.golang.org/protobuf/encoding/protowire</span><br><span class="line">github.com/davecgh/go-spew/spew</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/errors</span><br><span class="line">github.com/shirou/gopsutil/internal/common</span><br><span class="line">google.golang.org/protobuf/reflect/protoreflect</span><br><span class="line">github.com/tyler-smith/go-bip39/wordlists</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/iterator</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/journal</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/opt</span><br><span class="line">compress/gzip</span><br><span class="line">github.com/fjl/memsize</span><br><span class="line">vendor/golang.org/x/text/secure/bidirule</span><br><span class="line">text/template/parse</span><br><span class="line">runtime/trace</span><br><span class="line">os/user</span><br><span class="line">github.com/ethereum/go-ethereum/console/prompt</span><br><span class="line">golang.org/x/time/rate</span><br><span class="line">runtime/pprof</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers/internal/tracers</span><br><span class="line">golang.org/x/text/internal/language/compact</span><br><span class="line">go/scanner</span><br><span class="line">github.com/graph-gophers/graphql-go/errors</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/memdb</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/table</span><br><span class="line">testing</span><br><span class="line">text/scanner</span><br><span class="line">github.com/graph-gophers/graphql-go/log</span><br><span class="line">github.com/opentracing/opentracing-go/log</span><br><span class="line">github.com/rjeczalik/notify</span><br><span class="line">github.com/prometheus/tsdb/fileutil</span><br><span class="line">github.com/edsrzf/mmap-go</span><br><span class="line">go/ast</span><br><span class="line">google.golang.org/protobuf/reflect/protoregistry</span><br><span class="line">golang.org/x/text/language</span><br><span class="line">google.golang.org/protobuf/internal/strs</span><br><span class="line">google.golang.org/protobuf/internal/mapsort</span><br><span class="line">google.golang.org/protobuf/internal/fieldsort</span><br><span class="line">github.com/huin/goupnp/scpd</span><br><span class="line">vendor/golang.org/x/net/idna</span><br><span class="line">google.golang.org/protobuf/runtime/protoiface</span><br><span class="line">google.golang.org/protobuf/internal/descfmt</span><br><span class="line">github.com/deckarep/golang-set</span><br><span class="line">github.com/shirou/gopsutil/cpu</span><br><span class="line">google.golang.org/protobuf/internal/encoding/text</span><br><span class="line">google.golang.org/protobuf/internal/descopts</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/common</span><br><span class="line">github.com/influxdata/influxdb/models</span><br><span class="line">github.com/dlclark/regexp2/syntax</span><br><span class="line">github.com/syndtr/goleveldb/leveldb</span><br><span class="line">github.com/dop251/goja/file</span><br><span class="line">github.com/go-sourcemap/sourcemap</span><br><span class="line">github.com/fatih/color</span><br><span class="line">github.com/ethereum/go-ethereum/internal/jsre/deps</span><br><span class="line">google.golang.org/protobuf/internal/encoding/messageset</span><br><span class="line">github.com/naoina/go-stringutil</span><br><span class="line">github.com/shirou/gopsutil/mem</span><br><span class="line">text/template</span><br><span class="line">github.com/ethereum/go-ethereum/common/hexutil</span><br><span class="line">crypto/elliptic</span><br><span class="line">encoding/asn1</span><br><span class="line">crypto/rand</span><br><span class="line">github.com/ethereum/go-ethereum/common/math</span><br><span class="line">github.com/ethereum/go-ethereum/rlp</span><br><span class="line">crypto/dsa</span><br><span class="line">github.com/holiman/uint256</span><br><span class="line">google.golang.org/protobuf/proto</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/schema</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/query</span><br><span class="line">golang.org/x/text/encoding/htmlindex</span><br><span class="line">github.com/dop251/goja/ast</span><br><span class="line">golang.org/x/text/internal</span><br><span class="line">go/parser</span><br><span class="line">go/printer</span><br><span class="line">google.golang.org/protobuf/internal/encoding/defval</span><br><span class="line">golang.org/x/text/internal/colltab</span><br><span class="line">github.com/holiman/bloomfilter/v2</span><br><span class="line">crypto/ed25519</span><br><span class="line">crypto/rsa</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bn256/cloudflare</span><br><span class="line">github.com/tyler-smith/go-bip39</span><br><span class="line">golang.org/x/net/html/charset</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/packer</span><br><span class="line">github.com/graph-gophers/graphql-go/introspection</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/validation</span><br><span class="line">github.com/dop251/goja/parser</span><br><span class="line">golang.org/x/text/cases</span><br><span class="line">golang.org/x/crypto/ed25519</span><br><span class="line">crypto/x509/pkix</span><br><span class="line">github.com/ethereum/go-ethereum/common</span><br><span class="line">vendor/golang.org/x/crypto/cryptobyte</span><br><span class="line">github.com/naoina/toml</span><br><span class="line">gopkg.in/urfave/cli.v1</span><br><span class="line">html/template</span><br><span class="line">crypto/ecdsa</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/secp256k1</span><br><span class="line">github.com/jedisct1/go-minisign</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/resolvable</span><br><span class="line">github.com/dlclark/regexp2</span><br><span class="line">golang.org/x/text/collate</span><br><span class="line">go/format</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux</span><br><span class="line">google.golang.org/protobuf/encoding/prototext</span><br><span class="line">google.golang.org/protobuf/internal/filedesc</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/selected</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb/memorydb</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bls12381</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bn256</span><br><span class="line">google.golang.org/protobuf/internal/encoding/tag</span><br><span class="line">google.golang.org/protobuf/internal/impl</span><br><span class="line">log/syslog</span><br><span class="line">vendor/golang.org/x/net/http/httpproxy</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/enr</span><br><span class="line">github.com/jackpal/go-nat-pmp</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/netutil</span><br><span class="line">net/textproto</span><br><span class="line">github.com/gballet/go-libpcsclite</span><br><span class="line">github.com/google/uuid</span><br><span class="line">crypto/x509</span><br><span class="line">gopkg.in/olebedev/go-duktape.v3</span><br><span class="line">github.com/ethereum/go-ethereum/log</span><br><span class="line">vendor/golang.org/x/net/http/httpguts</span><br><span class="line">mime/multipart</span><br><span class="line">github.com/ethereum/go-ethereum/signer/storage</span><br><span class="line">github.com/ethereum/go-ethereum/les/flowcontrol</span><br><span class="line">github.com/ethereum/go-ethereum/metrics</span><br><span class="line">crypto/tls</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb/leveldb</span><br><span class="line">google.golang.org/protobuf/internal/filetype</span><br><span class="line">github.com/dop251/goja</span><br><span class="line">google.golang.org/protobuf/runtime/protoimpl</span><br><span class="line">github.com/golang/protobuf/proto</span><br><span class="line">google.golang.org/protobuf/types/descriptorpb</span><br><span class="line">net/http/httptrace</span><br><span class="line">net/http</span><br><span class="line">github.com/golang/protobuf/protoc-gen-go/descriptor</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/usbwallet/trezor</span><br><span class="line">github.com/fjl/memsize/memsizeui</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/prometheus</span><br><span class="line">github.com/rs/cors</span><br><span class="line">expvar</span><br><span class="line">github.com/influxdata/influxdb/client</span><br><span class="line">net/http/pprof</span><br><span class="line">github.com/huin/goupnp/soap</span><br><span class="line">github.com/huin/goupnp/httpu</span><br><span class="line">github.com/opentracing/opentracing-go</span><br><span class="line">github.com/gorilla/websocket</span><br><span class="line">github.com/opentracing/opentracing-go/ext</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/exp</span><br><span class="line">github.com/graph-gophers/graphql-go/trace</span><br><span class="line">github.com/huin/goupnp/ssdp</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/influxdb</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec</span><br><span class="line">github.com/ethereum/go-ethereum/internal/debug</span><br><span class="line">github.com/huin/goupnp</span><br><span class="line">github.com/graph-gophers/graphql-go</span><br><span class="line">github.com/ethereum/go-ethereum/rpc</span><br><span class="line">github.com/huin/goupnp/dcps/internetgateway1</span><br><span class="line">github.com/huin/goupnp/dcps/internetgateway2</span><br><span class="line">github.com/ethereum/go-ethereum/internal/jsre</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/nat</span><br><span class="line">github.com/ethereum/go-ethereum/crypto</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/ecies</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/enode</span><br><span class="line">github.com/ethereum/go-ethereum/params</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/rlpx</span><br><span class="line">github.com/ethereum/go-ethereum/internal/flags</span><br><span class="line">github.com/ethereum/go-ethereum/core/types</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover/v4wire</span><br><span class="line">github.com/ethereum/go-ethereum/les/utils</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/dnsdisc</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/nodestate</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover/v5wire</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux/client</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux/server</span><br><span class="line">github.com/ethereum/go-ethereum</span><br><span class="line">github.com/ethereum/go-ethereum/eth/gasprice</span><br><span class="line">github.com/ethereum/go-ethereum/core/forkid</span><br><span class="line">github.com/ethereum/go-ethereum/core/bloombits</span><br><span class="line">github.com/ethereum/go-ethereum/core/rawdb</span><br><span class="line">github.com/ethereum/go-ethereum/core/vm</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover</span><br><span class="line">github.com/ethereum/go-ethereum/accounts</span><br><span class="line">github.com/ethereum/go-ethereum/ethclient</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/scwallet</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/keystore</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/usbwallet</span><br><span class="line">github.com/ethereum/go-ethereum/p2p</span><br><span class="line">github.com/ethereum/go-ethereum/console</span><br><span class="line">github.com/ethereum/go-ethereum/trie</span><br><span class="line">github.com/ethereum/go-ethereum/core/state/snapshot</span><br><span class="line">github.com/ethereum/go-ethereum/core/state</span><br><span class="line">github.com/ethereum/go-ethereum/consensus</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/misc</span><br><span class="line">github.com/ethereum/go-ethereum/core/state/pruner</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/clique</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/ethash</span><br><span class="line">github.com/ethereum/go-ethereum/core</span><br><span class="line">github.com/ethereum/go-ethereum/eth/filters</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/eth</span><br><span class="line">github.com/ethereum/go-ethereum/eth/fetcher</span><br><span class="line">github.com/ethereum/go-ethereum/light</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/snap</span><br><span class="line">github.com/ethereum/go-ethereum/eth/downloader</span><br><span class="line">github.com/ethereum/go-ethereum/miner</span><br><span class="line">github.com/ethereum/go-ethereum/internal/ethapi</span><br><span class="line">github.com/ethereum/go-ethereum/signer/core</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/external</span><br><span class="line">github.com/ethereum/go-ethereum/node</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi/bind</span><br><span class="line">github.com/ethereum/go-ethereum/contracts/checkpointoracle/contract</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi/bind/backends</span><br><span class="line">github.com/ethereum/go-ethereum/contracts/checkpointoracle</span><br><span class="line">github.com/ethereum/go-ethereum/eth/ethconfig</span><br><span class="line">github.com/ethereum/go-ethereum/graphql</span><br><span class="line">github.com/ethereum/go-ethereum/les/checkpointoracle</span><br><span class="line">github.com/ethereum/go-ethereum/eth</span><br><span class="line">github.com/ethereum/go-ethereum/les</span><br><span class="line">github.com/ethereum/go-ethereum/ethstats</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/utils</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/geth</span><br><span class="line">Done building.</span><br><span class="line">Run &quot;./build/bin/geth&quot; to launch geth.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过查看geth版本来确认geth是否已经安装正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./build/bin/geth version</span></span><br><span class="line">Geth</span><br><span class="line">Version: 1.10.2-unstable</span><br><span class="line">Git Commit: 54c0d573d75ab9baa239db3f071d6cb4d1ec6aad</span><br><span class="line">Git Commit Date: 20210325</span><br><span class="line">Architecture: amd64</span><br><span class="line">Go Version: go1.13.8</span><br><span class="line">Operating System: linux</span><br><span class="line">GOPATH=</span><br><span class="line">GOROOT=go</span><br></pre></td></tr></table></figure><h2 id="首次同步以太坊区块数据">首次同步以太坊区块数据</h2><p>查看go-ethereum的readme文档，默认是fast方式同步数据，直接运行<code>geth console</code>即可，因为数据比较大我单独挂载了一个磁盘，所以制定了数据存放的目录<code>--datadic /data/ethereum/node</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./build/bin/geth console --datadir /data/ethereum/node/</span></span><br><span class="line">INFO [03-27|16:25:39.409] Starting Geth on Ethereum mainnet... </span><br><span class="line">INFO [03-27|16:25:39.409] Bumping default cache on mainnet         provided=1024 updated=4096</span><br><span class="line">INFO [03-27|16:25:39.411] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [03-27|16:25:39.411] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [03-27|16:25:39.412] Set global gas cap                       cap=25000000</span><br><span class="line">INFO [03-27|16:25:39.412] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB</span><br><span class="line">INFO [03-27|16:25:39.412] Allocated cache and file handles         database=/data/ethereum/node/geth/chaindata cache=2.00GiB handles=524288</span><br><span class="line">INFO [03-27|16:25:39.504] Opened ancient database                  database=/data/ethereum/node/geth/chaindata/ancient readonly=false</span><br><span class="line">INFO [03-27|16:25:39.504] Writing default main-net genesis block </span><br><span class="line">INFO [03-27|16:25:39.645] Persisted trie from memory database      nodes=12356 size=1.78MiB time=48.710818ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [03-27|16:25:39.645] Initialised chain configuration          config=&quot;&#123;ChainID: 1 Homestead: 1150000 DAO: 1920000 DAOSupport: true EIP150: 2463000 EIP155: 2675000 EIP158: 2675000 Byzantium: 4370000 Constantinople: 7280000 Petersburg: 7280000 Istanbul: 9069000, Muir Glacier: 9200000, Berlin: 12244000, YOLO v3: &lt;nil&gt;, Engine: ethash&#125;&quot;</span><br><span class="line">INFO [03-27|16:25:39.645] Disk storage enabled for ethash caches   dir=/data/ethereum/node/geth/ethash count=3</span><br><span class="line">INFO [03-27|16:25:39.645] Disk storage enabled for ethash DAGs     dir=/home/guozhe/.ethash            count=2</span><br><span class="line">INFO [03-27|16:25:39.646] Initialising Ethereum protocol           network=1 dbversion=&lt;nil&gt;</span><br><span class="line">WARN [03-27|16:25:39.646] Upgrade blockchain database version      from=&lt;nil&gt; to=8</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local header          number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local full block      number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local fast block      number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">WARN [03-27|16:25:39.646] Failed to load snapshot, regenerating    err=&quot;missing or corrupted snapshot&quot;</span><br><span class="line">INFO [03-27|16:25:39.646] Rebuilding state snapshot </span><br><span class="line">INFO [03-27|16:25:39.646] Deleted state snapshot leftovers         kind=accounts wiped=0 elapsed=&quot;47.755µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.647] Deleted state snapshot leftovers         kind=storage  wiped=0 elapsed=&quot;17.809µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.647] Compacting snapshot account area  </span><br><span class="line">INFO [03-27|16:25:39.647] Regenerated local transaction journal    transactions=0 accounts=0</span><br><span class="line">INFO [03-27|16:25:39.650] Wiper running, state snapshotting paused accounts=0 slots=0 storage=0.00B elapsed=&quot;361.935µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.676] Allocated fast sync bloom                size=2.00GiB</span><br><span class="line">WARN [03-27|16:25:39.677] Error reading unclean shutdown markers   error=&quot;leveldb: not found&quot;</span><br><span class="line">INFO [03-27|16:25:39.677] Starting peer-to-peer node               instance=Geth/v1.10.2-unstable-54c0d573-20210325/linux-amd64/go1.13.8</span><br><span class="line">INFO [03-27|16:25:39.741] Initialized state bloom                  items=12356 errorrate=0.000 elapsed=64.036ms</span><br><span class="line">INFO [03-27|16:25:39.817] New local node record                    seq=1 id=0d81eb9b177ba542 ip=127.0.0.1 udp=30303 tcp=30303</span><br><span class="line">INFO [03-27|16:25:39.817] Started P2P networking                   self=enode://dbb9a7d3a1ca59a200c1fa920b2cc467c342182b0f818c491028da1c564391f2cb91f0ce88bb7826264e609aa407dd8544224c0dd3d1a3f6bc449fd063dbdde7@127.0.0.1:30303</span><br><span class="line">INFO [03-27|16:25:39.818] IPC endpoint opened                      url=/data/ethereum/node/geth.ipc</span><br><span class="line">WARN [03-27|16:25:39.858] Served eth_coinbase                      reqid=3 t=&quot;12.338µs&quot; err=&quot;etherbase must be explicitly specified&quot;</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/v1.10.2-unstable-54c0d573-20210325/linux-amd64/go1.13.8</span><br><span class="line">at block: 0 (Thu Jan 01 1970 08:00:00 GMT+0800 (CST))</span><br><span class="line"> datadir: /data/ethereum/node</span><br><span class="line"> modules: admin:1.0 debug:1.0 eth:1.0 ethash:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">To exit, press ctrl-d</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO [03-27|16:25:39.924] Compacting snapshot storage area</span>  </span><br><span class="line">INFO [03-27|16:25:39.924] Compacted snapshot area in database      elapsed=277.624ms</span><br><span class="line">INFO [03-27|16:25:39.924] Resuming state snapshot generation       root=&quot;d7f897…0f0544&quot; accounts=0 slots=0 storage=0.00B elapsed=&quot;9.119µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.996] Generated state snapshot                 accounts=8893 slots=0 storage=409.64KiB elapsed=71.524ms</span><br><span class="line">INFO [03-27|16:25:46.015] New local node record                    seq=2 id=0d81eb9b177ba542 ip=115.171.250.78 udp=52360 tcp=30303</span><br><span class="line">INFO [03-27|16:25:50.847] Looking for peers                        peercount=0 tried=8 static=0</span><br><span class="line">INFO [03-27|16:25:56.124] Block synchronisation started </span><br><span class="line">INFO [03-27|16:26:01.068] Looking for peers                        peercount=0 tried=4 static=0</span><br><span class="line">WARN [03-27|16:26:05.414] Dropping unsynced node during sync       id=46e8efbdd811cf2e conn=dyndial addr=207.148.3.150:30303 type=Geth/v1.9.25-stable-...</span><br><span class="line">INFO [03-27|16:26:11.068] Looking for peers                        peercount=2 tried=15 static=0</span><br><span class="line">WARN [03-27|16:26:12.135] Dropping unsynced node during sync       id=53455744030e83cc conn=dyndial addr=108.61.176.254:30303 type=Geth/v1.9.25-stable-...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看-data-ethereum-node目录">查看<code>/data/ethereum/node</code>目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">总用量 1</span><br><span class="line">drwxrwxrwx 1 root root 472 3月  27 16:28 geth/</span><br><span class="line">srwxrwxrwx 1 root root   1 3月  27 16:25 geth.ipc=</span><br><span class="line">drwxrwxrwx 1 root root   0 3月  27 16:25 keystore/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调用geth的json-rpc接口">调用geth的json-rpc接口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application/json&quot; --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;web3_clientVersion&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&#x27; http://localhost:8545</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何在ubantu上启动go-ethereum客户端&quot;&gt;如何在ubantu上启动go-ethereum客户端&lt;/h1&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装git:&lt;code&gt;sudo apt install git&lt;/code&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-04-01T10:18:57.779Z</published>
    <updated>2021-04-01T10:18:57.779Z</updated>
    
    <content type="html"><![CDATA[<p>ubantu系统下nvidia显卡超频设置</p><p>查看显卡信息：<br><code>nvidia-smi</code></p><p>设置第一个显卡的功率为125w：<br><code>sudo nvidia-smi -i 0 -pl 125</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ubantu系统下nvidia显卡超频设置&lt;/p&gt;
&lt;p&gt;查看显卡信息：&lt;br&gt;
&lt;code&gt;nvidia-smi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置第一个显卡的功率为125w：&lt;br&gt;
&lt;code&gt;sudo nvidia-smi -i 0 -pl 125&lt;/code&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/eth/ubantu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</id>
    <published>2021-04-01T10:18:57.778Z</published>
    <updated>2021-04-01T10:18:57.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubantu如何挂载硬盘：">ubantu如何挂载硬盘：</h1><h2 id="查看已经挂载了哪些">查看已经挂载了哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -l</span></span><br><span class="line">文件系统           1K-块     已用      可用 已用% 挂载点</span><br><span class="line">udev            16362980        0  16362980    0% /dev</span><br><span class="line">tmpfs            3285100     2364   3282736    1% /run</span><br><span class="line">/dev/nvme0n1p7 200537360 18016188 172264740   10% /</span><br><span class="line">tmpfs           16425488   408624  16016864    3% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116    1% /run/lock</span><br><span class="line">tmpfs           16425488        0  16425488    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0         56832    56832         0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1         66432    66432         0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop2         33152    33152         0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop3         52352    52352         0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop4         31872    31872         0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop5        224256   224256         0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/nvme0n1p1     98304    33555     64749   35% /boot/efi</span><br><span class="line">tmpfs            3285096       20   3285076    1% /run/user/125</span><br><span class="line">tmpfs            3285096       92   3285004    1% /run/user/1000</span><br><span class="line">/dev/loop6        101632   101632         0  100% /snap/core/10908</span><br><span class="line">/dev/loop7        435968   435968         0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop8        680192   680192         0  100% /snap/intellij-idea-community/289</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看有哪些">查看有哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo fdisk -l</span></span><br><span class="line">Disk /dev/loop0：55.48 MiB，58159104 字节，113592 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1：64.79 MiB，67915776 字节，132648 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2：32.28 MiB，33841152 字节，66096 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop3：51.4 MiB，53522432 字节，104536 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop4：31.9 MiB，32595968 字节，63664 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop5：218.102 MiB，229629952 字节，448496 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop6：99.22 MiB，104030208 字节，203184 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop7：425.67 MiB，446328832 字节，871736 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/nvme0n1：931.53 GiB，1000204886016 字节，1953525168 个扇区</span><br><span class="line">Disk model: WDC WDS100T2B0C-00PXH0                  </span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：C12B6754-9D12-4F54-92FA-086CE249C548</span><br><span class="line"></span><br><span class="line">设备                 起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/nvme0n1p1       2048     206847    204800   100M EFI 系统</span><br><span class="line">/dev/nvme0n1p2     206848     239615     32768    16M Microsoft 保留</span><br><span class="line">/dev/nvme0n1p3     239616  408449302 408209687 194.7G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p4  408451072  409597951   1146880   560M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p5  409597952 1134321663 724723712 345.6G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p6 1134321664 1543921663 409600000 195.3G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p7 1543921664 1953523711 409602048 195.3G Linux 文件系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda：7.28 TiB，8001563222016 字节，15628053168 个扇区</span><br><span class="line">Disk model: HGST HUS728T8TAL</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：F654D976-A27E-49D1-B0FD-5DCB3914D51D</span><br><span class="line"></span><br><span class="line">设备             起点        末尾       扇区  大小 类型</span><br><span class="line">/dev/sda1          34       32767      32734   16M Microsoft 保留</span><br><span class="line">/dev/sda2       32768  4096032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda3  4096032768  8192032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda4  8192032768 15628050431 7436017664  3.5T Microsoft 基本数据</span><br><span class="line"></span><br><span class="line">分区 1 未起始于物理扇区边界。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop8：664.17 MiB，696426496 字节，1360208 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看想要挂载的硬盘的uuid">查看想要挂载的硬盘的uuid</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br><span class="line">NAME        FSTYPE   LABEL    UUID                                 FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">loop0       squashfs                                                     0   100% /snap/core18/1988</span><br><span class="line">loop1       squashfs                                                     0   100% /snap/gtk-common-themes/1514</span><br><span class="line">loop2       squashfs                                                     0   100% /snap/snapd/11402</span><br><span class="line">loop3       squashfs                                                     0   100% /snap/snap-store/518</span><br><span class="line">loop4       squashfs                                                     0   100% /snap/snapd/11036</span><br><span class="line">loop5       squashfs                                                     0   100% /snap/gnome-3-34-1804/66</span><br><span class="line">loop6       squashfs                                                     0   100% /snap/core/10908</span><br><span class="line">loop7       squashfs                                                     0   100% /snap/pycharm-community/233</span><br><span class="line">loop8       squashfs                                                     0   100% /snap/intellij-idea-community/289</span><br><span class="line">sda                                                                               </span><br><span class="line">├─sda1                                                                            </span><br><span class="line">├─sda2      ntfs     数据     38C09128C090ECFE                                    </span><br><span class="line">├─sda3      ntfs     新加卷   2A9E99709E993573                                    </span><br><span class="line">└─sda4      ntfs     新加卷   C25E9EB25E9E9F2B                                    </span><br><span class="line">nvme0n1                                                                           </span><br><span class="line">├─nvme0n1p1 vfat              2E15-C03F                              63.2M    34% /boot/efi</span><br><span class="line">├─nvme0n1p2                                                                       </span><br><span class="line">├─nvme0n1p3 ntfs              A4AA2056AA2026F0                                    </span><br><span class="line">├─nvme0n1p4 ntfs              FE347AD2347A8D81                                    </span><br><span class="line">├─nvme0n1p5 ntfs     娱乐     E848526348523114                                    </span><br><span class="line">├─nvme0n1p6 ntfs     学习工作 EA1E592A1E58F155                                    </span><br><span class="line">└─nvme0n1p7 ext4              12354a11-9bf9-4882-a202-3e3e675b3158  164.3G     9% /</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如我想要挂载<code>/dev/sda4</code>的uuid为<code>C25E9EB25E9E9F2B</code></p><h2 id="修改-etc-fstab进行挂载">修改<code>/etc/fstab</code>进行挂载</h2><p>参考：<a href="https://blog.51cto.com/13570193/2070157">https://blog.51cto.com/13570193/2070157</a></p><p>比如我的添加了一行：<code>UUID=C25E9EB25E9E9F2B /data ntfs defaults 0 0</code></p><h2 id="重启">重启</h2><h2 id="验证">验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev             16G     0   16G    0% /dev</span><br><span class="line">tmpfs           3.2G  2.3M  3.2G    1% /run</span><br><span class="line">/dev/nvme0n1p7  192G   18G  165G   10% /</span><br><span class="line">tmpfs            16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs            16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       56M   56M     0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1      100M  100M     0  100% /snap/core/10908</span><br><span class="line">/dev/loop2       33M   33M     0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop4       52M   52M     0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop3      426M  426M     0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop5       32M   32M     0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop6       65M   65M     0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop7      219M  219M     0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/loop8      665M  665M     0  100% /snap/intellij-idea-community/289</span><br><span class="line">/dev/nvme0n1p1   96M   33M   64M   35% /boot/efi</span><br><span class="line">/dev/sda4       3.5T  211M  3.5T    1% /data</span><br><span class="line">tmpfs           3.2G   16K  3.2G    1% /run/user/125</span><br><span class="line">tmpfs           3.2G   24K  3.2G    1% /run/user/1000</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ubantu如何挂载硬盘：&quot;&gt;ubantu如何挂载硬盘：&lt;/h1&gt;
&lt;h2 id=&quot;查看已经挂载了哪些&quot;&gt;查看已经挂载了哪些&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读书笔记-《你的第一本保险指南》</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/</id>
    <published>2021-04-01T10:18:21.507Z</published>
    <updated>2021-04-01T10:18:21.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、破除误会，我们真的了解保险吗">1、破除误会，我们真的了解保险吗</h1><h2 id="我们对保险的认识：理赔似乎特别难">我们对保险的认识：理赔似乎特别难</h2><ul><li>发生的事故不在保险范围，不能赔付</li><li>客户未如实告知自身情况，不能赔付</li><li>条款过于严苛，不能赔付</li></ul><h2 id="什么是核保师与健康告知">什么是核保师与健康告知</h2><h3 id="健康告知">健康告知</h3><h4 id="健康告知问询">健康告知问询</h4><ul><li>健康问询：是否有疾病或住院记录等</li><li>职业问询：是否从事高危行业</li><li>生活问询：是否吸烟、酗酒（酒精依赖），是否有极限运动等危险性高的业余爱好等</li></ul><h4 id="核保结论">核保结论</h4><ul><li>结论一：标准体。恭喜，你完美地符合健康告知中的所有要求，可以直接投保，无须做补充告知</li><li>结论二：次标准体。可能有少数几条不符合健康告知，但考虑到基本在可接受范围内，保险公司就“勉为其难”地允许你投保了<ul><li>接受除外责任：保险公司考虑到投保人当前的健康状况，将特定疾病排除在责任范围之外</li><li>增加保费</li></ul></li><li>结论三：延期。保险公司考虑到你的某个健康问题，暂不接受你的本次投保申请，建议过一段时间再来试试</li><li>结论四：拒保</li></ul><h4 id="到底怎么健康告知？">到底怎么健康告知？</h4><p>说实话，当保险公司把重疾险、医疗险这类保障型产品放到网上销售的时候，其实只是想卖给标准体客户。</p><p>至于次标准体和非标准体客户，对不起，这类产品不是为他们准备的。</p><h2 id="买保险一定要返本吗？">买保险一定要返本吗？</h2><h3 id="当你想要返还的时候，你到底想要什么">当你想要返还的时候，你到底想要什么</h3><ul><li>第一，拿回保费。如果没有发生保险事故，请把我交的保费还给我</li><li>第二，获得赔偿。既然我购买了保险，总归是希望能派上用场。</li></ul><h3 id="追求保费返还，切莫因小失大">追求保费返还，切莫因小失大</h3><ul><li>反本保险一般会比不反本（消费型）保险更贵</li><li>在追求保费返还时，想一下自己购买保险的初心：当初你说要买保险的时候，到底是用来做什么的？保费和保额，哪个才是你的初心？</li></ul><h3 id="非要拿到保费，不妨这样选择">非要拿到保费，不妨这样选择</h3><ul><li>提前给付型重疾险：身患重疾或不幸身故，哪个提前发生，都可给付赔偿，但是代价依然是支付更多保费</li><li>保障终身只是保险产品的一个功能设置，而不应被视为一个优点，因为你为此支付了更多的保费</li></ul><h2 id="保险公司会不会破产">保险公司会不会破产</h2><h3 id="保险公司会破产，却不会完蛋">保险公司会破产，却不会完蛋</h3><ul><li>保险公司破产时，人寿保险合同及责任准备金，必须转让给其他经营有人寿保险业务的保险公司</li><li>保险保障基金：来源是81家财险公司和88家寿险公司，保险公司每年需向其缴纳一定数额的资金，这也是被写进《保险法》的强制性要求。</li></ul><h3 id="政府在做的，是拼命预防保险公司破产">政府在做的，是拼命预防保险公司破产</h3><p>一家保险公司从计划成立之初，就不得不接受一系列监管。这些监管措施和规定就像一道道防火墙，确保公司在正确轨道上运转。</p><ul><li>第一道防火墙是极高的公司设立标准</li><li>第二道防火墙是全面科学的偿付能力监管<ul><li>所谓偿付能力，指的是当保险公司遭遇极端情况时，是否仍有能力履行赔付责任。每个年度和季度，保险公司的精算、财务等专业人士都会编制公司偿付能力报告，涉及一系列数学模型和压力测试</li><li>根据偿付能力情况，保险公司会得到从优到差的评级，包括A、B、C、D4个等级。评级可以在保险公司官网的“公开信息查询”栏目查到，我们将它视为判断保险公司是否“靠谱”的一个重要标志。长期来看，只要评级稳定在A和B的公司，我们都可以放心购买其产品</li></ul></li><li>第三道防火墙是频率高、强度大的现场检查<ul><li>监管部门会随时进驻保险公司总公司和分公司，通过调取档案、查询系统等方式实施现场检查</li></ul></li><li>当然，上述的防火墙虽好，如果因为贪污腐败而让保险公司蒙混过关，这是我们无法改变的事情，暂时只能接受</li></ul><h3 id="如何选择一家保险公司？">如何选择一家保险公司？</h3><ul><li>对比不同保险公司的投诉情况</li><li>监管部门每年都会对各家保险公司的投诉情况进行通报、评分，并发布在官网上（比如保监会官网）</li><li>销售人员口碑如何，信息技术实力如何（比如官网和手机软件的使用体验），客服电话能否快速接通，诸如此类</li><li>最重要的是保险产品的性价比</li></ul><h1 id="2、购前指南：买保险的正确方法">2、购前指南：买保险的正确方法</h1><ul><li><p>买保险和吃麦当劳是一样的，保险产品一般都是很多保险组成的。</p></li><li><p>一份保险计划通常由一款主险和若干款附加险构成，主险就像一位大哥，带着一帮作为附加险的小弟。</p><ul><li>这种充分利用和客户接触的机会推销尽可能多的产品，是一种普遍的保险销售模式</li></ul></li><li><p>但是有时候，单点比套餐更好，毕竟保险公司定的产品并非根据我们的需求定，附加险可能并非我们需要的。</p></li></ul><h2 id="责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。">责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。</h2><h3 id="保额：真到用时方恨少">保额：真到用时方恨少</h3><h3 id="期限：从一天到一辈子">期限：从一天到一辈子</h3><h4 id="短期产品">短期产品</h4><ul><li>保险期限不超过一年</li><li>以一年为一期计，产品的定价就要参考当下被保险人的年龄来计算了。30岁时购买，价格可能是100元；5年后，价格可能就会涨到400元。这种随年龄增加而上涨的定价策略，叫作自然费率。客户每年交的钱，只负责承担当年的风险。</li></ul><h4 id="长期产品">长期产品</h4><ul><li>10年、20年甚至终身</li><li>定价方法遵循两个原则：一是均衡费率原则，二是保证费率原则</li><li>均衡费率，指的是保险公司将被保险人未来很长一段时间的风险，归并到一起进行定价，而不只是一年的风险<ul><li>比如，保到70岁或保终身，投保人未来几十年的疾病发生率或者死亡率被累计后算出保费，再按照20年或30年交费的方式进行均摊，价格就确定了</li><li>在这样一种模式下，长期产品的停售只意味着不接受新客户的购买，但并不影响已经投保的客户</li></ul></li><li>保证费率：指的是在你投保的一瞬间，价格便已确定，后期不会增加。对于长期重疾险来说，即使投保人未来的发病率上升，保险公司也不会涨价</li></ul><h4 id="长期产品和短期产品费用比较">长期产品和短期产品费用比较</h4><ul><li>整体来看，购买短期险费用要比长期险费用高</li><li>人到中年，就有可能无法购买短期险</li><li>人到老年，则根本不能购买短期险</li><li>对于已经有长期险庇护的人来说，额外购买一份一年期产品，可以在一定时间内增加保额</li><li>短期险在年轻时比较便宜</li></ul><h3 id="保险产品的价格由谁决定">保险产品的价格由谁决定</h3><h4 id="我们有哪些需求需要保险解决？">我们有哪些需求需要保险解决？</h4><ol><li>得了重疾，有钱治病</li><li>得了重疾，弥补治疗期间的收入</li><li>不幸身故，给爸妈留一笔养老费</li><li>意外受伤，解决医保不包含的费用</li></ol><h4 id="保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划">保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划</h4><h2 id="如何与保险业务员打交道">如何与保险业务员打交道</h2><p>保险公司会不遗余力地增加产品的“人情味”，比如将保险塑造成爱与责任的象征，让你把对子女、父母的爱寄托于保险产品之上，让购买行为更加顺理成章</p><h3 id="保险销售人员到底指的是谁">保险销售人员到底指的是谁</h3><ul><li>第一，保险代理人。全国约800万，他们代表各自所在的保险公司，只销售某一家保险公司的产品。</li><li>第二，保险经纪人。和代理人最大的不同是，经纪人代表的不是某一家保险公司，而是保险中介公司，他们可以销售多家保险公司产品</li><li>第三，银行理财经理</li><li>第四，互联网第三方平台</li></ul><h3 id="和业务员打交道，要遵循两个原则">和业务员打交道，要遵循两个原则</h3><h4 id="想一下我们有时候会不会因为下面的情况而买保险">想一下我们有时候会不会因为下面的情况而买保险</h4><ul><li>第一，卖保险的人是亲戚，抹不开面子，买吧。</li><li>第二，邻居都给孩子买的这个，我也买一个吧</li><li>第三，他答应我把佣金返还给我，省了不少钱，买吧。</li><li>第四，小伙子口才好，人也帅，卖的保险不会差。</li><li>第五，就算被骗一年才损失1000多块钱，买吧</li></ul><p>好面子、从众心理、贪图小便宜、忽略产品的本质，这类问题经常发生，也间接催生了一批不靠谱的保险业务员</p><h4 id="第一个原则：互相尊重，学会提问。">第一个原则：互相尊重，学会提问。</h4><ul><li>条款能给我看一下吗？</li><li>为什么我需要这款产品？</li><li>为什么这类产品你们家的最好？</li><li>能比较一下不同产品吗？</li><li>为什么要保终身？</li><li>为什么这个附加险值得购买？</li><li>如果你发现这位保险业务员面对你提出的一个个问题，要么答不出来，要么逻辑混乱，要么不分青红皂白地敌视及贬损其他保险公司，最好立即更换业务员</li></ul><h4 id="第二个原则：充分信任，要有主见">第二个原则：充分信任，要有主见</h4><h3 id="卖保险简单吗">卖保险简单吗</h3><ul><li><p>产品贵不贵（同类产品的定价和费率对比）？</p></li><li><p>到底有哪些保障（保险责任的解读）？</p></li><li><p>退保能拿到多少保费（保单现金价值的解读）？</p></li><li><p>买完后哪些信息可以修改（对保单保全功能的讲解）？</p></li><li><p>这个产品能实现多高收益（如何计算分红险、万能险、年金等产品的投资收益）？</p></li><li><p>缴费期限怎么选择（现金流贴现原理）？</p></li><li><p>保险条款里有没有所谓的坑（除外责任做重点说明）？</p></li><li><p>遇到纠纷的时候如何处理？</p></li></ul><p>如果他真的做了产品对比，但如果他推销的产品价格没有竞争力，该怎么办？他真的算清楚了产品收益，但客户觉得收益率不如想象的那么高，该怎么办？他真的一条一条地解释清楚除外责任，客户却产生“保险公司推卸责任”的情绪化误解，该怎么办？他因为客户的健康问题而拒绝其投保，之前的工作不就白忙活了吗？<br>这些假设似乎暗示了保险销售人员“能力越强越卖不出去产品”的观点，但我想表达的绝不是“知识无用论”，它们只是在一定程度上反映了当前保险销售领域存在的弊病。而这些极端的例子恰恰凸显了“你”的重要性。</p><h3 id="你的公司给你买保险了吗">你的公司给你买保险了吗</h3><h4 id="企业团体保险">企业团体保险</h4><p>团险通常由4个保险产品组成：</p><ul><li>定期寿险</li><li>重大疾病险</li><li>意外险</li><li>医疗险</li></ul><p>团险计划可以涵盖以下责任：</p><ol><li>罹患重大疾病：保额50万元（重大疾病险的重疾责任50万元）。</li><li>疾病导致身故：保额50万元（定期寿险身故责任50万元）。</li><li>意外导致身故：保额150万元（定期寿险身故责任50万元+意外险身故责任100万元）。</li><li>门诊责任：保额2万元（医疗险包含的门急诊医疗责任2万元）。</li><li>住院责任：保额30万元（医疗险包含的住院医疗责任30万元）。</li></ol><p>团险价格之所以“亲民”，主要原因如下：</p><ul><li>第一，团险可以简单类比为团购，买的人数多，节省了一部分管理成本，自然就能获得一定的优惠</li><li>第二，团险的主要销售对象是企业人力资源部，只要负责人拍板，100个员工就直接购买了，不用一个一个地宣传、介绍，间接降低了产品的销售费用，最终的实惠落在了每一位参保员工身上</li><li>第三，以企业名义投保，参保人员的工作环境和性质相对一致，外部风险可控，何况不少企业还有入职体检，可以很好解决客户的逆选择和健康问题</li></ul><h4 id="团险带来的“保险幻觉”">团险带来的“保险幻觉”</h4><p>一般公司团险的保险产品的保障期限都是一年，如果完全依赖公司保险，我们一旦离职就会面临保险“裸奔”的情况<br>所以，建议大家用客观的态度看待公司为员工购买的团险。它是一种极好的员工福利，它应该是员工自身已购保险的有力补充，却不能被当作全部。</p><h4 id="了解公司的团险政策">了解公司的团险政策</h4><ul><li>这份团险计划里有涵盖身故责任的产品吗？</li><li>如果有，保额是多少？</li><li>如果员工获得晋升，保额会随之提高吗？</li></ul><h1 id="03-重点关注：中产必备的“四大保险金刚”">03 重点关注：中产必备的“四大保险金刚”</h1><h2 id="重大疾病险：为了不被改变的人生">重大疾病险：为了不被改变的人生</h2><p>重疾险的诞生，本质上是为了解决收入中断的风险，站在患者及其家人的角度，为已在重病深渊的家庭提供雪中送炭般的经济补偿</p><h3 id="重疾险究竟保什么">重疾险究竟保什么</h3><h4 id="什么叫“重大疾病”？">什么叫“重大疾病”？</h4><p>保监会安排中国保险行业协会和中国医师协会，在2007年拿出了一版25种重疾标准，囊括所有高发重疾类型（其实，只要是重疾险就都包括这25种）</p><p>保监会设定的这25种重大疾病，其发生概率超过95%的疾病种类。</p><p>所以如果一个保险说他包含更多的重疾，然后让我们多花钱买它，其实没有太必要。</p><h4 id="什么叫“罹患”？">什么叫“罹患”？</h4><ul><li>第一，病情达到某个标准，相当于确诊即赔，比如恶性肿瘤</li><li>第二，投保人为治疗某种疾病而接受了某种治疗方法。比如心脏瓣膜手术</li><li>第三，某种状态持续了一段时间。比如脑中风后遗症</li></ul><h3 id="除了重大疾病，重疾险还保这些">除了重大疾病，重疾险还保这些</h3><p>当重疾险的责任只有重大疾病时，消费者理所当然地提出了一个振聋发聩的问题：如果我一辈子没得重疾，这保费岂不是白交了？</p><p>好，为了不让你白交，保险公司索性增加了很多其他责任，<strong>“顺便”提升了保费</strong>。买卖双方都高兴，这种商业模式堪称完美。</p><ul><li>在新增的责任里，第一类是“身故责任”。这种包含身故责任的重疾险，基本上都可以“提前给付”。<ul><li>这里的提前指的是重疾、身故二者中哪个先发生，就给付哪个。</li><li>提前给付不过是一种产品设计罢了，千万别觉得它是一项独特的优势。</li></ul></li><li>第二类新增责任是轻症和中症责任</li><li>第三类新增责任是针对重大疾病的花样赔付方式。比如重疾和轻症可以赔付多次，又比如挑出某几个病种额外赔付50%的保额，再比如投保后前10年享受保额额外增加50%。</li></ul><p>上面说的这些都是在<strong>增加保费的基础上</strong>增加了更多的责任，所以当保险公司说我们保的多的时候除非和别人价格一样，否则只是在骗我们花更多钱而已。</p><h3 id="重疾险的保额及其他">重疾险的保额及其他</h3><h4 id="如何确定保额">如何确定保额</h4><ul><li>患重疾后，患者普遍面临的是3~5年的治疗康复期</li><li>与此同时，重疾导致收入中断将为家庭带来更大的压力</li><li>因此，重疾险的<strong>保额应至少覆盖投保人3~5年的收入</strong></li><li>如年收入20万元的保额应该在60万以上</li><li>而且只要确保这款重疾险能提供60万元的重疾保额，有没有身故责任、多次赔付、投保人豁免，都无关紧要</li></ul><h4 id="重疾险应该保障多久和交多少年保费。">重疾险应该保障多久和交多少年保费。</h4><p>讨论这个问题有一个前提：我们选择的是长期产品。</p><p>对于重疾险、定期寿险，可以保终身或者保到70岁左右的长期产品，是我们的首选——不仅价格更划算，也不会出现保险中断的情况。</p><p>长期重疾险的<strong>缴费期</strong>往往有多种选择：</p><ul><li>趸交（一次性交完）</li><li>10年交</li><li>20年交</li><li>少数产品甚至还设计了30年交</li></ul><p><strong>保障期限</strong>：</p><p>保障期限的延长，会带来保费的升高；没办法，一个人年龄越大，罹患重疾的概率就越高。如果预算充足，保终身当然是最好的选择。</p><p>在确保保额充足的情况下，我们可以把保额拆成两个产品来实现，一个保到退休，另一个保终身</p><p>如：对于需要60万元重疾险保额的小王来说，可以选择买<strong>一份保终身的30万元保额</strong>的重疾险，再买<strong>一份保到70岁的30万元保额</strong>的重疾险。这比直接购买一份保终身的60万元保额的重疾险，花费更少</p><h2 id="定期寿险：解决人生中最大的风险">定期寿险：解决人生中最大的风险</h2><h3 id="谁适合买寿险">谁适合买寿险</h3><p>如果说重疾险的赌注是病，寿险的赌注就是命。定期寿险赌的则是一段时间的命。比如投保人于30年内身故，受益人即可获得理赔款。</p><p>一般的定期寿险，除了保障身故，还会把全残也视作与身故等同的责任。</p><ul><li>单身的人理应关心父母的养老问题</li><li>新婚的人会增加对另一半的考虑</li><li>有了孩子后，责任更重</li></ul><h4 id="意外险和寿险对比">意外险和寿险对比</h4><p>这里需要额外强调一点。谈到身故风险，很多人会联想到意外险，因为它不是也有身故保障吗？</p><p>“疾病”和“意外”为占比最大的两类死亡原因，分别为79.3%和18.9%。</p><p>所以，单纯购买意外险，是无法解决身故的风险的。</p><h3 id="如何选购定期寿险？">如何选购定期寿险？</h3><h4 id="确定保额是关键性的第一步">确定保额是关键性的第一步</h4><p>保额的高低，决定了投保人身故后他的妻子、父母或者孩子能拿到多少补偿。定期寿险的保额，主要取决于三个因素。</p><ul><li>一是个人和家庭的债务额度，比如房贷、车贷等，确保一方身故后，债务不转嫁到另一方或父母身上</li><li>二是家庭成员的基本生活成本。如果家庭每年的开销为20万元，那么身故理赔金至少应为100万元，以负担家庭未来5—10年的基本生活开销。</li><li>三是父母的养老支出，这笔费用的计算逻辑和上一个类似。</li></ul><h4 id="定期寿险还要考虑的问题是保障期限">定期寿险还要考虑的问题是保障期限</h4><p>到底要保到多大年龄呢？我个人建议，以退休年龄为标准，60岁或70岁皆可。</p><p>至于缴费年限的选择，我建议尽可能拉长，20年交或30年交皆可。缴费年限越长，年均保费越低，从而做到用尽可能少的钱去撬动尽可能高的保额。</p><h4 id="保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：">保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：</h4><ul><li>第一，核保是否宽松。这是最重要的，因为如果健康告知非常严格，想买也买不了，何谈其他？比如，有的定期寿险不接受乙肝小三阳患者，有的不接受高危职业从业者。所以我们一定要弄清楚投保要求再买，尽量避免理赔时的潜在纠纷，才能真正做到安心。</li><li>第二，除外责任多不多。前文在分析如何阅读保险条款的时候，专门强调要关注除外责任。比如，有的定期寿险明确指出，因为战争、军事暴乱导致的死亡，它们概不负责。那么，对于去中东、非洲等地区旅游或工作的中国人来说，这种定期寿险就得慎重考虑购买了。</li><li>第三，价格低不低。如果上面几条标准比较起来都差不多，问题就变简单了：哪个产品便宜就选择哪个。</li></ul><h2 id="商业医疗险：让高额医疗开支不再可怕">商业医疗险：让高额医疗开支不再可怕</h2><h3 id="社会医疗保险">社会医疗保险</h3><p>在用医保卡看病的过程中，我们都接触过一些陌生的名词，比如起付线、药品目录、自费药、报销额度等。</p><ul><li>起付线：的意思是，每年只有花到一定金额，才能开始报销，否则就都是自费</li><li>药品目录：指的是在医保系统中，对于医疗机构开具的药品做了不同分类，不同类型的药品报销额度也不一样，有的可全部报销，有的则只可报销一部分，还有的药全部要自费购买</li><li>销额度很好理解，即使药品、治疗等都在报销范围内，医保也不是无限制的报销，整体来看，每年的报销额度范围为20万~30万元；对于罹患重大疾病的患者来说，这一额度根本无法满足他们长期、昂贵的治疗需求。</li></ul><h3 id="医保不管的，让商业医疗保险来管">医保不管的，让商业医疗保险来管</h3><p>医疗险其实只包括两种产品</p><h4 id="第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险">第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险</h4><p>这种产品保额不高，一般是几千元。有的门诊医疗保险会设置一个免赔额，比如单次100元或者累计500元。免赔额和政府医保起付线是同一个概念，都是为了减少理赔支出，实际上也起到了降低保费的作用。</p><h4 id="第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。">第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。</h4><p>这类产品的保额就高多了，几十万元甚至上百万元都很常见。和门诊医疗保险相比，住院医疗保险是下文要重点介绍的产品。</p><p>能被称作风险的，必然意味着财务上的巨大影响。所以和几十万甚至上百万元的医疗支出相比，几千元的门诊、住院费用，真的称不上风险。</p><h3 id="买了重疾险，还要买医疗险吗">买了重疾险，还要买医疗险吗</h3><h4 id="重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样">重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样</h4><ul><li><p>重疾险有点儿像一锤子买卖，只要符合条款规定，保险公司就会把理赔款一次性打给你，无论是几万元还是几十万元。</p></li><li><p>商业医保就不一样了，花多少才能赔多少，保额仅代表可报销额度的上限，而你不一定能花掉这么多钱</p></li></ul><p>如果一个人罹患影响正常生活的重大疾病，那他主要面临的问题有两个：一是治疗费用太高，掏空家底；二是无法继续工作，失去收入。前者可以靠商业医疗保险解决，后者则只能靠重疾险解决，两类保险的功能不一样。</p><h4 id="重疾险和商业医疗保险在定价方面的区别">重疾险和商业医疗保险在定价方面的区别</h4><p>长期重疾险每年的保费是恒定的，商业医疗保险的保费则会随着被保险人年龄的增加而上调</p><h4 id="重疾险和商业医疗保险在续保方面的区别">重疾险和商业医疗保险在续保方面的区别</h4><p>目前市场上大多数医疗险都是一年期产品，如果第二年你想继续投保，得先看看保险条款是怎么规定的，通常有以下两种情况：</p><ul><li>第一种是，卖不卖给你，我说了算。投保人的续保申请须经保险人审核同意，投保人申请续保时，保险人有权对费率进行调整。</li><li>第二种规定是，只要这个产品还在销售，保险公司就肯定会卖给你。连续投保时，保险人不会因为某一被保险人的健康状况变化或历史理赔情况而单独调整该被保险人的连续投保费率。</li></ul><h2 id="意外险：不容忽视的“小”保险">意外险：不容忽视的“小”保险</h2><h3 id="意外险保什么、不保什么">意外险保什么、不保什么</h3><p>遭受外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件。自然死亡、疾病身故、猝死、自杀及自伤均不属于意外伤害。</p><p>在每份意外险的保险条款里，你都能看到这样的描述。这段话表达了两层意思：</p><ul><li><p>第一，外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件，属于意外；</p></li><li><p>第二，自然死亡、疾病身故、猝死、自杀及自伤，不属于意外。</p></li></ul><p>除了猝死，意外险还有一些“不保”：</p><ul><li>意外险通常不保高危职业从业者</li><li>除了特定人群“不保”，还有某类地区“不保”。关于意外医疗责任，保险条款中往往会有一个补充描述：只承担中华人民共和国国境内（不包括港澳台地区）医院产生的医疗费用和支出。</li><li>最后一个“不保”，是某些行为不保。被保险人从事潜水、跳伞、攀岩运动、探险活动、武术比赛、摔跤比赛、特技表演、赛马、赛车等高风险活动期间发生的意外，不在意外险的责任范围内</li></ul><h3 id="配置意外险的几条原则">配置意外险的几条原则</h3><h4 id="原则一：必须涵盖意外医疗责任。">原则一：必须涵盖意外医疗责任。</h4><p>意外导致的结果无非两种：伤残和死亡。因此，意外险保障的责任有三个必选项：身故、伤残、医疗。</p><p>意外受伤后，我们最大的需求就是医疗费用补偿。考虑到很多意外产生的医疗费用医保都无法报销，意外险的医疗责任就更重要了。</p><p>至于意外医疗的保额，一两万就足够了。如果是一两万元都治不好的意外受伤，一定已经严重到需要做手术或者长期住院治疗了，这时理赔的责任就可以交给上文提到的住院医疗保险了。</p><p>另外，你可能听说过住院津贴或住院保险金，它的作用是，投保人每住一天院，保险公司就会支付给他几百元钱，主要是为了弥补住院期间的收入损失，颇为贴心，本质上也属于意外医疗的责任范围。住院津贴属于锦上添花型保险，而且要花钱购买，所以有没有都无所谓。</p><h4 id="原则二：一般意外身故的保额应足够高。">原则二：一般意外身故的保额应足够高。</h4><p>在这里我要提醒大家注意某些保险公司的“套路”。当你看到一个类似于“百万身价意外险”的打折产品时，请一定弄清楚它所说的百万身价到底是什么意思。举个例子，有个产品页面是这么描述该产品的：</p><ul><li><p>一般意外身故：10万元</p></li><li><p>航空意外身故：100万元</p></li></ul><p>我更喜欢以下这类保险：</p><ul><li><p>一般意外身故：100万元</p></li><li><p>航空意外身故：200万元</p></li></ul><h4 id="原则三：不同人群的意外险，侧重点不一样。">原则三：不同人群的意外险，侧重点不一样。</h4><ul><li><p>对于职场白领来说，意外险既要有足够的身故补偿（用于弥补家庭经济损失），也要保证受伤后有钱治疗；</p></li><li><p>但对于孩子和老人来说，身故补偿就没有医疗费用补偿重要，毕竟他们不是家里的顶梁柱。</p></li><li><p>因此，孩子和老人的意外险，应侧重于考虑提升意外医疗的保额，而没有必要追求意外身故的高保额。</p></li></ul><h4 id="原则四：保障时间一年就够了。">原则四：保障时间一年就够了。</h4><p>之前在介绍一年期产品特征的时候我提过，意外险和医疗险大多会设计成短期险，这样一来，就可以随时按照意外发生率和医疗成本的波动进行价格调整。因此，每年各家公司的意外险层出不穷，可能去年买的产品，到了明年就没什么竞争力了，这时直接换一家公司购买就好。由于意外险的几个基本责任都没有等待期这一说，所以可以做到无缝衔接。</p><h1 id="04-优化配置：给保险升个级">04　优化配置：给保险升个级</h1><h2 id="像有钱人一样看病">像有钱人一样看病</h2><h3 id="高端医疗，高端在哪里？">高端医疗，高端在哪里？</h3><ul><li>第一，保额更高。几十万元甚至几百万元的保额都是小菜一碟，从几千万元到不设限，高端医疗的保额完全超乎你的想象。</li><li>第二，医院更多、更高端。从三甲医院的特需部、国际部，到私立医院、国际医院，而且不限中国地区，从亚太地区到全球，基本覆盖所有类型的医疗机构。</li><li>第三，保障更全面。除了传统的门诊、住院两大块之外，高端医疗险还包含分娩、牙科、眼科、体检等责任，要知道，这些治疗通常都在常规医疗险的除外项目里，一般医疗险都不管。</li><li>第四，增值服务更多。</li><li>第五，理赔体验更好。</li></ul><h2 id="保险能为我的养老做什么？">保险能为我的养老做什么？</h2><h3 id="该不该买养老保险？">该不该买养老保险？</h3><h3 id="可不可以把保险当作投资方式">可不可以把保险当作投资方式</h3><p>要回答上面两个问题，需要使用excel中的IRR公式计算内部收益率，如果内部收益率能够达到预期并且现在手头有钱就可以买。</p><p>比如年复利6%以上就能达到预期，否则不如买债券基金或者指数型基金。</p><h2 id="该去香港买保险吗？">该去香港买保险吗？</h2><p>略</p><h1 id="05-个性化定制：保险方案，你自己说了算">05 个性化定制：保险方案，你自己说了算</h1><h2 id="如何给孩子买保险">如何给孩子买保险</h2><h3 id="先别着急买商业保险">先别着急买商业保险</h3><p>和大人一样，孩子也是可以参加政府医保的。在配置商业保险之前，父母一定要参考当地的医保政策为孩子办理少儿医保。</p><p>少儿医保本质上是针对儿童罹患重大疾病提供的风险保障。</p><p>有没有医保也会影响孩子投保商业保险的价格。尤其是医疗险，被保险人有医保的医疗险价格更低。</p><h3 id="孩子会面临哪些风险">孩子会面临哪些风险</h3><ul><li>风险一：身患危重疾病<ul><li>孩子一旦患危重疾病，除了需要长期投入高额治疗费用，父母也可能为了照顾孩子而辞掉工作。</li><li>因此，重疾险和高保额住院医疗险是应该首先为孩子配置的保险。</li><li>重疾险的价值在于，罹患重疾后一次性获得定额赔偿，可作为自费治疗费用和家庭收入中断的补偿。</li><li>高额住院医疗险的价值在于应对高额的医疗费用，尤其是许多医保范围外的自费项目</li></ul></li><li>风险二：发生意外受伤</li><li>风险三：身患一般疾病</li></ul><h3 id="配置儿童商业保险">配置儿童商业保险</h3><h4 id="孩子不该买哪些保险">孩子不该买哪些保险</h4><ul><li>包含身故责任的意外险不在我们的讨论范围内</li><li>定期寿险、终身寿险也无需购买</li><li>除意义不大的身故责任外，为孩子购买教育金、养老金，优先级也不高</li></ul><p><strong>孩子真正需要的商业保险其实只有三款：重大疾病险、意外险、高额住院医疗险。</strong></p><h4 id="关于孩子的重疾险">关于孩子的重疾险</h4><p>请记住一个事实：少儿罹患重大疾病的概率非常低。这直接决定了儿童重疾险的价格十分便宜。因此，为孩子配置重疾险，一定要抓住价格优势，尽可能提高保额，拉长期限。都是100万元的终身重疾险保额，30多岁男性的购买价格，可以达到小孩子的两倍多。</p><p>孩子的重疾险应该买保终身或者70岁的，不要买保障30年，三十年之后孩子才三、四十岁，那时断保再新买保险会更贵。</p><h4 id="孩子最好的保险是父母">孩子最好的保险是父母</h4><p>父母自身的健康以及稳定、持续的赚钱能力，是孩子最重要的保险。</p><p><strong>总结一下为孩子配置保险的几个关键点。</strong></p><ol><li><p><strong>作为父母，先把自己的保险配置好，因为你才是孩子最大的“保险”；</strong></p></li><li><p><strong>在购买任何商业保险之前，先为孩子办理好当地的少儿医保，这是政府给予的福利，一定要充分利用；</strong></p></li><li><p><strong>结合自身预算，首先配置高保额的重大疾病险和住院医疗险，其他的保险则量力购买。</strong></p></li></ol><h2 id="如何给父母买保险">如何给父母买保险</h2><h3 id="一个不断妥协退让的过程">一个不断妥协退让的过程</h3><p>其实父母面临的风险非常简单，就是疾病引发的财务风险。</p><p>这样看来，给父母配置保险，主要考虑的应该是重疾险、医疗险和意外险。</p><p>年龄超过60岁的人想要投保重疾险和医疗险会有很多限制：</p><ul><li>第一，年龄限制。<ul><li>几乎所有重疾险和医疗险的投保年龄都在0~60岁。对重疾险而言，55岁的投保年龄上限是普遍规则。</li></ul></li><li>第二，保额限制。<ul><li>同样一份保险，30岁的人和50岁的人可享受的保额上限是不一样的。</li><li>以重疾险为例，如果在网上直接投保，30岁的被保险人的保额上限基本为50万~60万元，而50岁的被保险人的保额上限只有10万元。</li></ul></li><li>第三，保费倒挂。<ul><li>一位55岁的男性购买保额为10万元的重疾险，每年需要交3500元左右，交20年，总计7万元的支出和10万元的保额相比，差别不大。</li></ul></li><li>第四，健康告知不符。<ul><li>患有高血压、心脏病、糖尿病的老年人，可以直接和重大疾病险、住院医疗险说再见了</li><li>保险公司也意识到了这个问题，于是想了一个办法：双方各退一步。保险公司把保障范围缩小，限制也随之减少。但这个保障范围不能太小，得有存在的意义。</li><li>于是，防癌类保险应运而生。重疾险涵盖的几十种疾病，只保留第一项，即恶性肿瘤；住院医疗险涵盖的所有疾病的住院责任，也只保留一项，即癌症住院责任。</li><li>这种做法最大的好处，就是健康告知的内容大幅减少。只要不是易引发癌症的症状（肝部疾病、器官或组织的结节等），保险公司都不介意，高血压、糖尿病患者也可以投保。毕竟，高血压导致的急性心梗和糖尿病导致的终末期肾病或截肢，都不在防癌类保险的责任范围内。</li></ul></li></ul><h3 id="六分靠规划，四分靠心态">六分靠规划，四分靠心态</h3><p>哪怕有那么多的限制，我们还是可以购买意外险、防癌险、防癌医疗险和糖尿病特定疾病重疾险。</p><h4 id="如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。">如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。</h4><ul><li><p>第一，确保父母双方都有社会医疗保险。不管是城市的居民医保，还是农村的“新农合”，没有的话，赶紧先把社会医保办好。</p></li><li><p>第二，遇到疑难杂症，不少人会选择带父母来北上广等大城市就诊。所以，请提前研究好医保的异地结算流程，确保不让医保“白交”，这一点非常有必要。</p></li><li><p>第三，详细了解爸妈的身体健康情况，对症下药买保险。</p></li></ul><h2 id="如何给自己买保险">如何给自己买保险</h2><h3 id="18岁保险清单">18岁保险清单</h3><ul><li>学生团体保险：包含意外身故/伤残责任，意外医疗责任，住院医疗责任；预算为200元。</li><li>或自己投保：<ul><li>意外险：包含意外身故/伤残责任，意外医疗责任；预算为200元（保额为50万元）。</li><li>医疗险：包含疾病导致的住院医疗责任，预算为200元。</li></ul></li></ul><h4 id="18岁保障速览">18岁保障速览</h4><ul><li><p>身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="22岁新增保险情况">22岁新增保险情况</h3><p>定期寿险A：受益人为父母，保额大约相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p><h4 id="保障速览">保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：50万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="28岁新增保险情况"><strong>28岁</strong>新增保险情况</h3><ul><li><p>定期寿险B：受益人为法定受益人，保额约等于5倍年薪；</p></li><li><p>预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>重大疾病险A：保额约等于购买时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。</p></li></ul><h4 id="28岁保障速览">28岁保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：50万元。</p></li></ul><h3 id="32岁新增保险情况"><strong>32岁</strong>新增保险情况</h3><ul><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。（有房贷才买）</p></li><li><p>重大疾病险B：提升重疾保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li></ul><h4 id="32岁保障速览"><strong>32岁</strong>保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：150万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：80万元。</p></li></ul><h3 id="34岁"><strong>34岁</strong></h3><ul><li><p>意外险：包含意外身故/伤残责任，意外医疗责任；预算为每年200元（保额50万元）。</p></li><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>医疗险：包含疾病导致的住院医疗责任；预算为每年200元。定期寿险A：受益人为父母，保额相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p></li><li><p>定期寿险B：受益人为法定受益人，保额相当于自己5倍的年薪。预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。</p></li><li><p>定期寿险D：受益人为子女，保额相当于孩子5年的生活费；预算为每年4000元（保额100万元，保到60岁，缴费期20年）。</p></li><li><p>重大疾病险A：保额相当于自己当时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。重大疾病险B：提升重疾险保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li><li><p>养老保险（60岁领取）：预算为每年60000元（每月5000元）。</p></li></ul><p>给自己买保险，不能一蹴而就，应随着人生进入不同阶段而分步实施。在这个过程中，我们需要对自己的情感进行再分配，说到底就是，回答“为谁买保险”的问题。比如，涉及医疗补偿的保险（如住院医疗险、重大疾病险），是为了让自己不至于被疾病掏空腰包；再比如，涉及身故补偿的保险（如定期寿险、意外险），是为了让家人能够继续维持原来的生活水准。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、破除误会，我们真的了解保险吗&quot;&gt;1、破除误会，我们真的了解保险吗&lt;/h1&gt;
&lt;h2 id=&quot;我们对保险的认识：理赔似乎特别难&quot;&gt;我们对保险的认识：理赔似乎特别难&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发生的事故不在保险范围，不能赔付&lt;/li&gt;
&lt;li&gt;客户未如实告知自身</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://guozhe001.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://guozhe001.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="保险" scheme="https://guozhe001.github.io/tags/%E4%BF%9D%E9%99%A9/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习踩坑记录</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-01T10:18:21.506Z</published>
    <updated>2021-04-01T10:18:21.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradle学习踩坑记录">gradle学习踩坑记录</h1><p>最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令<code>./gradlew clean build</code>时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not target platform: &#x27;Java SE 11&#x27; using tool chain: &#x27;JDK 8 (1.8)&#x27;</span><br></pre></td></tr></table></figure><p>原因是因为我本地的JAVA_HOME配置的JDK版本是1.8，但是项目中指定的编译版本为Java11：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">targetCompatibility = JavaVersion.VERSION_11</span><br></pre></td></tr></table></figure><p>解决方式是在项目的根目录下新建gradle.properties文件，并写入以下配置，问题解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.gradle.java.home</span> = <span class="string">/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home</span></span><br></pre></td></tr></table></figure><p>gradle的<a href="https://www.jetbrains.com/help/idea/gradle-jvm-selection.html#jdk_existing_project">官方文档</a>解释如下：</p><h3 id="Resolve-the-Gradle-JVM-version-for-the-existing-project">Resolve the Gradle JVM version for the existing project</h3><ol><li>IntelliJ IDEA checks the <code>gradle.properties</code> file for the appropriate Gradle JVM specified in <code>org.gradle.java.home</code> and uses it for the project.</li><li>Then it checks the <code>JAVA_HOME</code> environment variable.</li><li>Then it checks the closest appropriate JDK version for the existing Gradle version.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gradle学习踩坑记录&quot;&gt;gradle学习踩坑记录&lt;/h1&gt;
&lt;p&gt;最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令&lt;code&gt;./gradlew clean build&lt;/code&gt;时报错如下：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew配置为国内镜像</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</id>
    <published>2021-04-01T10:18:21.505Z</published>
    <updated>2021-04-01T10:18:21.505Z</updated>
    
    <content type="html"><![CDATA[<p>本人的Mac电脑按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站</a>的设置时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">fatal: cannot change to &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&#x27;: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案是先change到对应的目录下，在执行替换脚本，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd $(brew --repo homebrew/core)</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h2 id="卸载homebrew">卸载homebrew</h2><p>执行卸载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br></pre></td></tr></table></figure><p>如果报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>需要配置一下host；去往<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>，输入<a href="https://raw.githubusercontent.com">raw.githubusercontent.com</a>查看ip地址，然后配置host之后重试。</p><h2 id="安装bash-completion">安装bash_completion</h2><p>卸载homebrew后发现自动补全的功能也没有了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi awk: can&#x27;t open file /usr/local/etc/bash_completion</span><br></pre></td></tr></table></figure><p>解决方法是重新安装homebrew后，安装bash-completion：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-completion</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人的Mac电脑按照&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/&quot;&gt;清华大学开源软件镜像站&lt;/a&gt;的设置时报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Homebrew" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Homebrew/"/>
    
    
    <category term="Homebrew" scheme="https://guozhe001.github.io/tags/Homebrew/"/>
    
    <category term="Mac" scheme="https://guozhe001.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令记录</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-01T10:18:21.505Z</published>
    <updated>2021-04-01T10:18:21.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar-解压，压缩，帮助：tar-h">tar(解压，压缩，帮助：tar -h)</h2><p>解压，<code>-C</code>标签指定解压到哪个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf -C ./test</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf &lt;archive-filename&gt; [filenames...]</span><br></pre></td></tr></table></figure><h2 id="shasum（hash，帮助shasum-h）">shasum（hash，帮助shasum -h）</h2><p>生成hash，<code>-a</code>标签指定使用哪个算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 README.md</span><br></pre></td></tr></table></figure><h2 id="修改终端显示，不显示用户名和电脑名称">修改终端显示，不显示用户名和电脑名称</h2><p>修改<code>/etc/bashrc</code>：PS1='\w $ ’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> more /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System-wide .bashrc file <span class="keyword">for</span> interactive bash(1) shells.</span></span><br><span class="line">if [ -z &quot;$PS1&quot; ]; then</span><br><span class="line">   return</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PS1=<span class="string">&#x27;\h:\W \u\$ &#x27;</span></span></span><br><span class="line">PS1=&#x27;\w \$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make bash check its window size after a process completes</span></span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line">[ -r &quot;/etc/bashrc_$TERM_PROGRAM&quot; ] &amp;&amp; . &quot;/etc/bashrc_$TERM_PROGRAM&quot;</span><br></pre></td></tr></table></figure><p>其他参数：</p><ul><li>\d ：代表日期，格式为weekday month date，例如：“Mon Aug 1”</li><li>\H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux</li><li>\h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略</li><li>\t ：显示时间为24小时格式，如：HH：MM：SS</li><li>\T ：显示时间为12小时格式\A ：显示时间为24小时格式：HH：MM</li><li>\u ：当前用户的账号名称\v ：BASH的版本信息</li><li>\w ：完整的工作目录名称。家目录会以 ~代替</li><li>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</li><li># ：下达的第几个命令</li><li>$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</li></ul><h3 id="crontab（定时任务-man-crontab）">crontab（定时任务,man crontab）</h3><ul><li>查看：<code>crontab -l</code></li><li>编辑：<code>crontab -e</code></li></ul><p>crontab配置举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天十点30分执行hello.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分 时 日 月 星期 <span class="built_in">command</span></span></span><br><span class="line">30 10 * * * ～/hello.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tar-解压，压缩，帮助：tar-h&quot;&gt;tar(解压，压缩，帮助：tar -h)&lt;/h2&gt;
&lt;p&gt;解压，&lt;code&gt;-C&lt;/code&gt;标签指定解压到哪个目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="shell" scheme="https://guozhe001.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令记录</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-01T10:18:21.504Z</published>
    <updated>2021-04-01T10:18:21.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker命令">docker命令</h2><h3 id="删除本地所有没有被使用的卷：">删除本地所有没有被使用的卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>WARNING! This will remove all local volumes not used by at least one container.</p><h3 id="查看本地的所有卷：">查看本地的所有卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="删除某个volume卷">删除某个volume卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm docker_orderer.supply.com</span><br></pre></td></tr></table></figure><h3 id="查看所有的容器，包括没有运行中的">查看所有的容器，包括没有运行中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看某个容器的日志">查看某个容器的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs ead00b30e8ec</span><br></pre></td></tr></table></figure><h3 id="停止容器">停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm ead00b30e8ec 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="进入docker容器">进入docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="修改容器的环境变量">修改容器的环境变量</h3><p>在配置docker-compose某个容器的环境变量时出现了错误，但是容器已经运行了，如果重新运行则数据会丢失。所以需要修正此环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#Generic</span> <span class="string">peer</span> <span class="string">variables*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">the</span> <span class="string">following</span> <span class="string">setting</span> <span class="string">starts</span> <span class="string">chaincode</span> <span class="string">containers</span> <span class="string">on</span> <span class="string">the</span> <span class="string">same*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">bridge</span> <span class="string">network</span> <span class="string">as</span> <span class="string">the</span> <span class="string">peers*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">https://docs.docker.com/compose/networking/*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=_test</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG*</span></span><br></pre></td></tr></table></figure><p>如要修改<code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code>为<code>docker_test</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入容器</span></span><br><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改环境变量</span></span><br><span class="line">echo &quot;export CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test&quot; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新启动容器即可</span></span><br></pre></td></tr></table></figure><h3 id="查看docker启动的网络">查看docker启动的网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="docker-compose命令">docker-compose命令</h2><h3 id="使用docker-compose启动docker镜像">使用docker-compose启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --f 指定文件, -d指定后台运行</span></span><br><span class="line">docker-compose --f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose启动指定的名称的容器">使用docker-compose启动指定的名称的容器</h3><p>在一个<code>docker-compose.yaml</code>配置文件下可能有多个<code>serevice</code>，可以指定名称来启动其中的一个，命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up ca-tls</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker命令&quot;&gt;docker命令&lt;/h2&gt;
&lt;h3 id=&quot;删除本地所有没有被使用的卷：&quot;&gt;删除本地所有没有被使用的卷：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Docker" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Docker/"/>
    
    
    <category term="Docker" scheme="https://guozhe001.github.io/tags/Docker/"/>
    
    <category term="docker-compose" scheme="https://guozhe001.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Gradle常用命令记录</title>
    <link href="https://guozhe001.github.io/2021/04/01/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://guozhe001.github.io/2021/04/01/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-04-01T10:18:21.504Z</published>
    <updated>2021-04-01T10:18:21.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle常用命令记录">Gradle常用命令记录:</h2><h4 id="运行gradle-help-task-someTask来显示帮助，如：">运行<code>gradle help --task someTask</code>来显示帮助，如：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew help --task test</span><br></pre></td></tr></table></figure><h4 id="clean">clean</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure><h4 id="build">build</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><h4 id="test">test</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test</span><br></pre></td></tr></table></figure><h4 id="排除指定的task-exclude-task">排除指定的task<code>--exclude-task</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build --exclude-task test</span><br></pre></td></tr></table></figure><h4 id="多模块指定模块运行task">多模块指定模块运行task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :my-subproject:taskName</span><br><span class="line">./gradlew my-subproject:taskName</span><br></pre></td></tr></table></figure><h4 id="测试失败继续执行">测试失败继续执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test --continue</span><br></pre></td></tr></table></figure><h4 id="检查，会执行test和linting">检查，会执行test和linting</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew check</span><br></pre></td></tr></table></figure><h4 id="显示当前的项目层次">显示当前的项目层次</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew project</span><br></pre></td></tr></table></figure><h4 id="列出所有的task">列出所有的task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew tasks</span><br></pre></td></tr></table></figure><h4 id="列出项目所有的依赖：">列出项目所有的依赖：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew dependencies</span><br></pre></td></tr></table></figure><p>去<a href="https://docs.gradle.org/current/userguide/command_line_interface.html">官网</a>查看更多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gradle常用命令记录&quot;&gt;Gradle常用命令记录:&lt;/h2&gt;
&lt;h4 id=&quot;运行gradle-help-task-someTask来显示帮助，如：&quot;&gt;运行&lt;code&gt;gradle help --task someTask&lt;/code&gt;来显示帮助，如：&lt;/h4</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis自增特性创建唯一id生成器</title>
    <link href="https://guozhe001.github.io/2021/04/01/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://guozhe001.github.io/2021/04/01/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2021-04-01T10:18:21.503Z</published>
    <updated>2021-04-01T10:18:21.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求说明">需求说明</h1><h2 id="产品要求实现一个订单编号，此编号规则如下">产品要求实现一个订单编号，此编号规则如下</h2><h3 id="订单编号规则：">订单编号规则：</h3><p>“字母” + “日期” + “自增ID”</p><h3 id="订单编号举例">订单编号举例</h3><p>比如业务A，在2020-08-04日有三个订单，那么订单编号如下：</p><ul><li>A202008040001</li><li>A202008040002</li><li>A202008040003</li></ul><p>比如业务A，在2020-08-05日有4个订单，那么订单编号如下：</p><ul><li>A202008050001</li><li>A202008050002</li><li>A202008050003</li><li>A202008050003</li></ul><p>通过上面的例子可以看到，后面的“自增ID”每天都会从1开始增加，在一个分布式系统中，要做到每天从1开始不重复并且自增的效果；想到的第一个实现方案就是redis的Incr命令（Redis Incr 命令将 key 中储存的数字值增一）。</p><h1 id="需求实现">需求实现</h1><h2 id="配置redis">配置redis</h2><h3 id="依赖redis相关jar包">依赖redis相关jar包</h3><p>因为此模块继承了spring-boot-starter-parent，所以不需要指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置redis的config">编写配置redis的config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisClusterConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis集群配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisClusterConfig</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisProperties = redisProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread-safe factory of Redis connections配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> factory of Redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisClusterConfiguration redisClusterConfiguration = <span class="keyword">new</span> RedisClusterConfiguration(redisProperties.getCluster().getNodes());</span><br><span class="line">        redisClusterConfiguration.setPassword(redisProperties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(redisClusterConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建String类型的redis模板</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory factory of Redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String-focused extension of RedisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是配置范型的RedisTemplate，需要设置值的序列化规则为：<strong>StringRedisSerializer</strong>，原因可以参考此文章：<a href="https://blog.csdn.net/tyyh08/article/details/80267261">Spring Boot中使用RedisTemplate优雅的操作Redis，并且解决RedisTemplate泛型注入失败的问题</a></p><h3 id="测试redis的config代码">测试redis的config代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.BaseAdminSpringTest;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = AdminApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_KEY = Constants.REDIS_KEY_PREFIX + <span class="string">&quot;test:hello&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_VALUE = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringRedisTemplateGetAndSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(TEST_KEY, TEST_VALUE);</span><br><span class="line">        String value = stringRedisTemplate.opsForValue().get(TEST_KEY);</span><br><span class="line">        Assert.assertEquals(TEST_VALUE, value);</span><br><span class="line">        stringRedisTemplate.delete(TEST_KEY);</span><br><span class="line">        Assert.assertNull(stringRedisTemplate.opsForValue().get(TEST_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = TEST_KEY;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key, <span class="string">&quot;1&quot;</span>, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">        String initValue = valueOperations.get(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, init value=&#123;&#125;&quot;</span>, key, initValue);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;1&quot;</span>, initValue);</span><br><span class="line">        Long increment = valueOperations.increment(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, after increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        Assert.assertEquals(Long.valueOf(<span class="number">2</span>), increment);</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        Assert.assertNull(valueOperations.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于redis编写唯一ID生成服务">基于redis编写唯一ID生成服务</h2><h3 id="添加抽象的唯一id生成服务">添加抽象的唯一id生成服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式ID生成服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">Context</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化key时的默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRedisDistributedIDGenerateService</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，直接从redis中获取自增后的值；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID, 如果redis出现异常则返回null，请使用者自行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Optional&lt;Long&gt; <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从redis中获取自增id</span></span><br><span class="line">        Long id = incr(getKey());</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(id) ? Optional.empty() : Optional.of(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，根据传入的上下文和redis中自增后的值最终组装成下一个ID；</span></span><br><span class="line"><span class="comment">     * 获取之后会交给子类检查此ID是否重复，如果重复会从子类中获取最新的ID，然后更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">nextId</span><span class="params">(T context)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Long&gt; id = nextId();</span><br><span class="line">        <span class="comment">// 如果可以从redis中获取值，则说明redis服务正常，需要判重；否则直接从数据库中获取下一个id</span></span><br><span class="line">        String nextId = id.isPresent() ? ifDuplicatedThenUpdate(context, assemblyNextId(context, id.get())) :</span><br><span class="line">                getNewIdFromDbAndUpdateRedis(context, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;context=&#123;&#125;,redisIncrId=&#123;&#125; nextId=&#123;&#125;&quot;</span>, JSON.toJSONString(context), id, nextId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查获取到的ID是否重复</span></span><br><span class="line"><span class="comment">     * 如果重复则说明由于redis的一些原因导致的重复，返回最新的redis中应该存在的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId 下一个ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果当前ID没有重复，则返回null，否则如果重复了则返回redis中应该有的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取下一个id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duplicatedId 重复的id，此入参可能为null，子类需要自己处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库获取下一个id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类根据redis当前的值自行组装最终的ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context    上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisValue redis当前的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">assemblyNextId</span><span class="params">(T context, Long redisValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis自增的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis自增的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用redis的自增方法</span></span><br><span class="line"><span class="comment">     * 如果key不存在则先设置key，再调用自增方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要自增的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增之后的值，如果redis出现异常则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Long increment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先检查redis中是否有key,如果没有,先设置key并且设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (BooleanUtil.isFalse(redisTemplate.hasKey(key))) &#123;</span><br><span class="line">                initOrUpdateValue(key, getKeyInitValue());</span><br><span class="line">            &#125;</span><br><span class="line">            increment = redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用redis的自增方法异常，error_message=&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;key = &#123;&#125;, increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取初始化key时的value值，默认是0，自增之后id从1开始；</span></span><br><span class="line"><span class="comment">     * 如果子类想从其他数字开始则自己覆盖此方法即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化key时的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getKeyInitValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key的超时时间，单位是小时，由子类设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间，单位小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否重复，如果重复则从别的渠道（由子类自己决定从哪个渠道）更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果重复则返回新的nextId，否则返回入参传入的nextId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ifDuplicatedThenUpdate</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否重复，如果重复则从数据库中获取，否则直接返回当前值</span></span><br><span class="line">        <span class="keyword">return</span> checkIfDuplicated(nextId) ? getNewIdFromDbAndUpdateRedis(context, nextId) : nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取新id并更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据数据库的id获得的新id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNewIdFromDbAndUpdateRedis</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        Long maxIdFromDatabase = maxIdFromDatabase(nextId);</span><br><span class="line">        String newId = assemblyNextId(context, maxIdFromDatabase);</span><br><span class="line">        log.warn(<span class="string">&quot;nextId=&#123;&#125; 在数据库中已经存在，maxIdFromDatabase=&#123;&#125; 重新获取新的newId=&#123;&#125;&quot;</span>, nextId, maxIdFromDatabase, newId);</span><br><span class="line">        initOrUpdateValue(getKey(), maxIdFromDatabase);</span><br><span class="line">        <span class="keyword">return</span> newId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化或者更新redis中的自增的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要设置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOrUpdateValue</span><span class="params">(String key, Long value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, String.valueOf(value), getTimeOutHours(), TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置redis值异常，value=&#123;&#125; error_message=&#123;&#125;&quot;</span>, value, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文；子类自己定义上下文，然后根据上下文的数据来最终组装ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证编号上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 业务类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String businessType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加一个A服务的唯一id生成服务实现">添加一个A服务的唯一id生成服务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DatePattern;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.dao.ManualVoucherDAO;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.entity.ManualVoucherEntity;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.exception.AccountingException;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.service.AbstractRedisDistributedIDGenerateService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式唯一ID生成-A实现类</span></span><br><span class="line"><span class="comment"> * 编号规则：用途+日期+自增ID，如：A202007310001；A202007310002；A202008070001；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedIDGenerateServiceAImpl</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">AContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUSINESS_TYPE = <span class="string">&quot;A:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID长度不足4位时在前面填充的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> FILLED_CHAR = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的自增ID的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INCREMENT_LENGTH = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期小时数，即在24小时候过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXPIRATION_HOURS = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedIDGenerateServiceAImpl</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">assemblyNextId</span><span class="params">(VoucherNumberContext context, Long redisValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.BLANK, context.getBusinessType(), getDatePeriod(),</span><br><span class="line">                StrUtil.fillBefore(String.valueOf(redisValue), FILLED_CHAR, INCREMENT_LENGTH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.REDIS_KEY_DELIMITER, Constants.REDIS_KEY_PREFIX, BUSINESS_TYPE, getDatePeriod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EXPIRATION_HOURS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求说明&quot;&gt;需求说明&lt;/h1&gt;
&lt;h2 id=&quot;产品要求实现一个订单编号，此编号规则如下&quot;&gt;产品要求实现一个订单编号，此编号规则如下&lt;/h2&gt;
&lt;h3 id=&quot;订单编号规则：&quot;&gt;订单编号规则：&lt;/h3&gt;
&lt;p&gt;“字母” + “日期” + “自增ID”&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    <category term="Redis" scheme="https://guozhe001.github.io/categories/Java/Redis/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://guozhe001.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>线程池无法捕获线程的异常踩坑复盘</title>
    <link href="https://guozhe001.github.io/2021/04/01/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2021/04/01/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/</id>
    <published>2021-04-01T10:18:21.503Z</published>
    <updated>2021-04-01T10:18:21.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><h3 id="需求信息">需求信息</h3><p>最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息</p><h3 id="解决方案">解决方案</h3><p>为了使A服务的新增数据接口快速响应，在查询B服务数据详情的地方使用了线程池异步查询与更新。</p><h3 id="问题现象">问题现象</h3><p>在验证时发现数据库中的数据字段不全，经分析缺少的都是需要从B服务查询并更新的字段</p><h3 id="初步定位">初步定位</h3><p>猜测应该是查询B服务时出了一些异常，而由于不规范使用线程池导致异常没有抛出，直接打到了控制台，故A服务的日志系统并看不到错误日志。</p><h2 id="问题解决">问题解决</h2><ol><li>查询B服务数据详情时暂时去掉使用线程池，改为同步调用</li><li>增加容错定时任务，定时查询需要从B服务获取缺失字段的数据进行更新</li></ol><p>上线后观察，新增的数据不再有部分字段缺失的情况；问题解决。</p><h2 id="问题复盘">问题复盘</h2><h3 id="A服务线程池的使用">A服务线程池的使用</h3><p>线程池定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>线程池使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String contract)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0、检查合同必须不存在</span></span><br><span class="line">    checkIfExist(contract);</span><br><span class="line">    <span class="comment">// 1、保存合同数据</span></span><br><span class="line">    Entity entity = saveData(contract);</span><br><span class="line">    <span class="comment">// 2、从B服务查询缺失信息</span></span><br><span class="line">    executorService.execute(() -&gt; queryDataDetail(entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如此使用有何问题">如此使用有何问题</h3><p>我重新写了一个测试方法如下：</p><p>1、定义一个会一直抛异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> SystemOutRule systemOutRule = <span class="keyword">new</span> SystemOutRule().enableLog();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">runWithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    log.info(<span class="string">&quot;thread is &#123;&#125;&quot;</span>, thread);</span><br><span class="line">    log.info(<span class="string">&quot;eh=&#123;&#125;&quot;</span>, thread.getUncaughtExceptionHandler());</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NicaiException(<span class="string">&quot;出错啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用线程池调用上面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    <span class="comment">// 断言程序打印的日志不包含“出错啦！”</span></span><br><span class="line">    Assert.assertFalse(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、上面的单测断言是成功的，那么异常跑哪里去了？上面的单测在控制台的输出如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807110851677.png" alt="image-20200807110851677"></p><p>4、可以看出上面的异常信息是直接输出到了控制台，而不是由程序输出到控制台，主要原因是主程序没有捕获到此异常导致的。（具体原因还没有深入）</p><h3 id="如何解决线程池的异常捕获问题">如何解决线程池的异常捕获问题</h3><p>上面的测试可以说明到为什么日志里面查不到错误日志，那么如何捕获线程里的异常呢？</p><h4 id="方法1-使用UncaughtExceptionHandler">方法1:使用UncaughtExceptionHandler</h4><p>1、在创建线程池的时候，设置传入的ThreadFactory的UncaughtExceptionHandler属性，此UncaughtExceptionHandler会处理线程中的异常；下面的例子我直接打印了出来异常原因和异常栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithUncaughtExceptionHandler</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool(</span><br><span class="line">            <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                    .setUncaughtExceptionHandler((t, e) -&gt; log.info(<span class="string">&quot;UncaughtExceptionHandler caught, error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">                    .build());</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：（可以和上面的运行结果进行比对）</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807111728213.png" alt="image-20200807111728213"></p><p>3、从上面的运行结果可以看出异常信息是由程序捕获后再输出出来，这样就不会导致查不到异常日志了。</p><h4 id="方法2-使用guava扩展的FutureCallback">方法2:使用guava扩展的FutureCallback</h4><p>1、guava对jdk的线程做了一些扩展，其中一个就是FutureCallback，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithGuavaThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">    ListenableFuture&lt;String&gt; listenableFuture = executorService.submit(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    Futures.addCallback(listenableFuture, <span class="keyword">new</span> FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;success! result = &#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;guava FutureCallback caught, error_message=&#123;&#125;&quot;</span>, t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, executorService);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807112535447.png" alt="image-20200807112535447"></p><h2 id="问题总结">问题总结</h2><p>1、通过上面的测试，优化A服务的线程池定义，使之在遇到异常时能够正常被捕获，能输出，方便问题定位；补偿定时任务也能对第一次查询异常进行容错，保证数据能够同步过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;查询数据详情的线程池异常,error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">        .setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>2、当然此问题更深层的问题还没有完全解答</p><ul><li>为什么线程里的异常不会被捕获？</li><li>UncaughtExceptionHandler的运行原理是什么？</li><li>Guava的FutureCallback是如何运行的？</li></ul><p>3、<a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-experience/src/test/java/com/nicai/experience/concurrency/ExceptionThreadTest.java">测试代码源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;h3 id=&quot;需求信息&quot;&gt;需求信息&lt;/h3&gt;
&lt;p&gt;最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;为了使A服务的新增数据接口快速响</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="线程池" scheme="https://guozhe001.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>为什么我们在使用Spring的时候应该使用构造方法注入bean</title>
    <link href="https://guozhe001.github.io/2021/04/01/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/"/>
    <id>https://guozhe001.github.io/2021/04/01/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/</id>
    <published>2021-04-01T10:18:21.502Z</published>
    <updated>2021-04-01T10:18:21.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题">问题</h1><p>对于使用Spring框架的java开发人员对下面的代码应该很熟悉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br></pre></td></tr></table></figure><p>但是对于上面的代码，Sonar会提示：<code>Remove this annotation and use constructor injection instead.</code></p><p>翻译成中文即：移除<code>@Autowired</code>注解使用构造器注入方式替代。</p><p>IntelliJ IDEA也会提示<code>Field injection is not recommended</code></p><p>翻译成中文即：不推荐使用字段注入</p><h1 id="那么他们为什么这么建议呢？">那么他们为什么这么建议呢？</h1><h2 id="首先我们先看一下Spring有哪些注入bean的方式">首先我们先看一下Spring有哪些注入bean的方式</h2><ol><li>构造方法注入</li><li>set方法注入</li><li>字段注入，即<code>@Autowired</code>注解</li></ol><h2 id="如何使用这些方式">如何使用这些方式</h2><h3 id="构造方法注入">构造方法注入</h3><p>在Spring4.3版本之前，我们必须要在构造方法上加<code>@Autowired</code>注解；在新版本中如果当前类只有一个构造方法<code>@Autowired</code>注解就是可选的。</p><p>只有一个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set方法注入">set方法注入</h3><p>这种方式Spring会找到 <code>@Autowired</code> 注解并且调用set方法来注入所需的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段注入">字段注入</h3><p>通过基于字段的注入，Spring在使用<code>@Autowired</code>注释进行注释时，直接将所需的依赖项分配给字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这些方式有什么优缺点">这些方式有什么优缺点</h2><p>既然要<em><strong>移除<code>@Autowired</code>注解使用构造器注入方式替代</strong></em>，那么我们主要讨一下这些方式的优缺点。</p><h3 id="字段注入方式的优点">字段注入方式的优点</h3><p>相比较另外两种方式，字段注入方式的代码量更少、更整齐、更简洁</p><h3 id="构造方法注入的优点">构造方法注入的优点</h3><h4 id="容易发现代码的坏味道">容易发现代码的坏味道</h4><p>set方法注入和字段注入会<em><strong>间接</strong></em>违反<strong>单一职责原则</strong>。</p><p>因为在一个类依赖很多其他类的时候，如果使用构造方法注入就会发现构造方法的参数太多，这会让开发人员反思这个类真的需要这么多依赖吗？当前类是不是职责过多？</p><p>而使用字段注入时，就会把一些例如sonar的提示屏蔽掉，让开发人员误以为这样做没有问题</p><h4 id="可以创建不可变类">可以创建不可变类</h4><p>在使用构造方法注入时因为构造方法是创建依赖对象的唯一方式，这非常有助于让我们创建不可变的对象。</p><p>想象一下创建一个bean之后你可以通过set方法随意修改此类的依赖，在出现问题时是很难定位的。</p><p><code>@Autowired</code>的源码有一段注释如下：<code>Fields are injected right after construction of a bean, before any config methods are invoked. Such a config field does not have to be public.</code><br>大意是使用<code>@Autowired</code>注解时，bean是在构造当前的bean之后，并且在任何的其他方法调用之前注入，因此无法设置成final类型的字段。</p><h4 id="更明显的声明所有的依赖">更明显的声明所有的依赖</h4><p>使用构造方法注入，在使用这个类时就会暴露给使用者说我要依赖构造方法中的类。</p><p>但是使用字段注入时，使用者其实并不知道这个类依赖了哪些类，除非我到此类中查看这个类有多少个字段是有<code>@Autowired</code>注解。</p><h4 id="不方便迁移">不方便迁移</h4><p>spring实现了DI（控制反转），但并非是DI本身；<br>使用构造方法注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解，没有其他的Spring相关的更多的注解。</p><p>使用字段注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解之外又使用了Spring的<code>@Autowired</code>注解，如果把此类迁移到其他没有spring的环境时是完成不了注入的。</p><h4 id="不方便测试">不方便测试</h4><p>在使用构造方法注入时，单元测试时开发人员可以直接传入一个mock的类或者其他的任何被测试类依赖的子类；</p><p>当然我们也可以使用set方式注入一个mock的类，但是如果代码修改了新增了一个依赖，那么我们很容易忘掉在测试代码中set新增的依赖，直到运行的时候我们才会看到可能有NPE异常爆出；但是构造方法就不必有这种烦恼，因为如果新增了一个依赖，测试方法会马上编译不通过。</p><p>使用字段注入，必须依赖Spring去帮助注入依赖的类</p><h1 id="总结">总结</h1><p>通过构造方法注入bean是我们更容易创建不可变类，代码更健壮、更具有可测试性、更容易避免NPE。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;p&gt;对于使用Spring框架的java开发人员对下面的代码应该很熟悉：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://guozhe001.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://guozhe001.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>创建一个新的channel</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%83%A8%E7%BD%B2%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%83%A8%E7%BD%B2%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</id>
    <published>2021-04-01T10:18:21.501Z</published>
    <updated>2021-04-01T10:18:21.502Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档:<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html">deployment_guide_overview</a></p><h1 id="Deploying-a-production-network">Deploying a production network</h1><ul><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-one-decide-on-your-network-configuration">Step one: Decide on your network configuration</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-two-set-up-a-cluster-for-your-resources">Step two: Set up a cluster for your resources</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-three-set-up-your-cas">Step three: Set up your CAs</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-four-use-the-ca-to-create-identities-and-msps">Step four: Use the CA to create identities and MSPs</a></p></li><li><ul><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-five-deploy-nodes">Step five: Deploy peers and ordering nodes</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-create-a-peer">Creating a peer</a><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-create-an-ordering-node">Creating an ordering node</a></p></li></ul></li></ul><h2 id="Step-one-Decide-on-your-network-configuration">Step one: Decide on your network configuration</h2><ul><li><strong>Certificate Authority configuration</strong>.</li><li><strong>Use Organizational Units or not?</strong></li><li><strong>Database type.</strong> （相同的channel的peer节点必须使用相同的数据库）</li><li><strong>Channels and private data.</strong></li><li><strong>Container orchestration.</strong></li><li><strong>Chaincode deployment method</strong>（使用内置的部署方式还是外部的部署方式，如使用k8s部署）</li><li><strong>Using firewalls</strong></li></ul><h2 id="Step-two-Set-up-a-cluster-for-your-resources">Step two: Set up a cluster for your resources</h2><h3 id="Managing-your-infrastructure">Managing your infrastructure</h3><ul><li><p>Using secret objects to securely store important configuration files in your cluster. （使用秘密对象将重要的配置文件安全地存储在群集中。）</p></li><li><p>Cluster considerations and node sizing.</p></li><li><p>How you choose to mount your volumes. It is a best practice to mount the volumes relevant to your nodes external to the place where your nodes are deployed. (您如何选择挂载卷。最佳实践是将与您的节点相关的卷挂载到部署节点的外部。)</p></li><li><p>How you will monitor your resources.</p></li></ul><h2 id="Step-three-Set-up-your-CAs">Step three: Set up your CAs</h2><p>The first component that must be deployed in a Fabric network is a CA. This is because the certificates associated with a node (not just for the node itself but also the certificates identifying who can administer the node) must be created before the node itself can be deployed.</p><p>必须在Fabric网络中部署的第一个组件是CA。这是因为必须先创建与节点关联的证书（不仅是针对节点本身的证书，而且还包括标识谁可以管理该节点的证书），然后才能部署节点本身。</p><ul><li><p>One CA (or more, if you are using intermediate CAs — more on intermediate CAs below) is used to generate (through a process called “enrollment”) the certificates of the admin of an organization, the MSP of that organization, and any nodes owned by that organization. This CA will also generate the certificates for any additional users.This CA will also generate the certificates for any additional users. Because of its role in “enrolling” identities, this CA is sometimes called the “enrollment CA” or the “ecert CA”.</p><p>一个CA用于生成该组织管理员、该组织的MSP和该组织所拥有的任何节点的证书。该CA还将为任何其他用户生成证书。由于其在“注册”身份中的作用，因此有时将该CA称为“注册CA”或“证书CA”。</p></li><li><p>The other CA generates the certificates used to secure communications on Transport Layer Security (TLS).For this reason, this CA is often referred to as a “TLS CA”. These TLS certificates are attached to actions as a way of preventing “man in the middle” attacks.</p><p>另一个CA生成用于保护传输层安全性（TLS）上的通信的证书。因此，该CA通常被称为“ TLS CA”。将这些TLS证书附加到操作中，以防止“中间人”攻击。</p></li></ul><p>Deploy a Production CA</p><ul><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-deploy-topology.html">Planning for a CA</a></li><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-config.html">Checklist for a production CA server</a></li><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/cadeploy.html">CA deployment steps</a></li></ul><h2 id="Step-four-Use-the-CA-to-create-identities-and-MSPs">Step four: Use the CA to create identities and MSPs</h2><p>For each organization, you will need to, at a minimum:</p><ul><li><p><strong>Register and enroll an admin identity and create an MSP</strong>.</p><p><strong>you must create the org admin identity before creating the local MSP of a node, since the certificate of the node admin must be used when creating the local MSP</strong>.</p></li><li><p><strong>Register and enroll node identities</strong>.</p></li></ul><h2 id="Step-five-Deploy-peers-and-ordering-nodes">Step five: Deploy peers and ordering nodes</h2><p>Before any node can be deployed, its configuration file must be customized. For the peer, this file is called <code>core.yaml</code>, while the configuration file for ordering nodes is called <code>orderer.yaml</code>.</p><p>在任何的节点可以被部署之前，必须先自定义配置文件。</p><ul><li>peer节点的配置文件： <code>core.yaml</code></li><li>ordering节点的配置文件<code>orderer.yaml</code></li></ul><p>You have three main options for tuning your configuration.</p><ol><li>Edit the YAML file bundled with the binaries.</li><li>Use environment variable overrides when deploying.</li><li>Specify flags on CLI commands.</li></ol><h3 id="Creating-a-peer">Creating a peer</h3><p>Among the parameters in <code>core.yaml</code>, there are:</p><ul><li><strong>Identifiers</strong>: these include not just the paths to the relevant local MSP and Transport Layer Security (TLS) certificates, but also the name (known as the “peer ID”) of the peer and the MSP ID of the organization that owns the peer.</li><li><strong>Addresses and paths</strong>: because peers are not entities unto themselves but interact with other peers and components, you must specify a series of addresses in the configuration. These include addresses where the peer itself can be found by other components as well as the addresses where, for example, chaincodes can be found (if you are employing external chaincodes). Similarly, you will need to specify the location of your ledger (as well as your state database type) and the path to your external builders (again, if you intend to employ external chaincodes). These include <strong>Operations and metrics</strong>, which allow you to set up methods for monitoring the health and performance of your peer through the configuration of endpoints.</li><li><strong>Gossip</strong>: components in Fabric networks communicate with each other using the “gossip” protocol. Through this protocol, they can be discovered by the discovery service and disseminate blocks and private data to each other. Note that gossip communications are secured using TLS.</li></ul><p>Deploying a production peer</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerplan.html">Planning for a production peer</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerchecklist.html">Checklist for a production peer</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerdeploy.html">Deploy the peer</a></li></ul><h3 id="Creating-an-ordering-node">Creating an ordering node</h3><p>Among the parameters in <code>orderer.yaml</code>, there are:</p><ul><li><strong>Identifiers</strong>: these include not just the paths to the relevant local MSP and Transport Layer Security (TLS) certificates, but also the MSP ID of the organization that owns the ordering node.</li><li><strong>Addresses and paths</strong>: because ordering nodes interact with other components, you must specify a series of addresses in the configuration. These include addresses where the ordering node itself can be found by other components as well as <strong>Operations and metrics</strong>, which allow you to set up methods for monitoring the health and performance of your ordering node through the configuration of endpoints.</li></ul><p>Deploying a production ordering node</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererplan.html">Planning for an ordering service</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererchecklist.html">Checklist for a production ordering node</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererdeploy.html">Deploy the ordering service</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方文档:&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html&quot;&gt;deployment_guide_overview&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/channel/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>隐秘交易.md</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/</id>
    <published>2021-04-01T10:18:21.500Z</published>
    <updated>2021-04-01T10:18:21.501Z</updated>
    
    <content type="html"><![CDATA[<p>自己开发的智能合约在channel上的所有成员都可以看到，这不符合现实世界中的交易规则。理论上两个组织之间的交易是不允许别人看到的。所以这次我使用fabric-samples提供的<code>asset-transfer-secured-agreement</code>来作为我的供应链金融区块链项目的chaincode。</p><h2 id="部署链码">部署链码</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package secured_supply.5.tar.gz --path ./asset-transfer-secured-agreement/chaincode-go --lang golang --label secured_supply_15.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-每个peer都要安装：">安装链码包,每个peer都要安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install secured_supply.5.tar.gz</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=secured_supply_22.0:e815ca2d270dea029bc6992952140b1288a440aba8c430853f72eee7d5de24a7</span><br></pre></td></tr></table></figure><h4 id="批准链码定义，每个peer都要执行此命令：">批准链码定义，每个peer都要执行此命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 23.0 --package-id $CC_PACKAGE_ID --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><h4 id="检查channel上的成员是否已经批准了链码定义：">检查channel上的成员是否已经批准了链码定义：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 23.0 --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><h4 id="在所有组织都批准之后，执行下面的命令将链码定义提交到通道：">在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 23.0 --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span><br></pre></td></tr></table></figure><h2 id="调用链码">调用链码</h2><h3 id="创建资产">创建资产</h3><p><em><strong>资产的内容需要打个问号，因为这个资产在后面需要被交易，如果资产的内容不能够修改那么合同和发票的hash应该不在资产的详细信息里面，这里先放这里后面再改</strong></em></p><p><em><strong>发行者能否放在外面而不是资产里面？哪种方式比较好呢？</strong></em></p><p>在核心企业的节点创建一个资产如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset011\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:1000,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br></pre></td></tr></table></figure><p>在核心企业的节点上调用chaincode，创建资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;CreateAsset&quot;,&quot;Args&quot;:[&quot;asset011&quot;, &quot;A new asset for GylCoreOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>在私有数据集中查询刚才创建的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>成功结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset_properties&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-01-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-07-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询账本来查看公共记录，所有在channel上的成员都可以查询得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>返回结果，channel上的成员只能看到资产的部分信息，详细信息是无法看到的。：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资产拥有者更改资产的公共信息">资产拥有者更改资产的公共信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset010&quot;,&quot;This asset is for sale&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>上面的方法，在核心企业的peer节点返回日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-01-07 16:07:43.589 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>其他的组织如果想要调用这个链码的方法更改信息，则会报错，因为属于核心企业的资产别人不可以更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylFOrg1MSP cannot update the description of a asset owned by GylCoreOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h3 id="资产交易">资产交易</h3><h4 id="允许出售资产">允许出售资产</h4><p>现在核心企业要与一级供应商交易核心企业的资产。首先核心企业与一级供应商要在链下对价格达成共识，并且核心企业要把资产的详情也通过链下的通道发送给一级供应商。之后买卖双方就可以对价格达成共识了。</p><h5 id="核心企业将资产的价格设置为1000：">核心企业将资产的价格设置为1000：</h5><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset007\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:1000&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价1000">一级供应商出价1000</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> ASSET_PROPERTIES=$(<span class="built_in">echo</span> -n <span class="string">&quot;&#123;\&quot;object_type\&quot;:\&quot;asset_properties\&quot;,\&quot;asset_id\&quot;:\&quot;asset006\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:1000,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot;</span> | base64 | tr -d \\n)</span></span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset007\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:1000&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset007&quot;,&quot;GylFOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset001&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="交易验证">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset005&quot;,&quot;This asset is not for sale now&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>然后通过所有四个组织查询资产ID为asset005的公共信息如下，说明一级供应商已经获得了修改权限并修改了这个资产的公共信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset005&quot;]&#125;&#x27;|jq</span><br><span class="line">&#123;</span><br><span class="line">  &quot;objectType&quot;: &quot;asset&quot;,</span><br><span class="line">  &quot;assetID&quot;: &quot;asset005&quot;,</span><br><span class="line">  &quot;ownerOrg&quot;: &quot;GylFOrg1MSP&quot;,</span><br><span class="line">  &quot;publicDescription&quot;: &quot;This asset is not for sale now&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset005&quot;,&quot;This asset is not for sale again&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset005&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>再一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="资产拆分">资产拆分</h2><h3 id="调用拆分方法">调用拆分方法</h3><p>完成资产的拆分chaincode的更新之后，调用拆分的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;SplitAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;, &quot;500&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果">验证拆分结果</h3><h4 id="私有数据验证">私有数据验证</h4><h5 id="第一个资产：">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;objectType&quot;: &quot;asset_properties&quot;,</span><br><span class="line">  &quot;assetID&quot;: &quot;asset0101&quot;,</span><br><span class="line">  &quot;issuer&quot;: &quot;GylCoreOrg1MSP&quot;,</span><br><span class="line">  &quot;amount&quot;: 500,</span><br><span class="line">  &quot;createDate&quot;: &quot;2020-01-11T06:57:06.963617Z&quot;,</span><br><span class="line">  &quot;endDate&quot;: &quot;2021-07-11T06:57:06.963617Z&quot;,</span><br><span class="line">  &quot;salt&quot;: &quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0102&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset_properties&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0102&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-01-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-07-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，原始资产已经没有了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org&#x27;s collection: asset010&quot;</span><br></pre></td></tr></table></figure><h4 id="公共数据验证">公共数据验证</h4><h5 id="第一个资产：-v2">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，channel上的所有的组织都可以看到相同的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v2">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0102&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0102&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：-v2">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，chaincode有问题，拆分资产之后原始资产的状态应该改变：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;已拆分&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易">拆分后的资产交易</h2><h4 id="核心允许出售资产，价格设置为500：">核心允许出售资产，价格设置为500：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset0101\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:500&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价500">一级供应商出价500</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset0101\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:500,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset0101\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:500&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商-v2">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;GylFOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylFOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v2">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：-v2">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;This asset is not for sale now&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylFOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is not for sale now&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息-v2">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;This asset is not for sale again&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息-v2">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="一级供应商与二级供应商交易">一级供应商与二级供应商交易</h2><p>调用拆分的方法，将资产拆分成200和300：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;SplitAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;, &quot;200&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果-v2">验证拆分结果</h3><h4 id="私有数据验证-v2">私有数据验证</h4><h5 id="第一个资产：-v3">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v3">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，原始资产已经没有了：">原始的资产，原始资产已经没有了：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h4 id="公共数据验证-v2">公共数据验证</h4><h5 id="第一个资产：-v4">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v4">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，拆分资产之后原始资产的状态应该改变：">原始的资产，拆分资产之后原始资产的状态应该改变：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易-v2">拆分后的资产交易</h2><h4 id="一级供应商允许出售资产，设置价格：">一级供应商允许出售资产，设置价格：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset01012\&quot;,\&quot;trade_id\&quot;:\&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\&quot;,\&quot;price\&quot;:300&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="二级供应商2出价300">二级供应商2出价300</h5><p>在二级供应商2出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset01012\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:300,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset01012\&quot;,\&quot;trade_id\&quot;:\&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\&quot;,\&quot;price\&quot;:300&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="一级供应商把资产转移给二级供应商2">一级供应商把资产转移给二级供应商2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;,&quot;GylSOrg2MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset01012&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is not for sale now&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset0101&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v3">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证二级级供应商2可以修改自己的资产的公共属性：">验证二级级供应商2可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset01012&quot;,&quot;hello i am GylSOrg2MSP&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset01012&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;hello i am GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset0101&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证只有二级级供应商2才可以查询这个资产的私有信息">验证只有二级级供应商2才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="chaincode接口记录">chaincode接口记录</h2><h3 id="查询卖出的交易信息">查询卖出的交易信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;QueryAssetSaleAgreements&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="查询资产的公共信息">查询资产的公共信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h3 id="查询私有资产信息">查询私有资产信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h3 id="查询一个资产公共信息的历史数据">查询一个资产公共信息的历史数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;QueryAssetHistory&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自己开发的智能合约在channel上的所有成员都可以看到，这不符合现实世界中的交易规则。理论上两个组织之间的交易是不允许别人看到的。所以这次我使用fabric-samples提供的&lt;code&gt;asset-transfer-secured-agreement&lt;/code&gt;来作</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>部署新的智能合约到channel</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/</id>
    <published>2021-04-01T10:18:21.498Z</published>
    <updated>2021-04-01T10:18:21.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署新的智能合约到channel">部署新的智能合约到channel</h1><h2 id="部署V1版本">部署V1版本</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>supply.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:12:37.540 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\nKsupply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a\022\nsupply_1.0&quot; &gt;</span><br><span class="line">2020-12-28 17:12:37.542 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br><span class="line">Package ID: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a, Label: supply_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:07.090 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5c192d72135019a4bd6d444231fc95d41b6c7391cbc80a98cb67618f5e7a85c6] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8051</span><br><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;100&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:&lt;status:200 &gt; payload:&quot;\n \266\367\033\202\030f\357\010\266zg\350\237\212\313 \342B\2041\316\351&gt;H\037\035\312\274J\021i\220\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n&#x27;\n!namespaces/fields/supply/Sequence\022\002\010\t\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\&quot;ID\&quot;:\&quot;1\&quot;,\&quot;issuer\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;owner\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;amount\&quot;:100,\&quot;createDate\&quot;:\&quot;2020-12-28T09:24:44.871052163Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-06-28T09:24:44.871052228Z\&quot;,\&quot;contractHash\&quot;:\&quot;test\&quot;,\&quot;invoiceHash\&quot;:\&quot;test\&quot;&#125;\032\003\010\310\001\&quot;\r\022\006supply\032\0031.0&quot; endorsement:&lt;endorser:&quot;\n\013GylFOrg1MSP\022\212\006-----BEGIN CERTIFICATE-----\nMIICETCCAbegAwIBAgIRAKxyUt8FsMI4LRaMcjh08ZgwCgYIKoZIzj0EAwIwbTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFjAUBgNVBAoTDWYxLnN1cHBseS5jb20xGTAXBgNVBAMTEGNhLmYx\nLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBYMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEcMBoGA1UEAxMTcGVlcjAuZjEuc3VwcGx5LmNvbTBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABIChG5EnW6enlGqH2F9EiWYbilBwfA+KgqqxnN56njS5\ngv368PElfoafV6jCrjA+p2OnbTI3gO2/RAwr2WBLB0+jTTBLMA4GA1UdDwEB/wQE\nAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIHNOBiXoFslrjdFMBMzU7pNe\nI5pmxxrQGrWTdgfI0cetMAoGCCqGSM49BAMCA0gAMEUCIQDEOKc114LvsauKzrMR\n7k6ipg0HPM1+W8JJt06Jeqd1vwIgBre+xg2g/rS7F5oZaJpECUf7ALV0fy9/Dhw0\nYDB3H+g=\n-----END CERTIFICATE-----\n&quot; signature:&quot;0D\002 9\020\212\014\220\302Ao_\226n`o\005\354B\263\316\346\330\347\010\217\205^X\&quot;\267d\320U\365\002 \t&lt;\024e\324\312X\036\346=\025.I*A\311\223\013\301\276\320\232\366\246tZm\341g\223\235|&quot; &gt;</span><br></pre></td></tr></table></figure><p>原因应该是代码中使用了Now（）来创建当前时间，两个peer的当前时间可能会有一点误差导致了校验不通过。</p><p>**解决方案：**使用<code>ctx.GetStub().GetTxTimestamp()</code>来获取时间，这样所有的节点创建的时间都是一致的，详见<a href="https://stackoverflow.com/questions/55289283/hyperledger-fabric-error-could-not-assemble-transaction-proposalresponsepaylo/61727958">参考文档</a></p><h2 id="更新智能合约">更新智能合约</h2><h3 id="打包-v2">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label supply_1.0</span></span><br></pre></td></tr></table></figure><p>打包本地的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.5.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_5.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v2">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v3">批准链码定义</h3><h4 id="查看已经安装的chaincode-v2">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_5.0:0006888ea72e1b318238518b719382d440ab72f2d2c45b22e674f4828b7f7f9c</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v4">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --package-id $CC_PACKAGE_ID --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v2">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v2">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;100&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 18:37:54.285 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: proposal response was not successful, error code 500, msg Incorrect number of params. Expected 2, received 1 - proposal response: version:1 response:&lt;status:200 &gt; payload:&quot;\n \177\017\350[\344G6\010V\331\332\377\354\216&amp;\035\317&amp;\251[N`\023\036\033\237\237A\005\3670\260\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n&#x27;\n!namespaces/fields/supply/Sequence\022\002\010\016\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\&quot;ID\&quot;:\&quot;1\&quot;,\&quot;issuer\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;owner\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;amount\&quot;:100,\&quot;createDate\&quot;:\&quot;2020-12-28T10:02:30.578872398Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-06-28T10:02:30.578872527Z\&quot;,\&quot;contractHash\&quot;:\&quot;test\&quot;,\&quot;invoiceHash\&quot;:\&quot;test\&quot;&#125;\032\003\010\310\001\&quot;\r\022\006supply\032\0033.0&quot; endorsement:&lt;endorser:&quot;\n\016GylCoreOrg1MSP\022\222\006-----BEGIN CERTIFICATE-----\nMIICFjCCAbygAwIBAgIQU43L5gjtXO+uCpRP2jG2AjAKBggqhkjOPQQDAjBxMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEYMBYGA1UEChMPY29yZS5zdXBwbHkuY29tMRswGQYDVQQDExJjYS5j\nb3JlLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBa\nMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2Fu\nIEZyYW5jaXNjbzEeMBwGA1UEAxMVcGVlcjAuY29yZS5zdXBwbHkuY29tMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAErf3R+7XpNQpmTsMO+iM4WS7IrOoafiPbAS7Q\nbuFFR3Qs4riIczgSmjh9rOA6I1q2q0CstLhfWDbqpf+8fXPUlKNNMEswDgYDVR0P\nAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAguznqsTisa64dNvOR\nvPwP0KGklWohNpbSe7VgIghx4L8wCgYIKoZIzj0EAwIDSAAwRQIhALIw1VMzezCg\n9LONbO4+V+weY42HQLbShkTP/gCFnGRYAiARyLLSDJIC2wwzSvOHNdm+aDRtbqGC\nNJenP9hmEbYsTw==\n-----END CERTIFICATE-----\n&quot; signature:&quot;0E\002!\000\251\370K6S\020\373\242\321\000\211\312\0001\333\365&gt;\314\324\231\020&gt;u;+\243\303dD\023\221\237\002 z \224\236R\355Z\251\202\363\035\304\365\212\277\235\375?\376\030\371\236\220\354iG6\244\334M\315\331&quot; &gt;</span><br></pre></td></tr></table></figure><p>原因是因为下图，只有一个组织的链码更新到了最新的版本。</p><p>![截屏2020-12-28 18.03.06](/Users/apple/Desktop/截屏2020-12-28 18.03.06.png)</p><p>**解决方案：**原因是因为设置环境变量<code>CC_PACKAGE_ID</code>时只设置了一个组织的peer，导致旧的环境变量还在生效，重新操作一遍问题解决。</p><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;核心企业&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;核心企业&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法">调用交易方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;一级供应商&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;一级供应商&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br></pre></td></tr></table></figure><p>交易之后owner变成了一级供应商，没有问题。</p><h2 id="问题记录：">问题记录：</h2><p>虽然智能合约的代码编写方式如下，但是第二行的<code>TransferAsset</code>并没有执行，可能是因为第一个创建交易（CreateAsset）还没有成功，所以第二个交易（TransferAsset）没有这个资产所以没有执行？待确认</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">s.CreateAsset(ctx, assetID, amount)</span><br><span class="line">s.TransferAsset(ctx, assetID, owner)</span><br></pre></td></tr></table></figure><h2 id="部署v6版本的supply">部署v6版本的supply</h2><h3 id="v6版本智能合约源码如下：">v6版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">asset, err := s.createAsset(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, <span class="string">&quot;核心企业&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: <span class="string">&quot;test&quot;</span>, InvoiceHash: <span class="string">&quot;test&quot;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">newAsset, err := s.createAsset(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = s.PutState(ctx, newAsset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line">err = fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v3">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.6.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_6.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v3">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v5">批准链码定义</h3><h4 id="查看已经安装的chaincode-v3">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_6.0:18a7379ed3b12a57961a735880a71bea3dd242c741fa0970f779b5a338f848de</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v6">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --package-id $CC_PACKAGE_ID --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v3">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v3">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset002&quot;, &quot;1000&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 10:59:48.513 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;the asset asset001 already exists&quot;</span><br></pre></td></tr></table></figure><p>**解决方案：**原因是以内资产ID为asset001的资产已经存在，修改资产ID参数即可。</p><h4 id="查询调用后的结果-v2">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset002&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法-v2">调用交易方法</h3><p>把凭证资产拆分一部分（200）给一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset002&quot;, &quot;一级供应商&quot;, &quot;200&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset001&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;一级供应商&quot;,</span><br><span class="line">    &quot;amount&quot;: 100,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-28T10:37:54.271518Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-28T10:37:54.271518Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset002&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;amount&quot;: 800,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-29T02:59:48.495257Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-29T02:59:48.495257Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset0021&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;一级供应商&quot;,</span><br><span class="line">    &quot;amount&quot;: 200,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-29T03:02:49.495789Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-29T03:02:49.495789Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>交易之后，核心企业剩余800的凭证，一级供应商获得一个新的凭证。验证无误。</p><h2 id="部署v7版本的supply">部署v7版本的supply</h2><h3 id="v7版本智能合约源码如下：">v7版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v4">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v4">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v7">批准链码定义</h3><h4 id="查看已经安装的chaincode-v4">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v8">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v4">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v4">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 CORE_AND_F1_CONTRACT.txt &gt; core_and_f1_contract_hash.txt</span><br><span class="line">shasum -a 256 CORE_AND_F1_INVOICE.txt &gt; CORE_AND_F1_INVOICE_hash.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果-v3">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset002&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0021&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T03:02:49.495789Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T03:02:49.495789Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T06:20:30.868298Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T06:20:30.868298Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>ID为asset003的资产归属为一级供应商，金额无误。</p><h2 id="创建一级供应商与二级供应商之间的channel">创建一级供应商与二级供应商之间的channel</h2><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>firstandsecondchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile FirstAndSecondChannel -outputCreateChannelTx ./channel-artifacts/firstandsecondchannel.tx -channelID firstandsecondchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:27:37.416 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-29 14:27:37.436 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以一级供应商管理员身份操作<code>peer</code>CLI，使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel -f ./channel-artifacts/firstandsecondchannel.tx --outputBlock ./channel-artifacts/firstandsecondchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: got unexpected status: BAD_REQUEST -- error validating channel creation transaction for new channel &#x27;firstandsecondchannel&#x27;, could not successfully apply update to template configuration: error authorizing update: error validating DeltaSet: policy for [Group]  /Channel/Application not satisfied: implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 1 of the &#x27;Admins&#x27; sub-policies to be satisfied</span><br></pre></td></tr></table></figure><p><strong>错误原因和解决方案：</strong></p><p>由于配置文件里面配置的firstandsecondchannel里面包含一级供应商和两个二级供应商，而上面的命令是以核心企业的管理员身份运行的。所以有问题。切换成一级供应商的环境执行即可。</p><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:34:06.203 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.231 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-29 14:34:06.244 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.450 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.458 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.667 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.676 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.885 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.892 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.099 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:07.108 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.320 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><h2 id="把一级供应商和二级供应商的peer加入通道">把一级供应商和二级供应商的peer加入通道</h2><h3 id="一级供应商的peer加入通道">一级供应商的peer加入通道</h3><p>使用下面的命令将peer加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:00.679 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:35:00.724 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c firstandsecondchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:28.593 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:1,&quot;currentBlockHash&quot;:&quot;270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434=&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="二级供应商1加入通道">二级供应商1加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:47:03.684 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:47:03.722 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supply-finance apple$ peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-29 14:43:56.186 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: proposal failed (err: rpc error: code = Unknown desc = error validating proposal: access denied: channel [] creator org [GylSOrg1M])</span><br></pre></td></tr></table></figure><p>**错误原因：**由于环境变量设置的有问题，<code>CORE_PEER_LOCALMSPID</code>设置成了<code>GylSOrg1M</code>，应该设置为<code>GylSOrg1MSP</code></p><h3 id="二级供应商2加入通道">二级供应商2加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:52:12.969 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:52:13.010 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:55:57.114 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:55:57.120 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-29 14:55:57.120 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-29 14:55:57.125 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:57:48.872 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:57:48.894 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-peer-channel-getinfo-c-firstandsecondchannel">验证，获取通道信息:<code>peer channel getinfo -c firstandsecondchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:58:15.937 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:2,&quot;currentBlockHash&quot;:&quot;4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=&quot;,&quot;previousBlockHash&quot;:&quot;270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商1（GylSOrg1MSP）设置锚节点">为二级供应商1（GylSOrg1MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s1.supply.com&quot;,&quot;port&quot;: 8055&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:01:14.643 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:01:14.670 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:01:26.952 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:3,&quot;currentBlockHash&quot;:&quot;DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=&quot;,&quot;previousBlockHash&quot;:&quot;4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商2（GylSOrg2MSP）设置锚节点">为二级供应商2（GylSOrg2MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v3">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s2.supply.com&quot;,&quot;port&quot;: 8151&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v3">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v3">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:03:39.793 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:03:39.817 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v2">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:04:10.414 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:4,&quot;currentBlockHash&quot;:&quot;PWXXje7tci4mk1ggQ9QMVzkvkP3i+N8WslOGDXreIQ0=&quot;,&quot;previousBlockHash&quot;:&quot;DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="部署supply-v7到二级供应商的peer节点">部署supply-v7到二级供应商的peer节点</h2><h3 id="打包-v5">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v5">安装链码包</h3><p>两个二级供应商都要安装：<br>二级供应商1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>二级供应商2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v9">批准链码定义</h3><h4 id="查看已经安装的chaincode-v5">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v10">批准链码定义</h4><p>一级供应商和两个二级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v5">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID firstandsecondchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">Error: proposal failed with status: 500 - channel &#x27;firstandsecondchannel&#x27; not found</span><br></pre></td></tr></table></figure><p>**错误原因：**由于批准的组织中包含核心企业，核心企业并没有加入<code>firstandsecondchannel</code>通道，所以报错。</p><h3 id="调用链码-v5">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><p>调用转账交易：TODO 问题来了，两个channel之间如何交换资产？这是个问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -C firstandsecondchannel -n supply --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C firstandsecondchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><p>查看<a href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></p><h2 id="部署supply-v7到alljoinchannel通道">部署supply-v7到alljoinchannel通道</h2><h3 id="打包-v6">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span></span><br></pre></td></tr></table></figure><h3 id="安装链码包-v6">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.7.tar.gz</code></p><h3 id="批准链码定义-v11">批准链码定义</h3><h4 id="查看已经安装的chaincode-v6">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v12">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v6">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v6">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v2">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;二级供应商1&quot;, &quot;500&quot;, &quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;, &quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v2">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0031&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;the asset asset0031 already exists&quot;</span><br></pre></td></tr></table></figure><p>原因如下：如果同一个资产ID交易两次，则会出现资产ID重复的问题；代码bug。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v2">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset0031&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0031&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset00311&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:17:26.148125Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:17:26.148125Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="部署supply-v8到alljoinchannel通道">部署supply-v8到alljoinchannel通道</h2><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="keyword">if</span> newID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额小于资产的金额时，newID必须不能为空&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v7">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.8.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_8.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v7">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.8.tar.gz</code></p><h3 id="批准链码定义-v13">批准链码定义</h3><h4 id="查看已经安装的chaincode-v7">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_8.0:797ec1d00145482b746640d0b8bb9bea64cb69dea3e95abb69a1195a19e34511</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v14">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --package-id $CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v7">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v7">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v3">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v3">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易-v2">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0011&quot;, &quot;二级供应商1&quot;, &quot;500&quot;, &quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;, &quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v4">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v3">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0012&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0012&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转账金额大于凭证资产的金额-期待错误">转账金额大于凭证资产的金额(期待错误)</h3><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;\350\275\254\350\264\246\351\207\221\351\242\235=300,\344\270\215\350\203\275\350\266\205\350\277\207\350\265\204\344\272\247\347\232\204\351\207\221\351\242\235=200&quot;</span><br></pre></td></tr></table></figure><p>错误信息解码如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201230151742496-20201230173424532.png" alt></p><h3 id="转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）">转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）</h3><p>一级供应商把剩余的200转给二级供应商2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;supply.com&#x2F;orderers&#x2F;orderer.supply.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;f1.supply.com&#x2F;peers&#x2F;peer0.f1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s1.supply.com&#x2F;peers&#x2F;peer0.s1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s2.supply.com&#x2F;peers&#x2F;peer0.s2.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;core.supply.com&#x2F;peers&#x2F;peer0.core.supply.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;200&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0012&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>没有产生新的资产，而是把原来的资产的拥有者变更了。</p><p><em>注意：这样有个问题，合同hash和发票hash不应该还是原来的。</em></p><h2 id="部署supply-v9到alljoinchannel通道">部署supply-v9到alljoinchannel通道</h2><h3 id="源码-v2">源码</h3><p>与v8版本相比，增加删除资产的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetIds ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, assetID := <span class="keyword">range</span> assetIds &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;assetID=%s的资产不存在&quot;</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v8">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.18.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance-chaincode/ --lang golang --label secured_supply_22.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v8">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.18.tar.gz</code></p><h3 id="批准链码定义-v15">批准链码定义</h3><h4 id="查看已经安装的chaincode-v8">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=secured_supply_22.0:e815ca2d270dea029bc6992952140b1288a440aba8c430853f72eee7d5de24a7</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v16">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 22.0 --package-id $CC_PACKAGE_ID --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v8">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 22.0 --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 22.0 --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v8">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产">删除资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset001 asset0011 asset0012 asset003 asset0031 asset00311&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset001 asset0011 asset0012 asset003 asset0031 asset00311&quot;]&#125;&#x27;</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;Error managing parameter param0. Conversion error. Value asset001 asset0011 asset0012 asset003 asset0031 asset00311 was not passed in expected format []string&quot;</span><br></pre></td></tr></table></figure><p>**错误原因：**因为方法使用的是可变长参数，但是不知道该怎么给他传参数</p><h2 id="部署supply-v9-1到alljoinchannel通道">部署supply-v9.1到alljoinchannel通道</h2><h3 id="源码-v3">源码</h3><p>与v9版本相比，修改删除资产的方法为删除单个资产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;assetID=%s的资产不存在&quot;</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v9">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.1.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.1</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v9">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.1.tar.gz</code></p><h3 id="批准链码定义-v17">批准链码定义</h3><h4 id="查看已经安装的chaincode-v9">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.1:f733e8484c17cb415e38ac1fb14ed646622f2980762906c97d6e7e1c1a90f2c3</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v18">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --package-id $CC_PACKAGE_ID --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v9">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v9">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产-v2">删除资产</h4><p>资产ID列表：“asset001 asset0011 asset0012 asset003 asset0031 asset00311”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset00311&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="删除之后查询：">删除之后查询：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>返回的资产列表为空，删除方法验证成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:SomeStubMethod&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;部署新的智能合约到channel&quot;&gt;部署新的智能合约到channel&lt;/h1&gt;
&lt;h2 id=&quot;部署V1版本&quot;&gt;部署V1版本&lt;/h2&gt;
&lt;h3 id=&quot;打包&quot;&gt;打包&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    <category term="chaincode" scheme="https://guozhe001.github.io/tags/chaincode/"/>
    
  </entry>
  
  <entry>
    <title>开发智能合约</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</id>
    <published>2021-04-01T10:18:21.497Z</published>
    <updated>2021-04-01T10:18:21.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发智能合约">开发智能合约</h1><p>本次的智能合约从<a href="https://github.com/hyperledger/fabric-samples.git">fabric-samples</a>的<code>asset-transfer-basic/chaincode-go</code>拷贝然后进行了修改。</p><p>智能合约代码<code>smartcontract.go</code>如下：本文档更新不及时，可到<a href="https://github.com/guozhe001/supply-finance.git">源码地址</a>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">package chaincode</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/golang/protobuf/ptypes&quot;</span><br><span class="line">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// SmartContract provides functions for managing an Asset</span><br><span class="line">type SmartContract struct &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Asset describes basic details of what makes up a simple asset</span><br><span class="line">type Asset struct &#123;</span><br><span class="line">ID           string    `json:&quot;ID&quot;`</span><br><span class="line">Issuer       string    `json:&quot;issuer&quot;`</span><br><span class="line">Owner        string    `json:&quot;owner&quot;`</span><br><span class="line">Amount       int64     `json:&quot;amount&quot;`</span><br><span class="line">CreateDate   time.Time `json:&quot;createDate&quot;`</span><br><span class="line">EndDate      time.Time `json:&quot;endDate&quot;`</span><br><span class="line">ContractHash string    `json:&quot;contractHash&quot;`</span><br><span class="line">InvoiceHash  string    `json:&quot;invoiceHash&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// IssueVoucher 发行凭证</span><br><span class="line">func (s *SmartContract) IssueVoucher(ctx contractapi.TransactionContextInterface, assetID string, amount int64, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 创建资产</span><br><span class="line">return s.CreateAssetAndSave(ctx, assetID, amount, &quot;核心企业&quot;, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CreateAssetAndSave 创建资产并保存</span><br><span class="line">func (s *SmartContract) CreateAssetAndSave(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// createAsset issues a new asset to the world state with given details.</span><br><span class="line">func (s *SmartContract) createAsset(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) (*Asset, error) &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">if exists &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;the asset %s already exists&quot;, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(0, 6, 0), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取当前时间</span><br><span class="line">func getNow(ctx contractapi.TransactionContextInterface) (time.Time, error) &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line">return ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReadAsset returns the asset stored in the world state with given id.</span><br><span class="line">func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">if assetJSON == nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AssetExists returns true when asset with given ID exists in world state</span><br><span class="line">func (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assetJSON != nil, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAssetByID 根据资产ID转账</span><br><span class="line">func (s *SmartContract) TransferAssetByID(ctx contractapi.TransactionContextInterface, id string, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAsset updates the owner field of asset with given id in world state.</span><br><span class="line">func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, asset *Asset, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span><br><span class="line">if asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &gt; amount &#123; // 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span><br><span class="line">if newID == &quot;&quot; &#123;</span><br><span class="line">return fmt.Errorf(&quot;转账金额小于资产的金额时，newID必须不能为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 创建新的资产并保存</span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">// 更新旧资产的金额</span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &lt; amount &#123; // 如果资产的额度小于要转账的金额，则直接报错</span><br><span class="line">return fmt.Errorf(&quot;转账金额=%d,不能超过资产的金额=%d&quot;, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PutState 更新资产</span><br><span class="line">func (s *SmartContract) PutState(ctx contractapi.TransactionContextInterface, asset *Asset) error &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DelState 删除资产</span><br><span class="line">func (s *SmartContract) DelState(ctx contractapi.TransactionContextInterface, assetID string) error &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">if !exists &#123;</span><br><span class="line">return fmt.Errorf(&quot;assetID=%s的资产不存在&quot;, assetID)</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// GetAllAssets returns all assets found in world state</span><br><span class="line">func (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;</span><br><span class="line">// range query with empty string for startKey and endKey does an</span><br><span class="line">// open-ended query of all assets in the chaincode namespace.</span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">defer resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">var assets []*Asset</span><br><span class="line">for resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">assets = append(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assets, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开发智能合约&quot;&gt;开发智能合约&lt;/h1&gt;
&lt;p&gt;本次的智能合约从&lt;a href=&quot;https://github.com/hyperledger/fabric-samples.git&quot;&gt;fabric-samples&lt;/a&gt;的&lt;code&gt;asset-transfer-b</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>环境变量设置</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2021-04-01T10:18:21.497Z</published>
    <updated>2021-04-01T10:18:21.498Z</updated>
    
    <content type="html"><![CDATA[<p>以下所有的命令均在<code>supply-finance</code>目录下执行</p><h3 id="环境变量设置：">环境变量设置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/bin:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/config</span><br><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h3 id="核心企业GylCoreOrg1MSP-Admin：">核心企业GylCoreOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylCoreOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/users/Admin@core.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8051</span><br></pre></td></tr></table></figure><h3 id="一级供应商GylFOrg1MSP-Admin：">一级供应商GylFOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylFOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8053</span><br></pre></td></tr></table></figure><h3 id="二级供应商1GylSOrg1MSP-Admin：">二级供应商1GylSOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylSOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/users/Admin@s1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8055</span><br></pre></td></tr></table></figure><h3 id="二级供应商2GylSOrg2MSP-Admin：">二级供应商2GylSOrg2MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylSOrg2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/users/Admin@s2.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8151</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下所有的命令均在&lt;code&gt;supply-finance&lt;/code&gt;目录下执行&lt;/p&gt;
&lt;h3 id=&quot;环境变量设置：&quot;&gt;环境变量设置：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>创建网络</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-04-01T10:18:21.496Z</published>
    <updated>2021-04-01T10:18:21.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建网络">创建网络</h1><p>一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。</p><h2 id="生成加密材料">生成加密材料</h2><h3 id="创建配置文件">创建配置文件</h3><p>创建<code>supply-finance</code>文件夹，配置<code>config/crypto-config.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">supply.com</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_core_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">core.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_f_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">f1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s2.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="使用配置文件生成加密材料">使用配置文件生成加密材料</h3><p>使用下面的命令生成加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cryptogen generate --config=config/crypto-config.yaml --output=&quot;./organizations&quot;</span><br></pre></td></tr></table></figure><h4 id="使用加密材料生成创世纪区块">使用加密材料生成创世纪区块</h4><p>使用下面的命令生成系统创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TestOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">esis.block</span><br><span class="line">2020-12-24 15:41:52.702 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Creating system channel genesis block</span><br><span class="line">2020-12-24 15:41:52.724 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br></pre></td></tr></table></figure><p><strong>遇到的错误信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:39:28.696 CST [common.tools.configtxgen] main -&gt; FATA 005 Error on outputBlock: could not create bootstrapper: could not create channel group: could not create orderer group: cannot marshal metadata for orderer type etcdraft: cannot load client cert for consenter orderer.supply.com:8050: open /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/cryptogen/crypto-config/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls/server.crt: no such file or directory</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>$FABRIC_CFG_PATH/configtx.yaml</code>配置的加密文件地址不正确</p><h2 id="启动网络">启动网络</h2><p>各个组织的加密材料生成之后，在本地docker环境启动这些组织的peer节点。</p><h3 id="配置docker-compose-yml文件">配置docker-compose.yml文件</h3><p>在<code>supply-finance</code>目录下添加<code>docker/docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=8050</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LEDGERTYPE=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../system-genesis-block/genesis.block:/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.supply.com:/var/hyperledger/production/orderer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8050</span><span class="string">:8050</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.core.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.core.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.core.supply.com:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylCoreOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.core.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8051</span><span class="string">:8051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.f1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.f1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.f1.supply.com:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylFOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.f1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8053</span><span class="string">:8053</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s1.supply.com:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8055</span><span class="string">:8055</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s2.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s2.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s2.supply.com:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s2.supply.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8151</span><span class="string">:8151</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="使用docker-compose-yml配置文件启动各组织的服务">使用docker-compose.yml配置文件启动各组织的服务</h3><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f ./docker/docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>启动之后会在docker启动下面这些容器：</p><ul><li><a href="http://orderer.supply.com">orderer.supply.com</a>:排序节点</li><li><a href="http://peer0.core.supply.com">peer0.core.supply.com</a>:核心企业节点</li><li><a href="http://peer0.f1.supply.com">peer0.f1.supply.com</a>:一级供应商节点</li><li><a href="http://peer0.s1.supply.com">peer0.s1.supply.com</a>:二级供应商1节点</li><li><a href="http://peer0.s2.supply.com">peer0.s2.supply.com</a>:二级供应商2节点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建网络&quot;&gt;创建网络&lt;/h1&gt;
&lt;p&gt;一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。&lt;/p&gt;
&lt;h2 id=&quot;生成加密材料&quot;&gt;生成加密材料&lt;/h2&gt;
&lt;h3 id=&quot;创建配置文件&quot;&gt;创建配置文件&lt;/h</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>创建channel</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/</id>
    <published>2021-04-01T10:18:21.495Z</published>
    <updated>2021-04-01T10:18:21.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-创建Channel">2. 创建Channel</h2><p>参考：<a href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/">创建一个新的channel</a></p><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>coreandfirstchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile CoreAndFirstChannel -outputCreateChannelTx ./channel-artifacts/coreandfirstchannel.tx -channelID coreandfirstchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 14:29:40.728 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/configtx/configtx.yaml</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-24 14:29:40.750 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以核心企业(<a href="http://core.supply.com">core.supply.com</a>)管理员身份操作<code>peer</code>CLI;然后使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:59:28.470 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.490 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-24 15:59:28.497 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.701 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.708 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.917 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.924 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.134 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.141 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.349 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.357 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.566 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p><strong>报错信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel create -o localhost:8051  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line">2020-12-24 15:56:56.602 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 5.225381ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:57.611 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 3.907471ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:59.315 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.52302ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">Error: failed to create deliver client for orderer: orderer client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>peer channel create -o localhost:8051 </code>命令<code>-o</code>应该传入order服务的地址和端口。</p><h2 id="把核心企业和一级供应商的peer加入通道">把核心企业和一级供应商的peer加入通道</h2><h3 id="核心企业的peer加入通道">核心企业的peer加入通道</h3><p>使用下面的命令将核心企业的peer加入通道（确认已经设置了核心企业的环境变量）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:46:40.206 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 16:46:40.235 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息记录:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 16:18:23.258 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.895228ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:24.266 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 4.537447ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:25.659 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.16728ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>**错误原因：**未知。</p><p>**解决方式：**把Profiles里面的Organizations信息统一修改，与环境变量保持一致</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylCoreOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylFOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg2MSP</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把上面步骤中生成的加密材料信息、区块信息都删除，容器和volume全部删除；重新执行一遍。</p><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c coreandfirstchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:53:01.633 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:1,&quot;currentBlockHash&quot;:&quot;kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c=&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="一级供应商加入通道">一级供应商加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:06:30.499 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:06:30.527 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 17:01:05.904 CST [main] InitCmd -&gt; ERRO 001 Cannot run peer because cannot init crypto, specified path &quot;/Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp&quot; does not exist or cannot be accessed: stat /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp: no such file or directory</span><br></pre></td></tr></table></figure><p>**错误原因：**因为在设置环境变量时不是在<code>supply-finance</code>目录下设置的，所以设置的环境变量有问题，重新设置一下。</p><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><p>因为上面已经设置了一级供应商（GylFOrg1MSP）的环境变量，所以先设置GylFOrg1MSP的锚节点：</p><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:56:48.435 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:56:48.439 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-24 17:56:48.439 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-24 17:56:48.442 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;coreandfirstchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat coreandfirstchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:12:49.469 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel &#x27;coreandfirstchannel&#x27;: error authorizing update: ConfigUpdate for channel &#x27;channel1&#x27; but envelope for channel &#x27;coreandfirstchannel&#x27;</span><br></pre></td></tr></table></figure><p>**错误原因：**在修改配置的时候指定channel名称错误，修正重新执行一遍。</p><h5 id="验证，获取通道信息-peer-channel-getinfo-c-coreandfirstchannel">验证，获取通道信息:<code>peer channel getinfo -c coreandfirstchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">supply-finance$</span><span class="bash">     peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:19:31.275 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:2,&quot;currentBlockHash&quot;:&quot;h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=&quot;,&quot;previousBlockHash&quot;:&quot;kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为核心企业GylCoreOrg1MSP设置锚节点">为核心企业GylCoreOrg1MSP设置锚节点</h4><p>修改环境变量，然后拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.core.supply.com&quot;,&quot;port&quot;: 8051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;coreandfirstchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat coreandfirstchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:24:51.015 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:3,&quot;currentBlockHash&quot;:&quot;e52oT2HAiTxyeh4a30kTx32xLJAKIWa7rm6PVOn8eoA=&quot;,&quot;previousBlockHash&quot;:&quot;h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="部署测试chaincode来确认">部署测试chaincode来确认</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>basic.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\nJbasic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad\022\tbasic_1.0&quot; &gt;</span><br><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:02:47.351 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [d7e2224f63a1516ffeeed26ec5c8f69872141f5864b3602a1409679472692840] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:10:18.071 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-24 19:10:18.094 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n basic --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下,说明channel部署成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:&quot;asset1&quot;,&quot;color&quot;:&quot;blue&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Tomoko&quot;,&quot;appraisedValue&quot;:300&#125;,&#123;&quot;ID&quot;:&quot;asset2&quot;,&quot;color&quot;:&quot;red&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Brad&quot;,&quot;appraisedValue&quot;:400&#125;,&#123;&quot;ID&quot;:&quot;asset3&quot;,&quot;color&quot;:&quot;green&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Jin Soo&quot;,&quot;appraisedValue&quot;:500&#125;,&#123;&quot;ID&quot;:&quot;asset4&quot;,&quot;color&quot;:&quot;yellow&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Max&quot;,&quot;appraisedValue&quot;:600&#125;,&#123;&quot;ID&quot;:&quot;asset5&quot;,&quot;color&quot;:&quot;black&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Adriana&quot;,&quot;appraisedValue&quot;:700&#125;,&#123;&quot;ID&quot;:&quot;asset6&quot;,&quot;color&quot;:&quot;white&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Michel&quot;,&quot;appraisedValue&quot;:800&#125;]</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;error in simulation: failed to execute transaction 207cf99d289ffe9deca6a320aba59cc155fae02d19d51c9cfebc9943ffc7794d: could not launch chaincode basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad: error starting container: error starting container: API error (404): network _test not found&quot;</span><br></pre></td></tr></table></figure><p>**错误原因：**因为chaincode的容器没有启动成功,直接指定容器启动报错如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201224192439225.png" alt="image-20201224192439225"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/supply-finance$</span><span class="bash">     docker start bc47970e58a5</span></span><br><span class="line">Error response from daemon: network _test not found</span><br><span class="line">Error: failed to start containers: bc47970e58a5</span><br></pre></td></tr></table></figure><p><strong>问题解决：</strong></p><p>因为在<code>docker-compose.yml</code>文件中配置了下面的环境变量，在启动chaincode容器时会链接到这个网络。</p><p>之前的配置是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_test</span><br></pre></td></tr></table></figure><p>修改后重新启动，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;docker_test</span><br></pre></td></tr></table></figure><p>为什么修改成docker_test呢，可以查看使用<code>docker-compose</code>命令启动容器时的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating network &quot;docker_test&quot; with the default driver</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><h3 id="创建通道：-v2">创建通道：</h3><p>运行下面的程序来为<code>alljoinchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile AllPlayChannel -outputCreateChannelTx ./channel-artifacts/alljoinchannel.tx -channelID alljoinchannel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面的命令把交易发给order服务创建通道：</span></span><br><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel -f ./channel-artifacts/alljoinchannel.tx --outputBlock ./channel-artifacts/alljoinchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h2 id="加入通道">加入通道</h2><p>使用下面的命令将peer加入通道,所有节点都需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/alljoinchannel.block</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过获取通道信息确认加入成功</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h2 id="为各个组织设置锚节点">为各个组织设置锚节点</h2><h3 id="GylCoreOrg1MSP">GylCoreOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.core.supply.com&quot;,&quot;port&quot;: 8051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylFOrg1MSP">GylFOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s1.supply.com&quot;,&quot;port&quot;: 8055&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP-v2">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s2.supply.com&quot;,&quot;port&quot;: 8151&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-创建Channel&quot;&gt;2. 创建Channel&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/tags/channel/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>fabric命令记录.md</title>
    <link href="https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/fabric%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2021/04/01/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/fabric%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-01T10:18:21.494Z</published>
    <updated>2021-04-01T10:18:21.494Z</updated>
    
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
  </entry>
  
</feed>
