<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滴水成涓</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://guozhe001.github.io/atom.xml" rel="self"/>
  
  <link href="https://guozhe001.github.io/"/>
  <updated>2021-01-11T10:11:01.462Z</updated>
  <id>https://guozhe001.github.io/</id>
  
  <author>
    <name>guozhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Fabric中使用私有数据</title>
    <link href="https://guozhe001.github.io/2021/01/06/blockchain/fabric/%E5%9C%A8Fabric%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/"/>
    <id>https://guozhe001.github.io/2021/01/06/blockchain/fabric/%E5%9C%A8Fabric%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/</id>
    <published>2021-01-06T07:58:09.390Z</published>
    <updated>2021-01-11T10:11:01.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Fabric中使用私有数据">在Fabric中使用私有数据</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html" target="_blank" rel="noopener">Using Private Data in Fabric</a></p><p>This tutorial will demonstrate the use of Private Data Collections (PDC) to provide storage and retrieval of private data on the blockchain network for authorized peers of organizations. The collection is specified using a collection definition file containing the policies governing that collection.</p><p>本教程将演示如何使用私有数据集（PDC）为组织的有权限的peer在区块链网络上提供私有数据的存储和检索。使用包含定义该PDC策略的集合定义文件来管理PDC。</p><p>The information in this tutorial assumes knowledge of private data stores and their use cases. For more information, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data/private-data.html" target="_blank" rel="noopener">Private data</a>.</p><p>本教程中的信息假定您了解私有数据存储及其使用案例。有关更多信息，请查看<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data/private-data.html" target="_blank" rel="noopener">Private data</a>。</p><p>The tutorial will take you through the following steps to practice defining, configuring and using private data with Fabric:</p><p>本教程将指导您完成以下步骤，以练习定义、配置和使用Fabric私有数据：</p><ol><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-use-case" target="_blank" rel="noopener">Asset transfer private data sample use case</a> 资产转移私有数据样例使用方法</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-build-json" target="_blank" rel="noopener">Build a collection definition JSON file</a> 构建一个集合定义JSON文件</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-read-write-private-data" target="_blank" rel="noopener">Read and Write private data using chaincode APIs</a> 使用chaincode API读写私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-install-define-cc" target="_blank" rel="noopener">Deploy the private data smart contract to the channel</a> 部署私有数据智能合约到通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-register-identities" target="_blank" rel="noopener">Register identities</a> 注册身份</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-store-private-data" target="_blank" rel="noopener">Create an asset in private data</a> 在私有数据集中创建资产</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-query-authorized" target="_blank" rel="noopener">Query the private data as an authorized peer</a> 通过有权限的peer查询私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-query-unauthorized" target="_blank" rel="noopener">Query the private data as an unauthorized peer</a> 通过没有权限的peer查询私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-transfer-asset" target="_blank" rel="noopener">Transfer the Asset</a> 交易在私有数据集中的资产</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-purge" target="_blank" rel="noopener">Purge Private Data</a> 清除私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-indexes" target="_blank" rel="noopener">Using indexes with private data</a> 对私有数据使用索引</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-ref-material" target="_blank" rel="noopener">Additional resources</a> 额外资源</li></ol><p>This tutorial will deploy the <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-private-data/chaincode-go" target="_blank" rel="noopener">asset transfer private data sample</a> to the Fabric test network to demonstrate how to create, deploy, and use a collection of private data. You should have completed the task <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html" target="_blank" rel="noopener">Install Samples, Binaries, and Docker Images</a>.</p><p>这个教程会部署 <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-private-data/chaincode-go" target="_blank" rel="noopener">asset transfer private data sample</a>到Fabric的测试网络来演示如何创建、部署以及使用PDC。</p><h2 id="Asset-transfer-private-data-sample-use-case（资产转移私有数据样例使用方法）">Asset transfer private data sample use case（资产转移私有数据样例使用方法）</h2><p>This sample demonstrates the use of three private data collections, <code>assetCollection</code>, <code>Org1MSPPrivateCollection</code> &amp; <code>Org2MSPPrivateCollection</code> to transfer an asset between Org1 and Org2, using following use case:</p><p>这个样例使用以下用例演示使用三个私有数据集（PDC）来在Org1和Org2组织之间交易资产；这三个PDC为：<code>assetCollection</code>, <code>Org1MSPPrivateCollection</code> &amp; <code>Org2MSPPrivateCollection</code> 。</p><p>A member of Org1 creates a new asset, henceforth referred as owner. The public details of the asset, including the identity of the owner, are stored in the private data collection named <code>assetCollection</code>. The asset is also created with an appraised value supplied by the owner. The appraised value is used by each participant to agree to the transfer of the asset, and is only stored in owner organization’s collection. In our case, the initial appraisal value agreed by the owner is stored in the <code>Org1MSPPrivateCollection</code>.</p><p>组织Org1的一个成员创建一个新的资产，并拥有这个资产。公共的资产详情，包括拥有者的身份被存储在称作 <code>assetCollection</code>的私有数据集中。资产所有者也会为这个资产创建一个评估价值，通道上的每个参与者都使用这个评估价值来同意资产转让，并且它仅存储在所有者组织的集合中。在我们的案例中，所有者确认的初始评估值存储在<code>Org1MSPPrivateCollection</code>中。</p><p>To purchase the asset, the buyer needs to agree to the same appraised value as the asset owner. In this step, the buyer (a member of Org2) creates an agreement to trade and agree to an appraisal value using smart contract function <code>'AgreeToTransfer'</code>. This value is stored in <code>Org2MSPPrivateCollection</code> collection. Now, the asset owner can transfer the asset to the buyer using smart contract function <code>'TransferAsset'</code>. The <code>'TransferAsset'</code> function uses the hash on the channel ledger to confirm that the owner and the buyer have agreed to the same appraised value before transferring the asset.</p><p>要购买资产，购买者需要同意与资产所有者相同的评估价值。在此步骤中，买方（Org2的成员）使用智能合约的<code>“AgreeToTransfer”</code>方法来创建交易协议并同意评估价值。此值存储在<code>Org2MSPPrivateCollection</code>集合中。现在资产的拥有者可以通过智能合约中的<code>'TransferAsset'</code>方法来交易资产了。 <code>'TransferAsset'</code> 方法在转让资产之前先使用通道账本上的hash来验证买卖双方已经对相同的评估价格达成了一致。</p><p>Before we go through the transfer scenario, we will discuss how organizations can use private data collections in Fabric.</p><p>在此之前，我们将讨论组织如何在Fabric中使用私有数据集合。</p><h2 id="Build-a-collection-definition-JSON-file（构建一个集合定义JSON文件）">Build a collection definition JSON file（构建一个集合定义JSON文件）</h2><p>Before a set of organizations can transact using private data, all organizations on channel need to build a collection definition file that defines the private data collections associated with each chaincode. Data that is stored in a private data collection is only distributed to the peers of certain organizations instead of all members of the channel. The collection definition file describes all of the private data collections that organizations can read and write to from a chaincode.</p><p>在一组组织可以使用私有数据进行交易之前，通道上的所有组织需要构建一个集合定义文件，这个文件定义与每个链码关联的私有数据集合。存储在私有数据集合中的数据仅分发给相同组织的peer节点，而不是分发给通道的所有成员。集合定义文件描述了组织可以通过链码读写的所有私有数据集。</p><p>Each collection is defined by the following properties:</p><ul><li><code>name</code>: Name of the collection.</li><li><code>policy</code>: Defines the organization peers allowed to persist the collection data.</li><li><code>requiredPeerCount</code>: Number of peers required to disseminate the private data as a condition of the endorsement of the chaincode</li><li><code>maxPeerCount</code>: For data redundancy purposes, the number of other peers that the current endorsing peer will attempt to distribute the data to. If an endorsing peer goes down, these other peers are available at commit time if there are requests to pull the private data.</li><li><code>blockToLive</code>: For very sensitive information such as pricing or personal information, this value represents how long the data should live on the private database in terms of blocks. The data will live for this specified number of blocks on the private database and after that it will get purged, making this data obsolete from the network. To keep private data indefinitely, that is, to never purge private data, set the <code>blockToLive</code> property to <code>0</code>.</li><li><code>memberOnlyRead</code>: a value of <code>true</code> indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed read access to private data.</li><li><code>memberOnlyWrite</code>: a value of <code>true</code> indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed write access to private data.</li><li><code>endorsementPolicy</code>: defines the endorsement policy that needs to be met in order to write to the private data collection. The collection level endorsement policy overrides to chaincode level policy. For more information on building a policy definition refer to the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html" target="_blank" rel="noopener">Endorsement policies</a> topic.</li></ul><p>所有的集合都是用下面的属性来定义：</p><ul><li><code>name</code>: 集合名称</li><li><code>policy</code>: 定义允许持久化集合数据的组织的peer节点。</li><li><code>requiredPeerCount</code>: 传播私有数据所需的peer数目，以作为对链码的认可</li><li><code>maxPeerCount</code>: 为了数据冗余，当前合法peer将尝试向其分发数据的其他peer的数量。如果一个合法的peer挂了，如果有请求拉私有数据的请求，则这些其他peer在提交时可用。</li><li><code>blockToLive</code>: 对于如价格或个人信息这类非常敏感的信息，此值表示数据应在私有数据库的块上保存的时间。数据将在私有数据库块上保留指定的时间，然后清除，使该数据从网络上过时。要无限期保留私有数据，即从不清除私有数据，请将<code>blockToLive</code>属性设置为0。</li><li><code>memberOnlyRead</code>: 值为true表示peer节点自动强制只有属于集合成员组织的客户端才允许读取私有数据。</li><li><code>memberOnlyWrite</code>:值为true表示peer节点自动强制只有属于集合成员组织的客户端才允许写入私有数据。</li><li><code>endorsementPolicy</code>: 定义了写入私有数据集合需要满足的认可策略。集合级别的背书策略会覆盖chaincode级别的策略。有关构建策略定义的更多信息，请参考 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html" target="_blank" rel="noopener">Endorsement policies</a>主题。</li></ul><p>The same collection definition file needs to be deployed by all organizations that use the chaincode, even if the organization does not belong to any collections. In addition to the collections that are explicitly defined in a collection file, each organization has access to an implicit collection on their peers that can only be read by their organization. For an example that uses implicit data collections, see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html" target="_blank" rel="noopener">Secured asset transfer in Fabric</a>.</p><p>所有使用同一个chaincode的组织都要部署相同的集合定义文件，即使这个组织不属于任何集合。除了在集合文件中显式定义的集合之外，每个组织都可以访问其peer节点上的隐式集合，这些隐式集合只能由其组织读取。使用隐式数据集的例子可以看<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html" target="_blank" rel="noopener">Secured asset transfer in Fabric</a>。</p><p>The asset transfer private data example contains a collections_config.json file that defines three private data collection definitions: <code>assetCollection</code>, <code>Org1MSPPrivateCollection</code>, and <code>Org2MSPPrivateCollection</code>.</p><p>资产转移私有数据的示例包含一个collections_config.json文件，该文件定义了三个私有数据集合定义：<code>assetCollection</code>, <code>Org1MSPPrivateCollection</code>, and <code>Org2MSPPrivateCollection</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collections_config.json</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"assetCollection"</span>,</span><br><span class="line">   <span class="attr">"policy"</span>: <span class="string">"OR('Org1MSP.member', 'Org2MSP.member')"</span>,</span><br><span class="line">   <span class="attr">"requiredPeerCount"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"maxPeerCount"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"blockToLive"</span>:<span class="number">1000000</span>,</span><br><span class="line">   <span class="attr">"memberOnlyRead"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"memberOnlyWrite"</span>: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"Org1MSPPrivateCollection"</span>,</span><br><span class="line">   <span class="attr">"policy"</span>: <span class="string">"OR('Org1MSP.member')"</span>,</span><br><span class="line">   <span class="attr">"requiredPeerCount"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">"maxPeerCount"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"blockToLive"</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">"memberOnlyRead"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"memberOnlyWrite"</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">"endorsementPolicy"</span>: &#123;</span><br><span class="line">       <span class="attr">"signaturePolicy"</span>: <span class="string">"OR('Org1MSP.member')"</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">"name"</span>: <span class="string">"Org2MSPPrivateCollection"</span>,</span><br><span class="line">   <span class="attr">"policy"</span>: <span class="string">"OR('Org2MSP.member')"</span>,</span><br><span class="line">   <span class="attr">"requiredPeerCount"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">"maxPeerCount"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"blockToLive"</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">"memberOnlyRead"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"memberOnlyWrite"</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">"endorsementPolicy"</span>: &#123;</span><br><span class="line">       <span class="attr">"signaturePolicy"</span>: <span class="string">"OR('Org2MSP.member')"</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The <code>policy</code> property in the <code>assetCollection</code> definition specifies that both Org1 and Org2 can store the collection on their peers. The <code>memberOnlyRead</code> and <code>memberOnlyWrite</code> parameters are used to specify that only Org1 and Org2 clients can read and write to this collection.</p><p><code>assetCollection</code>定义中的<code>policy</code>属性指定Org1和Org2都可以在其peer节点上存储集合。 <code>memberOnlyRead</code> 和 <code>memberOnlyWrite</code> 参数被用于指定只有Org1和Org2的客户端可以读写这个集合。</p><p>The <code>Org1MSPPrivateCollection</code> collection allows only peers of Org1 to have the private data in their private database, while the <code>Org2MSPPrivateCollection</code> collection can only be stored by the peers of Org2. The <code>endorsementPolicy</code> parameter is used to create a collection specific endorsement policy. Each update to <code>Org1MSPPrivateCollection</code> or <code>Org2MSPPrivateCollection</code> needs to be endorsed by the organization that stores the collection on their peers. We will see how these collections are used to transfer the asset in the course of the tutorial.</p><p><code>Org1MSPPrivateCollection</code> 集合只允许Org1的peer节点在他们的私有数据库中拥有私有数据，而<code>Org2MSPPrivateCollection</code>集合只能由Org2的peer节点存储。 <code>endorsementPolicy</code> 参数用于创建特定集合的认可策略。对<code>Org1MSPPrivateCollection</code>或<code>Org2MSPPrivateCollection</code>的每次更新都需要由将集合存储在其peer节点的组织认可。在本教程中，我们将了解如何使用这些集合来转移资产。</p><p>This collection definition file is deployed when the chaincode definition is committed to the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit" target="_blank" rel="noopener">peer lifecycle chaincode commit command</a>. More details on this process are provided in Section 3 below.</p><p>这个集合定义文件是在使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit" target="_blank" rel="noopener">peer lifecycle chaincode commit command</a>把链码定义提交到通道时被部署的。</p><h2 id="Read-and-Write-private-data-using-chaincode-APIs（使用chaincode-API读写私有数据）">Read and Write private data using chaincode APIs（使用chaincode API读写私有数据）</h2><p>The next step in understanding how to privatize data on a channel is to build the data definition in the chaincode. The asset transfer private data sample divides the private data into three separate data definitions according to how the data will be accessed.</p><p>下一步是了解如何在链码中建立数据定义来对通道上的数据进行私有化。资产转移私有数据实例根据访问数据的方式将私有数据分为三个单独的数据定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Peers in Org1 and Org2 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">       Type  <span class="keyword">string</span> <span class="string">`json:"objectType"`</span> <span class="comment">//Type is used to distinguish the various types of objects in state database</span></span><br><span class="line">       ID    <span class="keyword">string</span> <span class="string">`json:"assetID"`</span></span><br><span class="line">       Color <span class="keyword">string</span> <span class="string">`json:"color"`</span></span><br><span class="line">       Size  <span class="keyword">int</span>    <span class="string">`json:"size"`</span></span><br><span class="line">       Owner <span class="keyword">string</span> <span class="string">`json:"owner"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetPrivateDetails describes details that are private to owners</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Only peers in Org1 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> AssetPrivateDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">       ID             <span class="keyword">string</span> <span class="string">`json:"assetID"`</span></span><br><span class="line">       AppraisedValue <span class="keyword">int</span>    <span class="string">`json:"appraisedValue"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only peers in Org2 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> AssetPrivateDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">       ID             <span class="keyword">string</span> <span class="string">`json:"assetID"`</span></span><br><span class="line">       AppraisedValue <span class="keyword">int</span>    <span class="string">`json:"appraisedValue"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Specifically, access to the private data will be restricted as follows:</p><ul><li><code>objectType, color, size, and owner</code> are stored in <code>assetCollection</code> and hence will be visible to members of the channel per the definition in the collection policy (Org1 and Org2).</li><li><code>AppraisedValue</code> of an asset is stored in collection <code>Org1MSPPrivateCollection</code> or <code>Org2MSPPrivateCollection</code> , depending on the owner of the asset. The value is only accessible to the users who belong to the organization that can store the collection.</li></ul><p>具体来说，对私有数据的访问将受到以下限制：</p><ul><li><code>objectType, color, size, and owner</code> 被存储在 <code>assetCollection</code> 因此，根据集合策略中的定义，这些数据对通道上的Org1和Org2是可以访问的。</li><li>资产的评估价值被存储在 <code>Org1MSPPrivateCollection</code> 或 <code>Org2MSPPrivateCollection</code> 集合中，取决于资产的所有者。只有属于可以存储集合的组织的用户才能访问该评估值。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在Fabric中使用私有数据&quot;&gt;在Fabric中使用私有数据&lt;/h1&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="Secured" scheme="https://guozhe001.github.io/tags/Secured/"/>
    
    <category term="Private Data" scheme="https://guozhe001.github.io/tags/Private-Data/"/>
    
  </entry>
  
  <entry>
    <title>背书策略（Endorsement policies）</title>
    <link href="https://guozhe001.github.io/2021/01/06/blockchain/fabric/Endorsement%20policies%E8%83%8C%E4%B9%A6%E7%AD%96%E7%95%A5/"/>
    <id>https://guozhe001.github.io/2021/01/06/blockchain/fabric/Endorsement%20policies%E8%83%8C%E4%B9%A6%E7%AD%96%E7%95%A5/</id>
    <published>2021-01-06T02:45:38.665Z</published>
    <updated>2021-01-06T08:03:19.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背书策略">背书策略</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html#endorsement-policy-syntax" target="_blank" rel="noopener">Endorsement policies</a></p><p>。。。省略部分</p><h2 id="Setting-chaincode-level-endorsement-policies-设置链码级别的背书策略">Setting chaincode-level endorsement policies(设置链码级别的背书策略)</h2><p>Chaincode-level endorsement policies are agreed to by channel members when they approve a chaincode definition for their organization. A sufficient number of channel members need to approve a chaincode definition to meet the <code>Channel/Application/LifecycleEndorsement</code> policy, which by default is set to a majority of channel members, before the definition can be committed to the channel. Once the definition has been committed, the chaincode is ready to use. Any invoke of the chaincode that writes data to the ledger will need to be validated by enough channel members to meet the endorsement policy.</p><p>通道成员在为其组织批准链码定义时，会同意链码级认可策略。需要足够数量的通道成员批准链码定义才能满足Channel / Application / LifecycleEndorsement策略，该策略默认情况下设置为大多数通道成员，然后才能将链码定义提交给通道。提交定义后，便可以使用链码了。任何将数据写入账本的链码的调用都需要由足够的通道成员来验证，以满足背书策略。</p><p>You can specify an endorsement policy for a chaincode using the Fabric SDKs. For an example, visit the <a href="https://hyperledger.github.io/fabric-sdk-node/master/tutorial-chaincode-lifecycle.html" target="_blank" rel="noopener">How to install and start your chaincode</a> in the Node.js SDK documentation. You can also create an endorsement policy from your CLI when you approve and commit a chaincode definition with the Fabric peer binaries by using the <code>--signature-policy</code> flag.</p><p>你可以使用Fabric SDKs来为链码指定背书策略，访问<a href="https://hyperledger.github.io/fabric-sdk-node/master/tutorial-chaincode-lifecycle.html" target="_blank" rel="noopener">How to install and start your chaincode</a>来查看使用Node.js SDK的文档。你也可以通过CLI在批准和提交链码定义时来创建背书策略，使用Fabric的peer可执行程序时使用 <code>--signature-policy</code> 标志来实现这个功能。</p><p>For example：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --signature-policy "AND('Org1.member', 'Org2.member')" --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>The above command approves the chaincode definition of <code>mycc</code> with the policy <code>AND('Org1.member', 'Org2.member')</code> which would require that a member of both Org1 and Org2 sign the transaction. After a sufficient number of channel members approve a chaincode definition for <code>mycc</code>, the definition and endorsement policy can be committed to the channel using the command below:</p><p>上面的命令使用 <code>AND('Org1.member', 'Org2.member')</code> 策略来批准<code>mycc</code>的链码定义，这个策略要求Org1和Org2的成员都需要对一笔交易进行签名。在有足够的通道成员批准了<code>mycc</code>的链码定义之后，这个定义和背书策略就可以使用下面的命令被提交到通道了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID mychannel --signature-policy "AND('Org1.member', 'Org2.member')" --name mycc --version 1.0 --sequence 1 --init-required --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>Notice that, if the identity classification is enabled (see <a href="https://hyperledger-fabric.readthedocs.io/en/latest/msp.html" target="_blank" rel="noopener">Membership Service Providers (MSP)</a>), one can use the <code>PEER</code> role to restrict endorsement to only peers.</p><p>请注意，如果启用了身份分类（请参阅 <a href="https://hyperledger-fabric.readthedocs.io/en/latest/msp.html" target="_blank" rel="noopener">Membership Service Providers (MSP)</a>），则可以使用<code>PEER</code>角色将背书限制为仅peer节点。</p><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --signature-policy "AND('Org1.peer', 'Org2.peer')" --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>In addition to the specifying an endorsement policy from the CLI or SDK, a chaincode can also use policies in the channel configuration as endorsement policies. You can use the <code>--channel-config-policy</code> flag to select a channel policy with format used by the channel configuration and by ACLs.</p><p>除了从CLI或SDK中指定背书策略以外，链码还可以使用通道配置中的策略作为背书策略。你可以使用<code>--channel-config-policy</code>标志来选择一个通道策略，其格式由通道配置和ACL使用。</p><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --channel-config-policy Channel/Application/Admins --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>If you do not specify a policy, the chaincode definition will use the <code>Channel/Application/Endorsement</code> policy by default, which requires that a transaction be validated by a majority of channel members. This policy depends on the membership of the channel, so it will be updated automatically when organizations are added or removed from a channel. One advantage of using channel policies is that they can be written to be updated automatically with channel membership.</p><p>如果你不指定背书策略，链码定义会使用默认的 <code>Channel/Application/Endorsement</code>策略，这个策略要求交易必须经过大多数通道成员的验证。该策略取决于通道成员，因此从通道中添加或删除组织时，它将自动更新。使用通道策略的一个优势是，可以将其编写为根据通道成员数量自动更新。</p><p>If you specify an endorsement policy using the <code>--signature-policy</code> flag or the SDK, you will need to update the policy when organizations join or leave the channel. A new organization added to the channel after the chaincode has been defined will be able to query a chaincode (provided the query has appropriate authorization as defined by channel policies and any application level checks enforced by the chaincode) but will not be able to execute or endorse the chaincode. Only organizations listed in the endorsement policy syntax will be able sign transactions.</p><p>如果你使用 <code>--signature-policy</code> 标志或者SDK指定了背书策略，你需要在组织加入或者离开通道时更新这个策略。一个新的组织在链码被定义好之后加入这个通道，这个组织可以查询这个链码（提供查询具有通道策略和链码强制执行的任何应用程序级别检查所定义的适当授权），但是不能够执行或认可链码。只有组织在认可策略语法的列表中之后，组织才能签署交易。</p><h3 id="个人验证">个人验证</h3><p>chaincode如果不设置背书策略，则默认的背书策略是：<code> /Channel/Application/Endorsement</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apple$</span><span class="bash"> peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span></span><br><span class="line">&#123;</span><br><span class="line">"sequence": 6,</span><br><span class="line">"version": "3.0",</span><br><span class="line">"endorsement_plugin": "escc",</span><br><span class="line">"validation_plugin": "vscc",</span><br><span class="line">"validation_parameter": "EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==",</span><br><span class="line">"collections": &#123;&#125;,</span><br><span class="line">"approvals": &#123;</span><br><span class="line">"GylCoreOrg1MSP": true,</span><br><span class="line">"GylFOrg1MSP": true,</span><br><span class="line">"GylSOrg1MSP": true,</span><br><span class="line">"GylSOrg2MSP": true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置背书策略为<code>--signature-policy &quot;OR('GylCoreOrg1MSP.peer','GylFOrg1MSP.peer','GylSOrg1MSP.peer','GylSOrg2MSP.peer')&quot;</code>，再次查询链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apple$</span><span class="bash"> peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span></span><br><span class="line">&#123;</span><br><span class="line">"sequence": 7,</span><br><span class="line">"version": "3.0",</span><br><span class="line">"endorsement_plugin": "escc",</span><br><span class="line">"validation_plugin": "vscc",</span><br><span class="line">"validation_parameter": "CmUSFBISCAESAggAEgIIARICCAISAggDGhQSEgoOR3lsQ29yZU9yZzFNU1AQAxoREg8KC0d5bEZPcmcxTVNQEAMaERIPCgtHeWxTT3JnMU1TUBADGhESDwoLR3lsU09yZzJNU1AQAw==",</span><br><span class="line">"collections": &#123;&#125;,</span><br><span class="line">"approvals": &#123;</span><br><span class="line">"GylCoreOrg1MSP": true,</span><br><span class="line">"GylFOrg1MSP": true,</span><br><span class="line">"GylSOrg1MSP": true,</span><br><span class="line">"GylSOrg2MSP": true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解码之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e</span><br><span class="line">GylCoreOrg1MSP</span><br><span class="line">GylFOrg1MSP</span><br><span class="line">GylSOrg1MSP</span><br><span class="line">GylSOrg2MSP</span><br></pre></td></tr></table></figure><h3 id="Endorsement-policy-syntax（背书策略的语法）">Endorsement policy syntax（背书策略的语法）</h3><p>As you can see above, policies are expressed in terms of principals (“principals” are identities matched to a role). Principals are described as <code>'MSP.ROLE'</code>, where <code>MSP</code> represents the required MSP ID and <code>ROLE</code> represents one of the four accepted roles: <code>member</code>, <code>admin</code>, <code>client</code>, and <code>peer</code>.</p><p>正如您在上面看到的那样，策略是根据主体表达的（“主体”是与角色匹配的身份）。主体被描述为<code>'MSP.ROLE'</code>，其中<code>MSP</code>代表所需的MSP ID,<code>ROLE</code> 代表四个公认的角色之一：<code>member</code>, <code>admin</code>, <code>client</code>，和 <code>peer</code>。</p><p>Here are a few examples of valid principals:</p><ul><li><code>'Org0.admin'</code>: any administrator of the <code>Org0</code> MSP</li><li><code>'Org1.member'</code>: any member of the <code>Org1</code> MSP</li><li><code>'Org1.client'</code>: any client of the <code>Org1</code> MSP</li><li><code>'Org1.peer'</code>: any peer of the <code>Org1</code> MSP</li></ul><p>The syntax of the language is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPR(E[, E...])</span><br></pre></td></tr></table></figure><p>Where <code>EXPR</code> is either <code>AND</code>, <code>OR</code>, or <code>OutOf</code>, and <code>E</code> is either a principal (with the syntax described above) or another nested call to <code>EXPR</code>.</p><p><code>EXPR</code> 可以为<code>AND</code>, <code>OR</code>, or <code>OutOf</code>，<code>E</code>可以是一个具有上面语法的主体，也可以是对另一个<code>EXPR</code>的嵌套调用。</p><p>For example:</p><ul><li><p><code>AND('Org1.member', 'Org2.member', 'Org3.member')</code> requests one signature from each of the three principals.</p></li><li><p><code>OR('Org1.member', 'Org2.member')</code> requests one signature from either one of the two principals.</p></li><li><p><code>OR('Org1.member', AND('Org2.member', 'Org3.member'))</code> requests either one signature from a member of the <code>Org1</code> MSP or one signature from a member of the <code>Org2</code> MSP and one signature from a member of the <code>Org3</code> MSP.</p></li><li><p><code>OutOf(1, 'Org1.member', 'Org2.member')</code>, which resolves to the same thing as <code>OR('Org1.member', 'Org2.member')</code>.</p></li><li><p>Similarly, <code>OutOf(2, 'Org1.member', 'Org2.member')</code> is equivalent to <code>AND('Org1.member', 'Org2.member')</code>, and <code>OutOf(2, 'Org1.member', 'Org2.member', 'Org3.member')</code> is equivalent to <code>OR(AND('Org1.member', 'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', 'Org3.member'))</code>.</p></li></ul><p>例如：</p><ul><li><p><code>AND('Org1.member', 'Org2.member', 'Org3.member')</code> 三个主体都需要进行签名。</p></li><li><p><code>OR('Org1.member', 'Org2.member')</code> 只需要两个主体的其中一个提供签名。</p></li><li><p><code>OR('Org1.member', AND('Org2.member', 'Org3.member'))</code> 需要Org1提供签名，或者需要Org2和Org3同时提供签名。</p></li><li><p><code>OutOf(1, 'Org1.member', 'Org2.member')</code>, 和 <code>OR('Org1.member', 'Org2.member')</code>做的事情一样。</p></li><li><p>相似的, <code>OutOf(2, 'Org1.member', 'Org2.member')</code> 与 <code>AND('Org1.member', 'Org2.member')</code>相同</p></li><li><p><code>OutOf(2, 'Org1.member', 'Org2.member', 'Org3.member')</code> 与 <code>OR(AND('Org1.member', 'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', 'Org3.member'))</code>相同。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背书策略&quot;&gt;背书策略&lt;/h1&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html#endorsement-policy-sy</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="Endorsement policies" scheme="https://guozhe001.github.io/tags/Endorsement-policies/"/>
    
  </entry>
  
  <entry>
    <title>fabric命令记录.md</title>
    <link href="https://guozhe001.github.io/2021/01/05/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/fabric%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2021/01/05/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/fabric%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-05T03:42:42.207Z</published>
    <updated>2021-01-05T03:43:47.527Z</updated>
    
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
  </entry>
  
  <entry>
    <title>隐秘交易.md</title>
    <link href="https://guozhe001.github.io/2021/01/05/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/"/>
    <id>https://guozhe001.github.io/2021/01/05/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/</id>
    <published>2021-01-05T03:28:50.056Z</published>
    <updated>2021-01-11T09:40:02.791Z</updated>
    
    <content type="html"><![CDATA[<p>自己开发的智能合约在channel上的所有成员都可以看到，这不符合现实世界中的交易规则。理论上两个组织之间的交易是不允许别人看到的。所以这次我使用fabric-samples提供的<code>asset-transfer-secured-agreement</code>来作为我的供应链金融区块链项目的chaincode。</p><h2 id="部署链码">部署链码</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package secured_supply.5.tar.gz --path ./asset-transfer-secured-agreement/chaincode-go --lang golang --label secured_supply_15.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-每个peer都要安装：">安装链码包,每个peer都要安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install secured_supply.5.tar.gz</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=secured_supply_15.0:3ea87d3c0b13f8711e0bacbd9dcb8965acdde79241006f9bbfc89dfb6a822126</span><br></pre></td></tr></table></figure><h4 id="批准链码定义，每个peer都要执行此命令：">批准链码定义，每个peer都要执行此命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 15.0 --package-id $CC_PACKAGE_ID --sequence 15 --signature-policy "OR('GylCoreOrg1MSP.member','GylFOrg1MSP.member','GylSOrg1MSP.member','GylSOrg2MSP.member')" --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><h4 id="检查channel上的成员是否已经批准了链码定义：">检查channel上的成员是否已经批准了链码定义：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 15.0 --sequence 15 --signature-policy "OR('GylCoreOrg1MSP.member','GylFOrg1MSP.member','GylSOrg1MSP.member','GylSOrg2MSP.member')" --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><h4 id="在所有组织都批准之后，执行下面的命令将链码定义提交到通道：">在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 15.0 --sequence 15 --signature-policy "OR('GylCoreOrg1MSP.member','GylFOrg1MSP.member','GylSOrg1MSP.member','GylSOrg2MSP.member')" --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span><br></pre></td></tr></table></figure><h2 id="调用链码">调用链码</h2><h3 id="创建资产">创建资产</h3><p><em><strong>资产的内容需要打个问号，因为这个资产在后面需要被交易，如果资产的内容不能够修改那么合同和发票的hash应该不在资产的详细信息里面，这里先放这里后面再改</strong></em></p><p><em><strong>发行者能否放在外面而不是资产里面？哪种方式比较好呢？</strong></em></p><p>在核心企业的节点创建一个资产如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n "&#123;\"objectType\":\"asset_properties\",\"assetID\":\"asset010\",\"issuer\":\"GylCoreOrg1MSP\",\"amount\":1000,\"createDate\":\"2020-01-11T06:57:06.963617Z\",\"endDate\":\"2021-07-11T06:57:06.963617Z\",\"salt\":\"224cba6c547aecc76ab6acfac41d12dfd96e7165\"&#125;" | base64 | tr -d \\n)</span><br></pre></td></tr></table></figure><p>在核心企业的节点上调用chaincode，创建资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"CreateAsset","Args":["asset010", "A new asset for GylCoreOrg1MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>在私有数据集中查询刚才创建的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset010"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>成功结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset_properties"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset010"</span>,</span><br><span class="line">  <span class="attr">"issuer"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">"createDate"</span>: <span class="string">"2020-01-11T06:57:06.963617Z"</span>,</span><br><span class="line">  <span class="attr">"endDate"</span>: <span class="string">"2021-07-11T06:57:06.963617Z"</span>,</span><br><span class="line">  <span class="attr">"salt"</span>: <span class="string">"224cba6c547aecc76ab6acfac41d12dfd96e7165"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询账本来查看公共记录，所有在channel上的成员都可以查询得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset010"]&#125;'</span><br></pre></td></tr></table></figure><p>返回结果，channel上的成员只能看到资产的部分信息，详细信息是无法看到的。：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset010"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"A new asset for GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资产拥有者更改资产的公共信息">资产拥有者更改资产的公共信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset010","This asset is for sale"]&#125;'</span><br></pre></td></tr></table></figure><p>上面的方法，在核心企业的peer节点返回日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-01-07 16:07:43.589 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>其他的组织如果想要调用这个链码的方法更改信息，则会报错，因为属于核心企业的资产别人不可以更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"a client from GylFOrg1MSP cannot update the description of a asset owned by GylCoreOrg1MSP"</span><br></pre></td></tr></table></figure><h3 id="资产交易">资产交易</h3><h4 id="允许出售资产">允许出售资产</h4><p>现在核心企业要与一级供应商交易核心企业的资产。首先核心企业与一级供应商要在链下对价格达成共识，并且核心企业要把资产的详情也通过链下的通道发送给一级供应商。之后买卖双方就可以对价格达成共识了。</p><h5 id="核心企业将资产的价格设置为1000：">核心企业将资产的价格设置为1000：</h5><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset007\",\"trade_id\":\"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\",\"price\":1000&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToSell","Args":["asset007"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetSalesPrice","Args":["asset007"]&#125;'</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价1000">一级供应商出价1000</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> ASSET_PROPERTIES=$(<span class="built_in">echo</span> -n <span class="string">"&#123;\"object_type\":\"asset_properties\",\"asset_id\":\"asset006\",\"issuer\":\"GylCoreOrg1MSP\",\"amount\":1000,\"createDate\":\"2020-01-11T06:57:06.963617Z\",\"endDate\":\"2021-07-11T06:57:06.963617Z\",\"salt\":\"224cba6c547aecc76ab6acfac41d12dfd96e7165\"&#125;"</span> | base64 | tr -d \\n)</span></span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"VerifyAssetProperties","Args":["asset007"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset007\",\"trade_id\":\"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\",\"price\":1000&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToBuy","Args":["asset007"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetBidPrice","Args":["asset007"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:"asset price does not exist: asset001"</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset007","GylFOrg1MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\",\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset001"]&#125;'</span><br></pre></td></tr></table></figure><h3 id="交易验证">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset005","This asset is not for sale now"]&#125;'</span><br></pre></td></tr></table></figure><p>然后通过所有四个组织查询资产ID为asset005的公共信息如下，说明一级供应商已经获得了修改权限并修改了这个资产的公共信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset005"]&#125;'|jq</span><br><span class="line">&#123;</span><br><span class="line">  "objectType": "asset",</span><br><span class="line">  "assetID": "asset005",</span><br><span class="line">  "ownerOrg": "GylFOrg1MSP",</span><br><span class="line">  "publicDescription": "This asset is not for sale now"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset005","This asset is not for sale again"]&#125;'</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP"</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset005"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>再一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="资产拆分">资产拆分</h2><h3 id="调用拆分方法">调用拆分方法</h3><p>完成资产的拆分chaincode的更新之后，调用拆分的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"SplitAsset","Args":["asset010", "500"]&#125;'</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果">验证拆分结果</h3><h4 id="私有数据验证">私有数据验证</h4><h5 id="第一个资产：">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset0101"]&#125;'|jq</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "objectType": "asset_properties",</span><br><span class="line">  "assetID": "asset0101",</span><br><span class="line">  "issuer": "GylCoreOrg1MSP",</span><br><span class="line">  "amount": 500,</span><br><span class="line">  "createDate": "2020-01-11T06:57:06.963617Z",</span><br><span class="line">  "endDate": "2021-07-11T06:57:06.963617Z",</span><br><span class="line">  "salt": "224cba6c547aecc76ab6acfac41d12dfd96e7165"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset0102"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset_properties"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset0102"</span>,</span><br><span class="line">  <span class="attr">"issuer"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">"createDate"</span>: <span class="string">"2020-01-11T06:57:06.963617Z"</span>,</span><br><span class="line">  <span class="attr">"endDate"</span>: <span class="string">"2021-07-11T06:57:06.963617Z"</span>,</span><br><span class="line">  <span class="attr">"salt"</span>: <span class="string">"224cba6c547aecc76ab6acfac41d12dfd96e7165"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset010"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下，原始资产已经没有了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:"asset private details does not exist in client org's collection: asset010"</span><br></pre></td></tr></table></figure><h4 id="公共数据验证">公共数据验证</h4><h5 id="第一个资产：-v2">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset0101"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下，channel上的所有的组织都可以看到相同的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset0101"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"A new asset for GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset010"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v2">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset0102"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset0102"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"A new asset for GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset010"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：-v2">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset010"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下，chaincode有问题，拆分资产之后原始资产的状态应该改变：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset010"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"已拆分"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"delete"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易">拆分后的资产交易</h2><h4 id="核心允许出售资产，价格设置为500：">核心允许出售资产，价格设置为500：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset0101\",\"trade_id\":\"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\",\"price\":500&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToSell","Args":["asset0101"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetSalesPrice","Args":["asset0101"]&#125;'</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价500">一级供应商出价500</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n "&#123;\"objectType\":\"asset_properties\",\"assetID\":\"asset0101\",\"issuer\":\"GylCoreOrg1MSP\",\"amount\":500,\"createDate\":\"2020-01-11T06:57:06.963617Z\",\"endDate\":\"2021-07-11T06:57:06.963617Z\",\"salt\":\"224cba6c547aecc76ab6acfac41d12dfd96e7165\"&#125;" | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"VerifyAssetProperties","Args":["asset0101"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset0101\",\"trade_id\":\"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\",\"price\":500&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToBuy","Args":["asset0101"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetBidPrice","Args":["asset0101"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:"asset price does not exist: asset001"</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商-v2">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset0101","GylFOrg1MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\",\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset0101"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset0101"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylFOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"A new asset for GylCoreOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset010"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v2">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：-v2">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset0101","This asset is not for sale now"]&#125;'</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset0101"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylFOrg1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"This asset is not for sale now"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset010"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息-v2">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset0101","This asset is not for sale again"]&#125;'</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP"</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息-v2">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset0101"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="一级供应商与二级供应商交易">一级供应商与二级供应商交易</h2><p>调用拆分的方法，将资产拆分成200和300：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"SplitAsset","Args":["asset0101", "200"]&#125;'</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果-v2">验证拆分结果</h3><h4 id="私有数据验证-v2">私有数据验证</h4><h5 id="第一个资产：-v3">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset01011"]&#125;'|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v3">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset01012"]&#125;'|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，原始资产已经没有了：">原始的资产，原始资产已经没有了：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset0101"]&#125;'|jq</span><br></pre></td></tr></table></figure><h4 id="公共数据验证-v2">公共数据验证</h4><h5 id="第一个资产：-v4">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset01011"]&#125;'|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v4">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset01012"]&#125;'|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，拆分资产之后原始资产的状态应该改变：">原始的资产，拆分资产之后原始资产的状态应该改变：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset0101"]&#125;'|jq</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易-v2">拆分后的资产交易</h2><h4 id="一级供应商允许出售资产，设置价格：">一级供应商允许出售资产，设置价格：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset01012\",\"trade_id\":\"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\",\"price\":300&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToSell","Args":["asset01012"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetSalesPrice","Args":["asset01012"]&#125;'</span><br></pre></td></tr></table></figure><h5 id="二级供应商2出价300">二级供应商2出价300</h5><p>在二级供应商2出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n "&#123;\"objectType\":\"asset_properties\",\"assetID\":\"asset01012\",\"issuer\":\"GylCoreOrg1MSP\",\"amount\":300,\"createDate\":\"2020-01-11T06:57:06.963617Z\",\"endDate\":\"2021-07-11T06:57:06.963617Z\",\"salt\":\"224cba6c547aecc76ab6acfac41d12dfd96e7165\"&#125;" | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"VerifyAssetProperties","Args":["asset01012"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset01012\",\"trade_id\":\"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\",\"price\":300&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"AgreeToBuy","Args":["asset01012"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetBidPrice","Args":["asset01012"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:"asset price does not exist: asset001"</span><br></pre></td></tr></table></figure><h4 id="一级供应商把资产转移给二级供应商2">一级供应商把资产转移给二级供应商2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset01012","GylSOrg2MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\",\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ReadAsset","Args":["asset01012"]&#125;'|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset01012"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylSOrg2MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"This asset is not for sale now"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset0101"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v3">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证二级级供应商2可以修改自己的资产的公共属性：">验证二级级供应商2可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"ChangePublicDescription","Args":["asset01012","hello i am GylSOrg2MSP"]&#125;'</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset01012"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"GylSOrg2MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"hello i am GylSOrg2MSP"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"enable"</span>,</span><br><span class="line">  <span class="attr">"parentID"</span>: <span class="string">"asset0101"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证只有二级级供应商2才可以查询这个资产的私有信息">验证只有二级级供应商2才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset01012"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自己开发的智能合约在channel上的所有成员都可以看到，这不符合现实世界中的交易规则。理论上两个组织之间的交易是不允许别人看到的。所以这次我使用fabric-samples提供的&lt;code&gt;asset-transfer-secured-agreement&lt;/code&gt;来作</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>在Fabric中交易受保护的资产</title>
    <link href="https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/"/>
    <id>https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/</id>
    <published>2020-12-31T07:00:21.116Z</published>
    <updated>2021-01-11T10:13:11.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Fabric中交易受保护的资产">在Fabric中交易受保护的资产</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html" target="_blank" rel="noopener">Secured asset transfer in Fabric</a></p><p>This tutorial will demonstrate how an asset can be represented and traded between organizations in a Hyperledger Fabric blockchain channel, while keeping details of the asset and transaction private using private data. Each on-chain asset is a non-fungible token (NFT) that represents a specific asset having certain immutable metadata properties (such as size and color) with a unique owner. When the owner wants to sell the asset, both parties need to agree to the same price before the asset is transferred. The private asset transfer smart contract enforces that only the owner of the asset can transfer the asset. In the course of this tutorial, you will learn how Fabric features such as state based endorsement, private data, and access control come together to provide secured transactions that are both private and verifiable.</p><p>本文档会演示如何在Hyperledger Fabric区块链的通道中的组织之间表示和交易资产，同时保持资产和交易的私有性。链上的每个资产都是一个NFT（non-fungible token，不可替代令牌），这个NFT代表具有唯一拥有者、具有某些不变的元数据属性（例如大小和颜色）的特定资产。当所有者想要出售资产时，双方需要在转让资产之前达成一致的价格。私有资产转让智能合约强制规定只有资产所有者才能转让资产。在本教程的过程中，您将学习如何把Fabric的特性（如基于状态的背书、私有数据和访问控制）组合在一起，以提供私有且可验证的安全交易。</p><p>This tutorial will deploy the <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-secured-agreement/chaincode-go" target="_blank" rel="noopener">secured asset transfer sample</a> to demonstrate how to transfer a private asset between two organizations without publicly sharing data. You should have completed the task <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/install.html#install-samples-binaries-and-docker-images" target="_blank" rel="noopener">Install Samples, Binaries, and Docker Images</a>.</p><p>本教程会部署 <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-secured-agreement/chaincode-go" target="_blank" rel="noopener">secured asset transfer sample</a> 来演示如何在两个组织之间转移私有资产而不公开共享数据。</p><h2 id="Scenario-requirements（方案要求）">Scenario requirements（方案要求）</h2><p>The private asset transfer scenario is bound by the following requirements:</p><ul><li>An asset may be issued by the first owner’s organization (in the real world issuance may be restricted to some authority that certifies an asset’s properties).</li><li>Ownership is managed at the organization level (the Fabric permissioning scheme would equally support ownership at an individual identity level within an organization).</li><li>The asset identifier and owner is stored as public channel data for all channel members to see.</li><li>The asset metadata properties however are private information known only to the asset owner (and prior owners).</li><li>An interested buyer will want to verify an asset’s private properties.</li><li>An interested buyer will want to verify an asset’s provenance, specifically the asset’s origin and chain of custody. They will also want to verify that the asset has not changed since issuance, and that all prior transfers have been legitimate.</li><li>To transfer an asset, a buyer and seller must first agree on the sales price.</li><li>Only the current owner may transfer their asset to another organization.</li><li>The actual private asset transfer must verify that the legitimate asset is being transferred, and verify that the price has been agreed to. Both buyer and seller must endorse the transfer.</li></ul><p>私有资产交易方案受以下要求约束：</p><ul><li>一个资产可能由第一个拥有者的组织发行（在现实世界中，可能只能由某个权威的可以证明资产属性的组织来发行）。</li><li>所有权是在组织级别进行管理的（Fabric许可方案将同样支持组织内个人身份级别的所有权）。</li><li>资产的ID和所有人作为可以被channel上的所有成员可见的公共数据被存储。</li><li>但是资产的元数据作为私有信息，只能被资产的所有者看到（也包括前所有者）。</li><li>有兴趣的买家将希望验证资产的私有属性。</li><li>有兴趣的买家将希望验证资产的出处，特别是资产的来源和产销监管链。他们还希望验证资产自从发行之后没有被篡改过，并且这个资产的前面的所有交易都是合法的。</li><li>在资产交易之前，买卖双方必须对资产的价格达成一致。</li><li>只有当前拥有者可以把他们的资产转让给另一个组织。</li><li>实际的私有资产交易必须确认合法资产正在转让，并确认双方已经对价格达成一致。买卖双方都必须对交易进行背书。</li></ul><h2 id="How-privacy-is-maintained（如何保持隐私性）">How privacy is maintained（如何保持隐私性）</h2><p>The smart contract uses the following techniques to ensure that the asset properties remain private:</p><ul><li>The asset metadata properties are stored in the current owning organization’s implicit private data collection on the organization’s peers only. Each organization on a Fabric channel has a private data collection that their own organization can use. This collection is <em>implicit</em> because it does not need to be explicitly defined in the chaincode.</li><li>Although a hash of the private properties is automatically stored on-chain for all channel members to see, a random salt is included in the private properties so that other channel members cannot guess the private data pre-image through a dictionary attack.</li><li>Smart contract requests utilize the transient field for private data so that private data does not get included in the final on-chain transaction.</li><li>Private data queries must originate from a client whose org id matches the peer’s org id, which must be the same as the asset owner’s org id.</li></ul><p>智能合约使用以下技术来确保资产属性保持隐私：</p><ul><li>资产元数据属性仅存储在当前拥有组织的节点的隐式私有数据集合中。每个组织在Fabric通道上都有一个只能由组织自己可以使用的私有数据集合。该集合是隐式的，因为不需要在链码中显式定义它。</li><li>虽然私有属性的hash值被自动保存在链上然后通道上所有成员都可以看到，但是私有属性中包含随机盐，因此其他的通道成员无法通过字典攻击猜测私有数据原像。</li><li>智能合约请求将瞬态字段用于私有数据，因此私有数据不会包含在最终的链上交易中。</li><li>对私有数据的查询必须来自组织ID与peer的组织ID一致的客户端，并且该客户端的ID必须与资产所有者的组织ID相同。</li></ul><h2 id="How-the-transfer-is-implemented（交易是如何实施的）">How the transfer is implemented（交易是如何实施的）</h2><p>Before we start using the private asset transfer smart contract we will provide an overview of the transaction flow and how Fabric features are used to protect the asset created on the blockchain:</p><p>在我们开始使用私有资产交易的智能合约之前，我们将概述交易流程以及如何使用Fabric功能来保护在区块链上创建的资产：</p><h3 id="Creating-the-asset（创建资产）">Creating the asset（创建资产）</h3><p>The private asset transfer smart contract is deployed with an endorsement policy that requires an endorsement from any channel member. This allows any organization to create an asset that they own without requiring an endorsement from other channel members. The creation of the asset is the only transaction that uses the chaincode level endorsement policy. Transactions that update or transfer existing assets will be governed by state based endorsement policies or the endorsement policies of private data collections. Note that in other scenarios, you may want an issuing authority to also endorse create transactions.</p><p>私有资产交易智能合约在部署时有一个背书策略，这个背书策略是：不需要任何渠道成员的认可。这样任何组织都可以创建属于他们自己的资产，而不需要其他的通道成员批准。资产的创建是唯一使用链码级背书策略的交易。更新或交易现有资产的交易将受基于状态认可政策或私有数据集合认可政策的约束。注意在其他情况下，你可能想要一个发行机构也认可创建交易。</p><p>The smart contract uses the following Fabric features to ensure that the asset can only be updated or transferred by the organization that owns the asset:</p><ul><li>When the asset is created, the smart contract gets the MSP ID of the organization that submitted the request, and stores the MSP ID as the owner in the asset key/value in the public chaincode world state. Subsequent smart contract requests to update or transfer the asset will use access control logic to verify that the requesting client is from the same organization. Note that in other scenarios, the ownership could be based on a specific client identity within an organization, rather than an organization itself.</li><li>Also when the asset is created, the smart contract sets a state based endorsement policy for the asset key. The state based policy specifies that a peer from the organization that owns the asset must endorse a subsequent request to update or transfer the asset. This prevents any other organization from updating or transferring the asset using a smart contract that has been maliciously altered on their own peers.</li></ul><p>智能合约使用以下的Fabric功能来确保资产只能由拥有它的组织进行更新和交易：</p><ul><li>在资产创建后，智能合约会获取提交请求的组织的MSP ID ，并且把这个MSP ID作为资产的拥有者存储在公共链码世界状态的key/value中。后续的更新或交易资产的智能合约请求将会使用访问控制逻辑来验证发出请求的客户端来自同一个组织。请注意在其他情况下，所有权可以基于组织内的特定客户端身份，而不是组织本身。</li><li>同样，在创建资产时，智能合约会为资产密钥设置基于状态的背书策略。基于状态的策略指定拥有资产的组织中的peer节点必须认可后续的更新或转让资产的请求。这样可以防止任何其他组织利用恶意更改的智能合约来更改和交易资产。</li></ul><h3 id="Agreeing-to-the-transfer（同意交易）">Agreeing to the transfer（同意交易）</h3><p>After a asset is created, channel members can use the smart contract to agree to transfer the asset:</p><ul><li>The owner of the asset can change the description in the public ownership record, for example to advertise that the asset is for sale. Smart contract access control enforces that this change needs to be submitted from a member of the asset owner organization. The state based endorsement policy enforces that this description change must be endorsed by a peer from the owner’s organization.</li></ul><p>在资产创建之后，通道上的成员可以使用智能合约来同意交易资产：</p><ul><li>资产的拥有者可以更改公共记录上的描述，例如广告说这个资产要卖出。智能合约访问控制强制要求此更改需要从拥有此资产的组织的成员提交。基于状态的背书策略规定，此描述更改必须得到拥有资产的组织的成员确认。</li></ul><p>The asset owner and the asset buyer agree to transfer the asset for a certain price:</p><ul><li>The price agreed to by the buyer and the seller is stored in each organization’s implicit private data collection. The private data collection keeps the agreed price secret from other members of the channel. The endorsement policy of the private data collection ensures that the respective organization’s peer endorsed the price agreement, and the smart contract access control logic ensures that the price agreement was submitted by a client of the associated organization.</li><li>A hash of each price agreement is stored on the ledger. The two hashes will match only if the two organizations have agreed to the same price. This allows the organizations to verify that they have come to agreement on the transfer details before the transfer takes place. A random trade id is added to the price agreement, which serves as a <em>salt</em> to ensure that other channel members can not use the hash on the ledger to guess the price.</li></ul><p>资产所有者和资产购买者同意以一定价格交易资产：</p><ul><li>买卖双方都同意的价格被存储在他们各自的隐式私有数据集合中。私有数据集合保证成交价格对通道上的其他成员来说是私密的。私有数据集合背书策略确保各自组织的peer节点对价格达成了一致，智能合约访问控制逻辑确保价格协议是由与组织有关联的客户端提交的。</li><li>交易双方生成的价格协议的hash值被存储在了账本上。只有在两个组织同意同一个价格时，这两个hash值才会匹配。这使组织能够在转移发生之前验证他们已就转移细节达成协议。价格协议中添加了随机交易ID，这是确保通道其他成员不能使用账本上的哈希值来猜测价格的一种盐。</li></ul><h3 id="Transferring-the-asset（交易资产）">Transferring the asset（交易资产）</h3><p>After the two organizations have agreed to the same price, the asset owner can use the transfer function to transfer the asset to the buyer:</p><ul><li>Smart contract access control ensures that the transfer must be initiated by a member of the organization that owns the asset.</li><li>The transfer function verifies that the asset’s private immutable properties passed to the transfer function matches the on chain hash of the asset data in private collection, to ensure that the asset owner is <em>selling</em> the same asset that they own.</li><li>The transfer function uses the hash of the price agreement on the ledger to ensure that both organizations have agreed to the same price.</li><li>If the transfer conditions are met, the transfer function adds the asset to the implicit private data collection of the buyer, and deletes the asset from the collection of the seller. The transfer also updates the owner in the public ownership record.</li><li>Because of the endorsement policies of the seller and buyer implicit data collections, and the state based endorsement policy of the public record (requiring the seller to endorse), the transfer needs to be endorsed by peers from both buyer and seller.</li><li>The state based endorsement policy of the public asset record is updated so that only a peer of the new owner of the asset can update or sell their new asset.</li><li>The price agreements are also deleted from both the seller and buyer implicit private data collection, and a sales receipt is created in each private data collection.</li></ul><p>在两个组织已经对相同的价格达成一致之后，资产的拥有者可以使用转让方法来把资产转让给买方：</p><ul><li>智能合约访问控制确保转账必须由拥有资产的组织的成员来发起</li><li>转账方法验证传递给它的资产的私有不可变属性是否与私有集合中资产数据的链上哈希匹配，确保资产所有者在出售他们拥有的相同的资产。</li><li>转账方法使用账本上的价格协议的hash值来确保两个组织已经同意了相同的价格。</li><li>如果满足转让条件，则转账函数会将资产添加到买方的隐式私有数据集合中，并且从卖方的集合中删除这个资产。转让还会更新公共所有权记录中的资产的所有者。</li><li>因为买卖双方隐式数据集合的背书策略和公共数据的基于状态的背书策略（要求卖方确认），所以交易需要得到买卖双方节点的认可。</li><li>公共资产记录的基于状态的背书策略需要更新，这样只有新的所有者的peer节点才能够更新和出售他们的新资产。</li><li>价格协议也从买卖双方隐式私人数据集合中删除，并且在每个私人数据集合中创建销售收据。</li></ul><h2 id="Running-the-private-asset-transfer-smart-contract（运行私有资产转账智能合约）">Running the private asset transfer smart contract（运行私有资产转账智能合约）</h2><p>You can use the Fabric test network to run the private asset transfer smart contract. The test network contains two peer organizations, Org1 and Org1, that operate one peer each. In this tutorial, we will deploy the smart contract to a channel of the test network joined by both organizations. We will first create an asset that is owned by Org1. After the two organizations agree on the price, we will transfer the asset from Org1 to Org2.</p><p>我们可以使用Fabric的test网络来运行私有资产转账智能合约。（省略。。。）我们先通过Org1组织创建一个资产，在两个组织对价格达成一致之后，我们把资产由Org1组织交易到Org2组织。</p><h2 id="Deploy-the-test-network（部署测试网络）">Deploy the test network（部署测试网络）</h2><p>请参考：<a href="https://guozhe001.github.io/2020/12/18/blockchain/fabric/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/">Fabric测试网络使用</a></p><h2 id="Deploy-the-smart-contract-部署智能合约">Deploy the smart contract(部署智能合约)</h2><p>You can use the test network script to deploy the secured asset transfer smart contract to the channel. Run the following command to deploy the smart contract to <code>mychannel</code>:</p><p>你可以使用测试网络脚本来部署安全资产交易智能合约到通道上。运行下面的命令来部署智能合约到<code>mychannel</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;network.sh deployCC -ccn secured -ccp ..&#x2F;asset-transfer-secured-agreement&#x2F;chaincode-go&#x2F; -ccl go -ccep &quot;OR(&#39;Org1MSP.peer&#39;,&#39;Org2MSP.peer&#39;)&quot;</span><br></pre></td></tr></table></figure><p>Note that we are using the <code>-ccep</code> flag to deploy the smart contract with an endorsement policy of <code>&quot;OR('Org1MSP.peer','Org2MSP.peer')&quot;</code>. This allows either organization to create an asset without receiving an endorsement from the other organization.</p><p>注意我们使用<code>-ccep</code>标志来部署智能合约，这个智能合约有一个背书策略<code>&quot;OR('Org1MSP.peer','Org2MSP.peer')&quot;</code>。者允许任意一个组织在创建一个新的资产时不需要其他组织的确认。</p><h3 id="Set-the-environment-variables-to-operate-as-Org2（设置环境变量以Org2的管理员身份操作）">Set the environment variables to operate as Org2（设置环境变量以Org2的管理员身份操作）</h3><p>略，可以使用两个终端分别以Org1和Org2组织管理员的身份操作peer。环境变量设置参考：[Fabric测试网络使用](<a href="https://guozhe001.github.io/2020/12/18/blockchain/fabric/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/">https://guozhe001.github.io/2020/12/18/blockchain/fabric/Fabric测试网络使用/</a></p><p>[)</p><h2 id="Create-an-asset（创建一个资产）">Create an asset（创建一个资产）</h2><p>Any channel member can use the smart contract to create an asset that is owned by their organization. The details of the asset will be stored in a private data collection, and can only accessed by the organization that owns the asset. A public record of the asset, its owner, and a public description is stored on the channel ledger. Any channel member can access the public ownership record to see who owns the asset, and can read the description to see if the asset is for sale.</p><p>任何一个通道成员都可以使用这个智能合约来创建一个属于组织自己的资产。资产的详情会存储在私有数据集合中，并且只能由拥有资产的组织访问。资产，其所有者和公共描述的公共记录存储在通道账本中。任何通道成员都可以访问公共记录来查看谁拥有这个资产，并且可以查看描述来判断资产是否在出售。</p><h3 id="Operate-from-the-Org1-terminal（通过Org1的终端操作）">Operate from the Org1 terminal（通过Org1的终端操作）</h3><p>Before we create the asset, we need to specify the details of what our asset will be. Issue the following command to create a JSON that will describe the asset. The <code>&quot;salt&quot;</code> parameter is a random string that would prevent another member of the channel from guessing the asset using the hash on the ledger. If there was no salt, a user could theoretically guess asset parameters until the hash of the of the guess and the hash on the ledger matched (this is known as a dictionary attack). This string is encoded in Base64 format so that it can be passed to the creation transaction as transient data.</p><p>在创建资产之前，我们需要指定资产的详细信息。通过下面的命令来创建一个JSON来描述资产。<code>&quot;salt&quot;</code>参数是一个随机字符串来防止通道上的另一个成员通过账本上的hash值来猜测这个资产。如果没有盐，理论上用户可以猜测资产参数，直到猜测的哈希值和账本的哈希值匹配（这称为字典攻击）为止。该字符串以Base64格式编码，因此可以作为临时数据传递给创建交易。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n "&#123;\"object_type\":\"asset_properties\",\"asset_id\":\"asset1\",\"color\":\"blue\",\"size\":35,\"salt\":\"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\"&#125;" | base64 | tr -d \\n)</span><br></pre></td></tr></table></figure><p>We can now use the following command to create a asset that belongs to Org1:</p><p>我们现在可以使用下面的命令来创建一个属于Org1组织的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"CreateAsset","Args":["asset1", "A new asset for Org1MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>We can can query the Org1 implicit data collection to see the asset that was created:</p><p>我们可以查询Org1组织的隐私数据集合来查看创建的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>When successful, the command will return the following result:</p><p>如果成功，命令会返回下面的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"object_type"</span>: <span class="string">"asset_properties"</span>,</span><br><span class="line">  <span class="attr">"asset_id"</span>: <span class="string">"asset1"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"blue"</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">"salt"</span>: <span class="string">"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also query the ledger to see the public ownership record:</p><p>我们还可以查询账本来查看公共记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>The command will return the record that the asset1 is owned by Org1:</p><p>这个命令会返回数据说明资产asset1属于Org1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset1"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"Org1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"A new asset for Org1MSP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because the market for assets is hot, Org1 wants to flip this asset and put it up for sale. As the asset owner, Org1 can update the public description to advertise that the asset is for sale. Run the following command to change the asset description:</p><p>因为资产市场很热，所以Org1希望翻转该资产并将其出售。作为资产的拥有者，Org1组织可以更新公共描述来广告说资产在出售。运行下面的命令来更新资产描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ChangePublicDescription","Args":["asset1","This asset is for sale"]&#125;'</span><br></pre></td></tr></table></figure><p>Query the ledger again to see the updated description:</p><p>重新查询账本来查看更新后的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>We can now see that the asset is for sale:</p><p>我们现在可以看到这个资产在出售：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset1"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"Org1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"This asset is for sale"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_1.png" alt="transfer_assets_1"></p><p><em>Figure 1: When Org1 creates an asset that they own, the asset details are stored in the Org1 implicit data collection on the Org1 peer. The public ownership record is stored in the channel world state, and is stored on both the Org1 and Org2 peers. A hash of the asset key and a hash the asset details are also visible in the channel world state and are stored on the peers of both organizations.</em></p><p><em>图片1:当组织Org1创建了一个属于他们的资产时，资产的细节保存在属于组织Org1的peer的隐式数据集合中。公共的记录被保存在通道的世界状态，并且保存在组织Org1和Org2的peer节点。资产的key的hash和资产详情的hash在通道的世界状态是可访问的，并且存储在所有组织的peer节点。</em></p><h3 id="Operate-from-the-Org2-terminal（通过组织Org2的终端操作）">Operate from the Org2 terminal（通过组织Org2的终端操作）</h3><p>If we operate from the Org2 terminal, we can use the smart contract query the public asset data:</p><p>如果我们通过组织Org2的终端操作，我们可以使用智能合约来查询公共的资产数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>From this query, Org2 learns that asset1 is for sale（通过这个查询，组织Org2知道了资产asset1正在出售）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset1"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"Org1MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"This asset is for sale"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>In a real chaincode you may want to query for all assets for sale, by using a JSON query, or by creating a different sale key and using a key range query to find the assets currently for sale.</em> Any changes to the public description of the asset owned by Org1 needs to be endorsed by Org1. The endorsement policy is reinforced by an access control policy within the chaincode that any update needs to be submitted by the organization that owns the asset. Lets see what happens if Org2 tried to change the public description as a prank:</p><p>*在真实的链码中，您可能希望通过使用JSON查询或通过创建其他销售密钥并使用密钥的范围来查找当前待售资产，以查询所有待售资产。*所有属于组织Org1的资产的公共描述在进行任何更改时都必须得到组织Org1的认可。链码中的访问控制策略加强了背书策略，任何更新都必须由来自于资产拥有者的组织来提交。让我们看看如果Org2试图以恶作剧方式更改公共描述会发生什么：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ChangePublicDescription","Args":["asset1","the worst asset"]&#125;'</span><br></pre></td></tr></table></figure><p>The smart contract does not allow Org2 to access the public description of the asset.</p><p>智能合约不允许组织Org2访问这个资产的公共描述。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"a client from Org2MSP cannot update the description of a asset owned by Org1MSP"</span><br></pre></td></tr></table></figure><h2 id="Agree-to-sell-the-asset-允许出售资产">Agree to sell the asset(允许出售资产)</h2><p>To sell an asset, both the buyer and the seller must agree on an asset price. Each party stores the price that they agree to in their own private data collection. The private asset transfer smart contract enforces that both parties need to agree to the same price before the asset can be transferred.</p><p>为了出售资产。买卖双方都必须同意相同的资产价格。每一方都需要在他们的私有数据集合中保存他们同意的价格。私有资产交易智能合约强制双方必须同意相同的价格才能转让资产。</p><h2 id="Agree-to-sell-as-Org1（以Org1的身份同意出售）">Agree to sell as Org1（以Org1的身份同意出售）</h2><p>Operate from the Org1 terminal. Org1 will agree to set the asset price as 110 dollars. The <code>trade_id</code> is used as salt to prevent a channel member that is not a buyer or a seller from guessing the price. This value needs to be passed out of band, through email or other communication, between the buyer and the seller. The buyer and the seller can also add salt to the asset key to prevent other members of the channel from guessing which asset is for sale.</p><p>通过组织Org1的终端进行操作。Org1同意将资产价格设置为110美元。trade_id用作盐以防止不是买家或卖家的通道成员猜测价格。这个价格需要通过买卖双方之间以电子邮件或其他通信方式在账本外传递。买卖双方还可以对资产的key进行“加盐”，以防止渠道的其他成员猜测要出售的资产。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset1\",\"trade_id\":\"109f4b3c50d7b0df729d299bc6f8e9ef9066971f\",\"price\":110&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"AgreeToSell","Args":["asset1"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>We can query the Org1 private data collection to read the agreed to selling price:</p><p>我们可以查询组织Org1的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"GetAssetSalesPrice","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><h2 id="Agree-to-buy-as-Org2-以Org2的身份同意购买">Agree to buy as Org2(以Org2的身份同意购买)</h2><p>Operate from the Org2 terminal. Run the following command to verify the asset properties before agreeing to buy. The asset properties and salt would be passed out of band, through email or other communication, between the buyer and seller.</p><p>通过Org2的终端操作。运行下面的命令在同意购买之前验证资产的属性。资产的属性和盐会在区块链账本外在买卖双方之间通过邮件或者其他方式进行传递。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n "&#123;\"object_type\":\"asset_properties\",\"asset_id\":\"asset1\",\"color\":\"blue\",\"size\":35,\"salt\":\"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\"&#125;" | base64)</span><br><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"VerifyAssetProperties","Args":["asset1"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\"&#125;"</span><br></pre></td></tr></table></figure><p>Run the following command to agree to buy asset1 for 100 dollars. As of now, Org2 will agree to a different price than Org2. Don’t worry, the two organizations will agree to the same price in a future step. However, we we can use this temporary disagreement as a test of what happens if the buyer and the seller agree to a different price. Org2 needs to use the same <code>trade_id</code> as Org1.</p><p>使用下面的命令来同意以100刀的价格购买asset1。现在Org2同意了一个与Org1不同的价格。不要担心，这两个组织会在接下来的步骤同意相同的价格。但是我们通过临时的分歧来测试如果买方和卖方同意了不同的价格将会发生什么。Org2需要使用与Org1相同的 <code>trade_id</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset1\",\"trade_id\":\"109f4b3c50d7b0df729d299bc6f8e9ef9066971f\",\"price\":100&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"AgreeToBuy","Args":["asset1"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>You can read the agreed purchase price from the Org2 implicit data collection:</p><p>您可以从Org2隐式数据集合中读取约定的购买价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"GetAssetBidPrice","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_2.png" alt="transfer_assets_2"></p><p><em>Figure 2: After Org1 and Org2 agree to transfer the asset, the price agreed to by each organization is stored in their private data collections. A composite key for the seller and the buyer is used to prevent a collision with the asset details and asset ownership record. The price that is agreed to is only stored on the peers of each organization. However, the hash of both agreements is stored in the channel world state on every peer joined to the channel.</em></p><p><em>图2:在Org1和Org2同意交易这个资产，每个组织的同意的价格被存储在他们的私有数据集合中。买卖双方的组合键用于防止与资产详细信息和资产所有权记录发生冲突。已经同意的价格只是存储在双方组织的peer节点。但是两个协议的hash值被存储在加入通道的所有peer节点的通道的世界状态中。</em></p><h2 id="Transfer-the-asset-from-Org1-to-Org2（把资产从Org1交易到Org2）">Transfer the asset from Org1 to Org2（把资产从Org1交易到Org2）</h2><p>After both organizations have agreed to their price, Org1 can attempt to transfer the asset to Org2. The private asset transfer function in the smart contract uses the hash on the ledger to check that both organizations have agreed to the same price. The function will also use the hash of the private asset details to check that the asset that is transferred is the same asset that Org1 owns.</p><p>在双方组织都同意了他们的价格之后，Org1可以尝试将资产交易给Org2。在智能合约中的私有资产交易方法使用账本上的hash来检查两个组织是否同意了相同的价格。这个方法也会使用私有资产详情的hash值来检查被交易的资产与属于Org1的资产是同一笔资产。</p><h3 id="Transfer-the-asset-as-Org1（以Org1的身份交易资产）">Transfer the asset as Org1（以Org1的身份交易资产）</h3><p>Operate from the Org1 terminal. The owner of the asset needs to initiate the transfer. Note that the command below uses the <code>--peerAddresses</code> flag to target the peers of both Org1 and Org2. Both organizations need to endorse the transfer. <em>Also note that the asset properties and price are passed in the transfer request as transient properties. These are passed so that the current owner can be sure that the correct asset is transferred for the correct price. These properties will be checked against the on-chain hashes by both endorsers.</em></p><p>通过Org1的终端操作。资产的所有者需要发起这个交易。注意下面的命令使用<code>--peerAddresses</code> 标志来指定Org1和Org2的peer节点。两个组织都需要确认这个交易。<em>另外请注意，资产属性和价格在交易请求中作为临时属性传递。传递这些是为了当前的拥有者可以确保以当前的价格来转让当前的资产。两个背书者将对照链上哈希检查这些属性。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"TransferAsset","Args":["asset1","Org2MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\",\"asset_price\":\"$ASSET_PRICE\"&#125;" --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>Because the two organizations have not agreed to the same price, the transfer cannot be completed:</p><p>因为两个组织同意的价格不一致，这个交易不能完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"failed transfer verification: hash 0fc413250501855af7c9896af00993b973510995fb10d56cddbb85ca47bd5dba for passed price JSON &#123;\"asset_id\":\"asset1\",\"trade_id\":\"109f4b3c50d7b0df729d299bc6f8e9ef9066971f\",\"price\":110&#125; does not match on-chain hash 84b0d57eaa5c77076483ae8f482c96a64912c47df5541451e94fb7698bf37ee9, buyer hasn't agreed to the passed trade id and price"</span><br></pre></td></tr></table></figure><p>As a result, Org1 and Org2 come to a new agreement on the price at which the asset will be purchased. Org1 drops the price of the asset to 100:</p><p>结果，Org1和Org2就购买资产的价格达成了新协议。 Org1将资产价格降至100：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n "&#123;\"asset_id\":\"asset1\",\"trade_id\":\"109f4b3c50d7b0df729d299bc6f8e9ef9066971f\",\"price\":100&#125;" | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"AgreeToSell","Args":["asset1"]&#125;' --transient "&#123;\"asset_price\":\"$ASSET_PRICE\"&#125;"</span><br></pre></td></tr></table></figure><p>Now that the buyer and seller have agreed to the same price, Org1 can transfer the asset to Org2.</p><p>现在买卖双方已经同意了相同的价格，Org1可以将资产交易给Org2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"TransferAsset","Args":["asset1","Org2MSP"]&#125;' --transient "&#123;\"asset_properties\":\"$ASSET_PROPERTIES\",\"asset_price\":\"$ASSET_PRICE\"&#125;" --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>You can query the asset ownership record to verify that the transfer was successful.</p><p>你可以查询资产的归属信息来验证交易已经成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>The record now lists Org2 as the asset owner:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"objectType"</span>: <span class="string">"asset"</span>,</span><br><span class="line">  <span class="attr">"assetID"</span>: <span class="string">"asset1"</span>,</span><br><span class="line">  <span class="attr">"ownerOrg"</span>: <span class="string">"Org2MSP"</span>,</span><br><span class="line">  <span class="attr">"publicDescription"</span>: <span class="string">"This asset is for sale"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_3.png" alt="transfer_assets_3"></p><p><em>Figure 3: After the asset is transferred, the asset details are placed in the Org2 implicit data collection and deleted from the Org1 implicit data collection. As a result, the asset details are now only stored on the Org2 peer. The asset ownership record on the ledger is updated to reflect that the asset is owned by Org1.</em></p><p><em>图3:在资产交易之后，资产细节存在于Org2的隐式数据集合并且从Org1的隐式数据集合中被删除。结果，资产的私有信息值保存在Org2的peer节点。在账本上的资产的归属信息也被更新，以反映资产归Org2所有。</em></p><h3 id="Update-the-asset-description-as-Org2（以Org2的身份更新资产描述）">Update the asset description as Org2（以Org2的身份更新资产描述）</h3><p>Operate from the Org2 terminal. Now that Org2 owns the asset, we can read the asset details from the Org2 implicit data collection:</p><p>通过Org2的终端操作，现在Org2拥有这个资产，我们可以通过Org2的隐式数据集合读取资产的详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"GetAssetPrivateProperties","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><p>Org2 can now update the asset public description（Org2现在可以更新资产的公共描述）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ChangePublicDescription","Args":["asset1","This asset is not for sale"]&#125;'</span><br></pre></td></tr></table></figure><p>Query the ledger to verify that the asset is no longer for sale:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c '&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><br></pre></td></tr></table></figure><h2 id="Clean-up">Clean up</h2><p>When you are finished transferring assets, you can bring down the test network. The command will remove all the nodes of the test network, and delete any ledger data that you created:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;network.sh down</span><br></pre></td></tr></table></figure><h2 id="流程图">流程图</h2><p>自己的理解画的流程图如下：</p><p><img src="/2020/12/31/blockchain/fabric/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/apple/Desktop/%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%98%93%E5%90%88%E7%BA%A6%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="私有数据交易流程图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在Fabric中交易受保护的资产&quot;&gt;在Fabric中交易受保护的资产&lt;/h1&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_tran</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="Secured" scheme="https://guozhe001.github.io/tags/Secured/"/>
    
  </entry>
  
  <entry>
    <title>环境变量设置</title>
    <link href="https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2020-12-31T06:30:57.373Z</published>
    <updated>2021-01-06T08:03:25.347Z</updated>
    
    <content type="html"><![CDATA[<p>以下所有的命令均在<code>supply-finance</code>目录下执行</p><h3 id="环境变量设置：">环境变量设置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/bin:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/config</span><br><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h3 id="核心企业GylCoreOrg1MSP-Admin：">核心企业GylCoreOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylCoreOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/users/Admin@core.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8051</span><br></pre></td></tr></table></figure><h3 id="核心企业GylCoreOrg1MSP-peer：">核心企业GylCoreOrg1MSP,peer：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylCoreOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8051</span><br></pre></td></tr></table></figure><h3 id="一级供应商GylFOrg1MSP-Admin：">一级供应商GylFOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylFOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8053</span><br></pre></td></tr></table></figure><h3 id="二级供应商1GylSOrg1MSP-Admin：">二级供应商1GylSOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylSOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/users/Admin@s1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8055</span><br></pre></td></tr></table></figure><h3 id="二级供应商2GylSOrg2MSP-Admin：">二级供应商2GylSOrg2MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylSOrg2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/users/Admin@s2.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8151</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下所有的命令均在&lt;code&gt;supply-finance&lt;/code&gt;目录下执行&lt;/p&gt;
&lt;h3 id=&quot;环境变量设置：&quot;&gt;环境变量设置：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>部署新的智能合约到channel</title>
    <link href="https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/"/>
    <id>https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/</id>
    <published>2020-12-31T06:30:50.843Z</published>
    <updated>2021-01-11T09:51:36.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署新的智能合约到channel">部署新的智能合约到channel</h1><h2 id="部署V1版本">部署V1版本</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>supply.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:12:37.540 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:"\nKsupply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a\022\nsupply_1.0" &gt;</span><br><span class="line">2020-12-28 17:12:37.542 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br><span class="line">Package ID: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a, Label: supply_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:07.090 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5c192d72135019a4bd6d444231fc95d41b6c7391cbc80a98cb67618f5e7a85c6] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8051</span><br><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["100", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:&lt;status:200 &gt; payload:"\n \266\367\033\202\030f\357\010\266zg\350\237\212\313 \342B\2041\316\351&gt;H\037\035\312\274J\021i\220\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n'\n!namespaces/fields/supply/Sequence\022\002\010\t\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\"ID\":\"1\",\"issuer\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"owner\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"amount\":100,\"createDate\":\"2020-12-28T09:24:44.871052163Z\",\"endDate\":\"2021-06-28T09:24:44.871052228Z\",\"contractHash\":\"test\",\"invoiceHash\":\"test\"&#125;\032\003\010\310\001\"\r\022\006supply\032\0031.0" endorsement:&lt;endorser:"\n\013GylFOrg1MSP\022\212\006-----BEGIN CERTIFICATE-----\nMIICETCCAbegAwIBAgIRAKxyUt8FsMI4LRaMcjh08ZgwCgYIKoZIzj0EAwIwbTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFjAUBgNVBAoTDWYxLnN1cHBseS5jb20xGTAXBgNVBAMTEGNhLmYx\nLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBYMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEcMBoGA1UEAxMTcGVlcjAuZjEuc3VwcGx5LmNvbTBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABIChG5EnW6enlGqH2F9EiWYbilBwfA+KgqqxnN56njS5\ngv368PElfoafV6jCrjA+p2OnbTI3gO2/RAwr2WBLB0+jTTBLMA4GA1UdDwEB/wQE\nAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIHNOBiXoFslrjdFMBMzU7pNe\nI5pmxxrQGrWTdgfI0cetMAoGCCqGSM49BAMCA0gAMEUCIQDEOKc114LvsauKzrMR\n7k6ipg0HPM1+W8JJt06Jeqd1vwIgBre+xg2g/rS7F5oZaJpECUf7ALV0fy9/Dhw0\nYDB3H+g=\n-----END CERTIFICATE-----\n" signature:"0D\002 9\020\212\014\220\302Ao_\226n`o\005\354B\263\316\346\330\347\010\217\205^X\"\267d\320U\365\002 \t&lt;\024e\324\312X\036\346=\025.I*A\311\223\013\301\276\320\232\366\246tZm\341g\223\235|" &gt;</span><br></pre></td></tr></table></figure><p>原因应该是代码中使用了Now（）来创建当前时间，两个peer的当前时间可能会有一点误差导致了校验不通过。</p><p>**解决方案：**使用<code>ctx.GetStub().GetTxTimestamp()</code>来获取时间，这样所有的节点创建的时间都是一致的，详见<a href="https://stackoverflow.com/questions/55289283/hyperledger-fabric-error-could-not-assemble-transaction-proposalresponsepaylo/61727958" target="_blank" rel="noopener">参考文档</a></p><h2 id="更新智能合约">更新智能合约</h2><h3 id="打包-v2">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label supply_1.0</span></span><br></pre></td></tr></table></figure><p>打包本地的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.5.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_5.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v2">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v3">批准链码定义</h3><h4 id="查看已经安装的chaincode-v2">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_5.0:0006888ea72e1b318238518b719382d440ab72f2d2c45b22e674f4828b7f7f9c</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v4">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --package-id $CC_PACKAGE_ID --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v2">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v2">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset001", "100", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 18:37:54.285 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: proposal response was not successful, error code 500, msg Incorrect number of params. Expected 2, received 1 - proposal response: version:1 response:&lt;status:200 &gt; payload:"\n \177\017\350[\344G6\010V\331\332\377\354\216&amp;\035\317&amp;\251[N`\023\036\033\237\237A\005\3670\260\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n'\n!namespaces/fields/supply/Sequence\022\002\010\016\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\"ID\":\"1\",\"issuer\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"owner\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"amount\":100,\"createDate\":\"2020-12-28T10:02:30.578872398Z\",\"endDate\":\"2021-06-28T10:02:30.578872527Z\",\"contractHash\":\"test\",\"invoiceHash\":\"test\"&#125;\032\003\010\310\001\"\r\022\006supply\032\0033.0" endorsement:&lt;endorser:"\n\016GylCoreOrg1MSP\022\222\006-----BEGIN CERTIFICATE-----\nMIICFjCCAbygAwIBAgIQU43L5gjtXO+uCpRP2jG2AjAKBggqhkjOPQQDAjBxMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEYMBYGA1UEChMPY29yZS5zdXBwbHkuY29tMRswGQYDVQQDExJjYS5j\nb3JlLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBa\nMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2Fu\nIEZyYW5jaXNjbzEeMBwGA1UEAxMVcGVlcjAuY29yZS5zdXBwbHkuY29tMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAErf3R+7XpNQpmTsMO+iM4WS7IrOoafiPbAS7Q\nbuFFR3Qs4riIczgSmjh9rOA6I1q2q0CstLhfWDbqpf+8fXPUlKNNMEswDgYDVR0P\nAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAguznqsTisa64dNvOR\nvPwP0KGklWohNpbSe7VgIghx4L8wCgYIKoZIzj0EAwIDSAAwRQIhALIw1VMzezCg\n9LONbO4+V+weY42HQLbShkTP/gCFnGRYAiARyLLSDJIC2wwzSvOHNdm+aDRtbqGC\nNJenP9hmEbYsTw==\n-----END CERTIFICATE-----\n" signature:"0E\002!\000\251\370K6S\020\373\242\321\000\211\312\0001\333\365&gt;\314\324\231\020&gt;u;+\243\303dD\023\221\237\002 z \224\236R\355Z\251\202\363\035\304\365\212\277\235\375?\376\030\371\236\220\354iG6\244\334M\315\331" &gt;</span><br></pre></td></tr></table></figure><p>原因是因为下图，只有一个组织的链码更新到了最新的版本。</p><p>![截屏2020-12-28 18.03.06](/Users/apple/Desktop/截屏2020-12-28 18.03.06.png)</p><p>**解决方案：**原因是因为设置环境变量<code>CC_PACKAGE_ID</code>时只设置了一个组织的peer，导致旧的环境变量还在生效，重新操作一遍问题解决。</p><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"核心企业","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"核心企业","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法">调用交易方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset001", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"一级供应商","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"一级供应商","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br></pre></td></tr></table></figure><p>交易之后owner变成了一级供应商，没有问题。</p><h2 id="问题记录：">问题记录：</h2><p>虽然智能合约的代码编写方式如下，但是第二行的<code>TransferAsset</code>并没有执行，可能是因为第一个创建交易（CreateAsset）还没有成功，所以第二个交易（TransferAsset）没有这个资产所以没有执行？待确认</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">s.CreateAsset(ctx, assetID, amount)</span><br><span class="line">s.TransferAsset(ctx, assetID, owner)</span><br></pre></td></tr></table></figure><h2 id="部署v6版本的supply">部署v6版本的supply</h2><h3 id="v6版本智能合约源码如下：">v6版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">asset, err := s.createAsset(ctx, assetID, amount, <span class="string">"核心企业"</span>, <span class="string">"核心企业"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: <span class="string">"test"</span>, InvoiceHash: <span class="string">"test"</span>&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">newAsset, err := s.createAsset(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = s.PutState(ctx, newAsset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line">err = fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v3">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.6.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_6.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v3">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v5">批准链码定义</h3><h4 id="查看已经安装的chaincode-v3">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_6.0:18a7379ed3b12a57961a735880a71bea3dd242c741fa0970f779b5a338f848de</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v6">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --package-id $CC_PACKAGE_ID --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v3">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v3">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset002", "1000"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 10:59:48.513 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"the asset asset001 already exists"</span><br></pre></td></tr></table></figure><p>**解决方案：**原因是以内资产ID为asset001的资产已经存在，修改资产ID参数即可。</p><h4 id="查询调用后的结果-v2">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset002"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法-v2">调用交易方法</h3><p>把凭证资产拆分一部分（200）给一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset002", "一级供应商", "200"]&#125;'</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset001",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "一级供应商",</span><br><span class="line">    "amount": 100,</span><br><span class="line">    "createDate": "2020-12-28T10:37:54.271518Z",</span><br><span class="line">    "endDate": "2021-06-28T10:37:54.271518Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset002",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "核心企业",</span><br><span class="line">    "amount": 800,</span><br><span class="line">    "createDate": "2020-12-29T02:59:48.495257Z",</span><br><span class="line">    "endDate": "2021-06-29T02:59:48.495257Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset0021",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "一级供应商",</span><br><span class="line">    "amount": 200,</span><br><span class="line">    "createDate": "2020-12-29T03:02:49.495789Z",</span><br><span class="line">    "endDate": "2021-06-29T03:02:49.495789Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>交易之后，核心企业剩余800的凭证，一级供应商获得一个新的凭证。验证无误。</p><h2 id="部署v7版本的supply">部署v7版本的supply</h2><h3 id="v7版本智能合约源码如下：">v7版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">"核心企业"</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v4">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v4">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v7">批准链码定义</h3><h4 id="查看已经安装的chaincode-v4">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v8">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v4">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v4">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 CORE_AND_F1_CONTRACT.txt &gt; core_and_f1_contract_hash.txt</span><br><span class="line">shasum -a 256 CORE_AND_F1_INVOICE.txt &gt; CORE_AND_F1_INVOICE_hash.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果-v3">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset002"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0021"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T03:02:49.495789Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T03:02:49.495789Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T06:20:30.868298Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T06:20:30.868298Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>ID为asset003的资产归属为一级供应商，金额无误。</p><h2 id="创建一级供应商与二级供应商之间的channel">创建一级供应商与二级供应商之间的channel</h2><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>firstandsecondchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile FirstAndSecondChannel -outputCreateChannelTx ./channel-artifacts/firstandsecondchannel.tx -channelID firstandsecondchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:27:37.416 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-29 14:27:37.436 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以一级供应商管理员身份操作<code>peer</code>CLI，使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel -f ./channel-artifacts/firstandsecondchannel.tx --outputBlock ./channel-artifacts/firstandsecondchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: got unexpected status: BAD_REQUEST -- error validating channel creation transaction for new channel 'firstandsecondchannel', could not successfully apply update to template configuration: error authorizing update: error validating DeltaSet: policy for [Group]  /Channel/Application not satisfied: implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 1 of the 'Admins' sub-policies to be satisfied</span><br></pre></td></tr></table></figure><p><strong>错误原因和解决方案：</strong></p><p>由于配置文件里面配置的firstandsecondchannel里面包含一级供应商和两个二级供应商，而上面的命令是以核心企业的管理员身份运行的。所以有问题。切换成一级供应商的环境执行即可。</p><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:34:06.203 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.231 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-29 14:34:06.244 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.450 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.458 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.667 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.676 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.885 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.892 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.099 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:07.108 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.320 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><h2 id="把一级供应商和二级供应商的peer加入通道">把一级供应商和二级供应商的peer加入通道</h2><h3 id="一级供应商的peer加入通道">一级供应商的peer加入通道</h3><p>使用下面的命令将peer加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:00.679 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:35:00.724 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c firstandsecondchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:28.593 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434="&#125;</span><br></pre></td></tr></table></figure><h3 id="二级供应商1加入通道">二级供应商1加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:47:03.684 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:47:03.722 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supply-finance apple$ peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-29 14:43:56.186 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: proposal failed (err: rpc error: code = Unknown desc = error validating proposal: access denied: channel [] creator org [GylSOrg1M])</span><br></pre></td></tr></table></figure><p>**错误原因：**由于环境变量设置的有问题，<code>CORE_PEER_LOCALMSPID</code>设置成了<code>GylSOrg1M</code>，应该设置为<code>GylSOrg1MSP</code></p><h3 id="二级供应商2加入通道">二级供应商2加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:52:12.969 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:52:13.010 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:55:57.114 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:55:57.120 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-29 14:55:57.120 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-29 14:55:57.125 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:57:48.872 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:57:48.894 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-peer-channel-getinfo-c-firstandsecondchannel">验证，获取通道信息:<code>peer channel getinfo -c firstandsecondchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:58:15.937 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":2,"currentBlockHash":"4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=","previousBlockHash":"270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商1（GylSOrg1MSP）设置锚节点">为二级供应商1（GylSOrg1MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s1.supply.com","port": 8055&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:01:14.643 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:01:14.670 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:01:26.952 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=","previousBlockHash":"4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商2（GylSOrg2MSP）设置锚节点">为二级供应商2（GylSOrg2MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v3">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s2.supply.com","port": 8151&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v3">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v3">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:03:39.793 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:03:39.817 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v2">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:04:10.414 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":4,"currentBlockHash":"PWXXje7tci4mk1ggQ9QMVzkvkP3i+N8WslOGDXreIQ0=","previousBlockHash":"DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE="&#125;</span><br></pre></td></tr></table></figure><h2 id="部署supply-v7到二级供应商的peer节点">部署supply-v7到二级供应商的peer节点</h2><h3 id="打包-v5">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v5">安装链码包</h3><p>两个二级供应商都要安装：<br>二级供应商1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>二级供应商2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v9">批准链码定义</h3><h4 id="查看已经安装的chaincode-v5">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v10">批准链码定义</h4><p>一级供应商和两个二级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v5">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID firstandsecondchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">Error: proposal failed with status: 500 - channel 'firstandsecondchannel' not found</span><br></pre></td></tr></table></figure><p>**错误原因：**由于批准的组织中包含核心企业，核心企业并没有加入<code>firstandsecondchannel</code>通道，所以报错。</p><h3 id="调用链码-v5">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><p>调用转账交易：TODO 问题来了，两个channel之间如何交换资产？这是个问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -C firstandsecondchannel -n supply --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C firstandsecondchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><p>查看<a href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></p><h2 id="部署supply-v7到alljoinchannel通道">部署supply-v7到alljoinchannel通道</h2><h3 id="打包-v6">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span></span><br></pre></td></tr></table></figure><h3 id="安装链码包-v6">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.7.tar.gz</code></p><h3 id="批准链码定义-v11">批准链码定义</h3><h4 id="查看已经安装的chaincode-v6">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v12">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v6">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v6">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v2">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset003", "二级供应商1", "500", "76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v2">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0031"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset003", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"the asset asset0031 already exists"</span><br></pre></td></tr></table></figure><p>原因如下：如果同一个资产ID交易两次，则会出现资产ID重复的问题；代码bug。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v2">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset0031", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p>查询资产，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0031"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset00311"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:17:26.148125Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:17:26.148125Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="部署supply-v8到alljoinchannel通道">部署supply-v8到alljoinchannel通道</h2><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">"核心企业"</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="keyword">if</span> newID == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额小于资产的金额时，newID必须不能为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v7">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.8.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_8.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v7">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.8.tar.gz</code></p><h3 id="批准链码定义-v13">批准链码定义</h3><h4 id="查看已经安装的chaincode-v7">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_8.0:797ec1d00145482b746640d0b8bb9bea64cb69dea3e95abb69a1195a19e34511</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v14">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --package-id $CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v7">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v7">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v3">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset001", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v3">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易-v2">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0011", "二级供应商1", "500", "76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v4">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v3">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0012", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转账金额大于凭证资产的金额-期待错误">转账金额大于凭证资产的金额(期待错误)</h3><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0013", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"\350\275\254\350\264\246\351\207\221\351\242\235=300,\344\270\215\350\203\275\350\266\205\350\277\207\350\265\204\344\272\247\347\232\204\351\207\221\351\242\235=200"</span><br></pre></td></tr></table></figure><p>错误信息解码如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201230151742496-20201230173424532.png" alt></p><h3 id="转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）">转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）</h3><p>一级供应商把剩余的200转给二级供应商2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;supply.com&#x2F;orderers&#x2F;orderer.supply.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;f1.supply.com&#x2F;peers&#x2F;peer0.f1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s1.supply.com&#x2F;peers&#x2F;peer0.s1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s2.supply.com&#x2F;peers&#x2F;peer0.s2.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;core.supply.com&#x2F;peers&#x2F;peer0.core.supply.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;200&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>没有产生新的资产，而是把原来的资产的拥有者变更了。</p><p><em>注意：这样有个问题，合同hash和发票hash不应该还是原来的。</em></p><h2 id="部署supply-v9到alljoinchannel通道">部署supply-v9到alljoinchannel通道</h2><h3 id="源码-v2">源码</h3><p>与v8版本相比，增加删除资产的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetIds ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, assetID := <span class="keyword">range</span> assetIds &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v8">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v8">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.tar.gz</code></p><h3 id="批准链码定义-v15">批准链码定义</h3><h4 id="查看已经安装的chaincode-v8">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.0:fbe0d3c75d2cc9d84c44f11d526047bb88ec7e2b961d59b83352d502da5f907a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v16">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --package-id $CC_PACKAGE_ID --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v8">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v8">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产">删除资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"Error managing parameter param0. Conversion error. Value asset001 asset0011 asset0012 asset003 asset0031 asset00311 was not passed in expected format []string"</span><br></pre></td></tr></table></figure><p>**错误原因：**因为方法使用的是可变长参数，但是不知道该怎么给他传参数</p><h2 id="部署supply-v9-1到alljoinchannel通道">部署supply-v9.1到alljoinchannel通道</h2><h3 id="源码-v3">源码</h3><p>与v9版本相比，修改删除资产的方法为删除单个资产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v9">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.1.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.1</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v9">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.1.tar.gz</code></p><h3 id="批准链码定义-v17">批准链码定义</h3><h4 id="查看已经安装的chaincode-v9">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.1:f733e8484c17cb415e38ac1fb14ed646622f2980762906c97d6e7e1c1a90f2c3</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v18">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --package-id $CC_PACKAGE_ID --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v9">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v9">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产-v2">删除资产</h4><p>资产ID列表：“asset001 asset0011 asset0012 asset003 asset0031 asset00311”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset00311"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="删除之后查询：">删除之后查询：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>返回的资产列表为空，删除方法验证成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;部署新的智能合约到channel&quot;&gt;部署新的智能合约到channel&lt;/h1&gt;
&lt;h2 id=&quot;部署V1版本&quot;&gt;部署V1版本&lt;/h2&gt;
&lt;h3 id=&quot;打包&quot;&gt;打包&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
    <category term="chaincode" scheme="https://guozhe001.github.io/tags/chaincode/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew配置为国内镜像</title>
    <link href="https://guozhe001.github.io/2020/12/31/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>https://guozhe001.github.io/2020/12/31/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</id>
    <published>2020-12-31T05:37:58.842Z</published>
    <updated>2020-12-31T05:42:16.953Z</updated>
    
    <content type="html"><![CDATA[<p>本人的Mac电脑按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>的设置时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">fatal: cannot change to '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask': No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案是先change到对应的目录下，在执行替换脚本，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd "$(brew --repo)"</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd $(brew --repo homebrew/core)</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h2 id="卸载homebrew">卸载homebrew</h2><p>执行卸载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure><p>如果报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>需要配置一下host；去往<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a>，输入<a href="https://raw.githubusercontent.com" target="_blank" rel="noopener">raw.githubusercontent.com</a>查看ip地址，然后配置host之后重试。</p><h2 id="安装bash-completion">安装bash_completion</h2><p>卸载homebrew后发现自动补全的功能也没有了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi awk: can't open file /usr/local/etc/bash_completion</span><br></pre></td></tr></table></figure><p>解决方法是重新安装homebrew后，安装bash-completion：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-completion</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人的Mac电脑按照&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;清华大学开源软件镜像站&lt;/a&gt;的设置时报错如下：&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Homebrew" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Homebrew/"/>
    
    
    <category term="Homebrew" scheme="https://guozhe001.github.io/tags/Homebrew/"/>
    
    <category term="Mac" scheme="https://guozhe001.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习踩坑记录</title>
    <link href="https://guozhe001.github.io/2020/12/31/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/31/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-31T05:37:58.805Z</published>
    <updated>2020-12-31T05:39:44.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradle学习踩坑记录">gradle学习踩坑记录</h1><p>最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令<code>./gradlew clean build</code>时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not target platform: 'Java SE 11' using tool chain: 'JDK 8 (1.8)'</span><br></pre></td></tr></table></figure><p>原因是因为我本地的JAVA_HOME配置的JDK版本是1.8，但是项目中指定的编译版本为Java11：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">targetCompatibility = JavaVersion.VERSION_11</span><br></pre></td></tr></table></figure><p>解决方式是在项目的根目录下新建gradle.properties文件，并写入以下配置，问题解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.gradle.java.home</span> = <span class="string">/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home</span></span><br></pre></td></tr></table></figure><p>gradle的<a href="https://www.jetbrains.com/help/idea/gradle-jvm-selection.html#jdk_existing_project" target="_blank" rel="noopener">官方文档</a>解释如下：</p><h3 id="Resolve-the-Gradle-JVM-version-for-the-existing-project">Resolve the Gradle JVM version for the existing project</h3><ol><li>IntelliJ IDEA checks the <code>gradle.properties</code> file for the appropriate Gradle JVM specified in <code>org.gradle.java.home</code> and uses it for the project.</li><li>Then it checks the <code>JAVA_HOME</code> environment variable.</li><li>Then it checks the closest appropriate JDK version for the existing Gradle version.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gradle学习踩坑记录&quot;&gt;gradle学习踩坑记录&lt;/h1&gt;
&lt;p&gt;最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令&lt;code&gt;./gradlew clean build&lt;/code&gt;时报错如下：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Gradle常用命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/31/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://guozhe001.github.io/2020/12/31/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-12-31T05:37:58.763Z</published>
    <updated>2020-12-31T05:40:33.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle常用命令记录">Gradle常用命令记录:</h2><h4 id="运行gradle-help-task-someTask来显示帮助，如：">运行<code>gradle help --task someTask</code>来显示帮助，如：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew help --task test</span><br></pre></td></tr></table></figure><h4 id="clean">clean</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure><h4 id="build">build</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><h4 id="test">test</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test</span><br></pre></td></tr></table></figure><h4 id="排除指定的task-exclude-task">排除指定的task<code>--exclude-task</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build --exclude-task test</span><br></pre></td></tr></table></figure><h4 id="多模块指定模块运行task">多模块指定模块运行task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :my-subproject:taskName</span><br><span class="line">./gradlew my-subproject:taskName</span><br></pre></td></tr></table></figure><h4 id="测试失败继续执行">测试失败继续执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test --continue</span><br></pre></td></tr></table></figure><h4 id="检查，会执行test和linting">检查，会执行test和linting</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew check</span><br></pre></td></tr></table></figure><h4 id="显示当前的项目层次">显示当前的项目层次</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew project</span><br></pre></td></tr></table></figure><h4 id="列出所有的task">列出所有的task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew tasks</span><br></pre></td></tr></table></figure><h4 id="列出项目所有的依赖：">列出项目所有的依赖：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew dependencies</span><br></pre></td></tr></table></figure><p>去<a href="https://docs.gradle.org/current/userguide/command_line_interface.html" target="_blank" rel="noopener">官网</a>查看更多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gradle常用命令记录&quot;&gt;Gradle常用命令记录:&lt;/h2&gt;
&lt;h4 id=&quot;运行gradle-help-task-someTask来显示帮助，如：&quot;&gt;运行&lt;code&gt;gradle help --task someTask&lt;/code&gt;来显示帮助，如：&lt;/h4</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>动态规划学习</title>
    <link href="https://guozhe001.github.io/2020/12/31/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://guozhe001.github.io/2020/12/31/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-12-31T05:34:31.461Z</published>
    <updated>2020-12-31T05:47:40.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划">动态规划</h1><p>本来想用5W2H分析法来解释此问题，但是发现比较困难，还是先看例子吧。<br>动态规划的原理：动态规划先解决子问题，再逐步解决大问题。先有这个简单的概念即可，我会通过例子来说明。</p><h1 id="举例：做个小偷顾问">举例：做个小偷顾问</h1><h2 id="例1，打家劫舍（无限背包问题）">例1，打家劫舍（无限背包问题）</h2><h3 id="问题描述">问题描述</h3><p>在万恶的资本主义社会美国，有一个小偷（罗伯特），有一天晚上罗伯特与他的同伙开了一辆卡车（假如可以装无限的现金）来到了一排主人都出门旅游去了的房屋面前，每间房内都藏有一定的现金，影响罗伯特偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 请帮他设计程序以偷取最多的现金。<br></p><h3 id="问题分析"><img src="https://gitee.com/guozhe001/images/raw/master/1604543616351-c27c0806-d0c7-47a7-b7f7-2e182fc1e17d.png" alt="image.png">问题分析</h3><h4 id="1、简化问题">1、简化问题</h4><ul><li>如果只有一个房子罗伯特最多能偷多少钱？</li><li>如果有两个房子罗伯特最多能偷多少钱？</li><li>如果有三个房子罗伯特最多能偷多少钱？</li><li>。。。。。。</li></ul><p><br>为了方便分析，我们把房子的数量和能够偷的钱数记录下来，我们画一个表格如下：</p><ul><li>第一列表示如果只偷前面的n个房子</li><li>第二列表示如果只偷前面的n个房子最多能偷多少钱</li><li>括号里面的是偷哪些房子</li></ul><h4 id="2、各个击破简化后的问题">2、各个击破简化后的问题</h4><p><strong>如果只有前面一个房子罗伯特最多能偷多少钱？</strong></p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr></tbody></table><p><strong>如果只有前面两个房子罗伯特最多能偷多少钱？</strong><br>当只有前面两个房子时，因为限制条件是不能偷相邻的房子不然会触发报警，所以偷其中金额大的那个即可。<br></p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr></tbody></table><p><strong>如果只有前面三个房子罗伯特最多能偷多少钱？</strong><br>当只有前面三个房子时，我们有两种选择，第1种：偷第三个和第一个；第2种：偷第二个。从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr></tbody></table><p><strong>如果只有前面四个房子罗伯特最多能偷多少钱？</strong></p><p>当只有前面四个房子时，我们有两种选择：</p><ul><li>第1种：偷第四个，再加上偷前两个房子的最大值</li><li>第2种：不偷第四个，只偷前面三个房子的最大值</li></ul><p>从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr><tr><td>4</td><td>$500 = $300(4) + $200(2)</td></tr></tbody></table><p><strong>如果只有前面五个房子罗伯特最多能偷多少钱？</strong><br>当只有前面五个房子时，我们有两种选择：</p><ul><li>第1种：偷第五个，再加上偷前三个房子的最大值</li><li>第2种：不偷第五个，只偷前面四个房子的最大值</li></ul><p>从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr><tr><td>4</td><td>$500 = $300(4) + $200(2)</td></tr><tr><td>5</td><td>$500 = $300(4) + $200(2)</td></tr></tbody></table><h4 id="3、总结归纳">3、总结归纳</h4><p>我们通过上面的表格可以总结出来什么吗？我们在此约定一个数学公式：total(n)表示最大能偷的金额；使用amount(n)表示第n个房子有多少金额<br>根据以上的表格我们可以知道<br>total(1) = 100 = amount(1) = max(amount(1), 0)<br>total(2) = 200 = max(amount(2), amount(1))<br>total(3) = 200 = max(amount(3) + amount(1), amount(2)) = max(amount(3) + total(3-2), total(2))<br>total(4) = 500 = max(amount(4) + total(4-2), amount(3)) = max(amount(4) + total(4-2), total(3)) <br>total(n) = max(amount(n) + total(n-2), total(n-1))</p><h4 id="4、代码实现">4、代码实现</h4><p>经过上面的分析我们竟然总结出了一个公式：total(n) = max(amount(n) + total(n-2), total(n-1))<br>大家应该对斐波那契数列比较熟悉，他的公式是：f(n) = f(n-1) + f(n-2)，然后可能第一反应就想到了递归的实现，那么我们也可以使用递归的方式解决罗伯特的问题把？show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">robRecursion</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当没有房子时</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(nums) || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 当只有一个房子时</span></span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 当只有两个房子时</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他情况</span></span><br><span class="line">        <span class="comment">// total(n) = max(amount(n) + total(n-2), total(n-1))</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[nums.length - <span class="number">1</span>] + robRecursion(Arrays.copyOf(nums, nums.length - <span class="number">2</span>)),</span><br><span class="line">                robRecursion(Arrays.copyOf(nums, nums.length - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，大功告成，上面的代码经过测试是没有问题的，解决了罗伯特的问题，回家睡觉。<br>等等！！！我们是不是忘了什么，这篇文章的标题不是动态规划吗，动态规划呢？<br>**<br>让我们再回头看一下递归的方式实现，每当要计算total(n)时，就先计算total(n-1)和total(n-2)，如果说我们先计算出来total(n-1)和total(n-2)是不是计算total(n)的时候就不用重新计算total(n-1)和total(n-2)了？按照这个思路我们就需要把每次计算出的total(n-1)和total(n-2)的结果记录下来，等计算total(n)的时候就可以直接用了。<br>show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化动态规划的数组，此时的数组中的值都是0</span></span><br><span class="line"><span class="comment">     * 此数组的下标为偷取的前n个房屋的数量</span></span><br><span class="line"><span class="comment">     * 此数组的值为偷取的前n个房屋可以偷取的金钱最大值</span></span><br><span class="line"><span class="comment">     * 如果dp[5] = 100；表示偷取前面的5家房屋，最多可以偷取100刀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> amountOfNumberI = nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 如果只偷第一个房子</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i] = amountOfNumberI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 此时有两种选择:1、偷当前的房屋；2、不偷当前的房屋，两种选择取最大值</span></span><br><span class="line"><span class="comment">             * 如果选择1，则要计算当前房屋的金钱与当前房屋前一个不相邻的所有房屋的金钱价值</span></span><br><span class="line"><span class="comment">             * 如果选择2，则直接取当前房屋之前的所有房屋能够偷的金钱最大值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            dp[i] = Math.max(amountOfNumberI + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[nums.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恭喜你，上面的代码就是动态规划的方式；与递归的方式不同，每次的计算结果都保存在了dp数组中，计算下一个值时直接从数组中获取以前计算过的值即可。<a href="https://github.com/guozhe001/my-tools/blob/eb33781f6fe3613ca531ad047de60b2cb0ec8e45/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/leetcode/editor/cn/P198HouseRobber.java" target="_blank" rel="noopener">罗伯特偷一排房子的源码</a><br></p><h2 id="例2，背包问题">例2，背包问题</h2><h3 id="问题描述-v2">问题描述</h3><p>有一天罗伯特带着一个可以装4kg的背包，去了一家小商店，小商店里面有下面至少三个商品；请帮助他决定应该偷哪些商品。</p><table><thead><tr><th>商品名称</th><th>商品价格（单位$）</th><th>商品重量（单位kg）</th></tr></thead><tbody><tr><td>吉他</td><td>1500</td><td>1</td></tr><tr><td>音箱</td><td>3000</td><td>4</td></tr><tr><td>电脑</td><td>2000</td><td>3</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="问题分析-v2">问题分析</h3><p>首先拿到这个问题可能一眼就看出来了答案，就是偷吉他和电脑；那么如果说商品数量是100个的话是无法一眼看出答案的，那么我们应该怎么去帮罗伯特决策呢？<br><br><br>我们再来看一下问题的关键：</p><ul><li>容量4kg的背包</li><li>至少三个不同价格和不同重量的商品</li><li>一个商品要嘛全偷要嘛不偷，不能只偷一部分</li><li>偷的商品列表背包必须能装的下，并且价格最大</li></ul><h4 id="1、简化问题-v2">1、简化问题</h4><p>简化问题的过程：</p><ul><li>最简单的是什么？只有一个商品，只能装1kg的背包</li><li>增加点难度，只有一个商品，背包的重量逐渐增加到罗伯特的背包重量</li><li>继续增加难度，只有两个商品，1kg的背包能偷什么？2kg的背包能偷什么？3kg、4kg呢？</li><li>有三个商品，1kg的背包能偷什么？2kg的背包能偷什么？3kg、4kg呢？</li><li>有n个商品和能装mkg的背包</li></ul><h4 id="2、简化后的问题各个击破">2、简化后的问题各个击破</h4><h5 id="把问题最小化：只有一个商品，只能装1kg的背包">把问题最小化：只有一个商品，只能装1kg的背包</h5><p>到这里其实我们还是无法知道到底应该怎么帮罗伯特决策，那么我们可不可以把问题简化一下，假如背包容量是1，商品个数也是1只有一把吉他；如下：</p><ul><li>容量1kg的背包</li><li>1把重量是1kg价格是$1500的吉他</li></ul><p>如果是上面简化后的问题，我们是可以计算的，计算方法是：判断吉他能否装入背包，如果可以则1kg容量的背包可以偷吉他，最大价格是$1500，我们继续使用一个表格把它记录下来：<br>我们先约定好表格的内容：</p><ul><li>行表示背包的容量</li><li>列表示有哪些商品</li><li>单元格的数字表示可以偷的最大值</li><li>括号里面是偷哪些商品<br>| 商品\容量 | 1 |<br>| — | — |<br>| 吉他 | 1500（吉他） |</li></ul><p>我们是如何得到上面的表格的呢？判断吉他是否能装进容量为1kg的背包中，如果可以则偷吉他，吉他的价格也就是偷取的最大的价格。</p><h5 id="增加难度，增加背包的容量：只有一个商品，背包的重量逐渐增加到罗伯特的背包重量">增加难度，增加背包的容量：只有一个商品，背包的重量逐渐增加到罗伯特的背包重量</h5><p>我们在上面的基础上再把背包的容量增加，直到增加到与罗伯特的背包相同的容量为止，但是依然只可以偷取一把吉他；我们把这些信息记录下来如下，其中第一列为商品，第一行为背包容量，表格记录的是偷取商品的最大价格，括号里面的是偷取的商品。<br>如下表的红色部分就代表，背包容量为4只有一把吉他可偷时，可以偷取的商品最大价格是1500，偷取的商品是吉他。</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr></tbody></table><h5 id="继续增加难度，增加一个商品">继续增加难度，增加一个商品</h5><p>我们再在上面的基础上，增加可以偷取的商品，再加一个音箱，然后使用相同的方法绘制上面的表格；</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td></td><td></td><td></td></tr></tbody></table><p>上面可以看到**table[音箱][容量1]**的单元格的值如上表是1500,因为容量是1的背包无法装下音箱，所以依然只能偷吉他，所以可以偷取的商品的最大的价格为1500。<br>让我们完成这个表格的填写：</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr></tbody></table><p>如上表所示，当背包容量为4时，可以装下音箱，并且音箱的价格3000大于**table[吉他][容量4]<strong>的1500，所以此时我们设置</strong>table[音箱][容量4]<strong>的单元格的最大价格为3000。<strong>table[音箱][容量4] = Max(当前行计算的值, table[吉他][容量4])</strong><br></strong></p><h5 id="继续增加难度，再增加一个商品再增加一个商品">继续增加难度，再增加一个商品再增加一个商品</h5><p>我们继续把电脑增加到可以偷取的商品列表中，然后继续使用相同的方法画出电脑行的前三个容量的单元格如下：此时我们可以看到**table[电脑][容量3]**的值应该是2000，因为容量是3时可以装下电脑，而且电脑的价格比吉他的价格高，所以此时罗伯特应该偷电脑而不是吉他。</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr><tr><td>电脑</td><td>1500（吉他）</td><td>1500（吉他）</td><td>2000（电脑）</td><td></td></tr></tbody></table><p><strong>table[电脑][容量3] = Max(当前行计算的值, table[音箱][容量3])</strong><br>我们继续看最后一个单元格（**table[电脑][容量4]）**应该填什么，如果罗伯特偷电脑，则背包容量还剩下1，而容量为1的背包可以偷取的商品价格最大值是1500，偷取的商品是吉他，所以此时可以选择偷取电脑+吉他，价格是2000+1500=3500；这比之前记录的背包容量是4时的商品最大值（3000）大，所以这个单元格的价格应该是3500，偷取的商品是电脑+吉他</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr><tr><td>电脑</td><td>1500（吉他）</td><td>1500（吉他）</td><td>2000（电脑）</td><td>3500（电脑+吉他）</td></tr></tbody></table><p><strong>table[电脑][容量4] = Max(当前行计算的值 + 剩余容量可以偷取的最大值, table[音箱][容量3])</strong><br>OK，完成上面的表格之后我们就可以确定，罗伯特应该偷电脑+吉他，商品的价格为3500。随着我们不断的填写表格，我们可以知道结果最终保存在表格的右下角，即**table[电脑][容量4]**的单元格内。</p><h4 id="2、总结归纳">2、总结归纳</h4><p>让我们总结一下每个单元格填写的规律：<br>假设背包总容量为V，商品的数量是M，第i个商品的重量是Wi，价格是Pi，容量是v（1&lt;v&lt;=V）时我们可以使用下面的公式：<br>f(i,v) = Wi &lt;= v ? max(Pi + f(i-1, v-Wi), f(i-1, v)) : f(i-1, v)<br>分解上面的公式：</p><table><thead><tr><th>情形</th><th>值</th></tr></thead><tbody><tr><td>Wi &lt;= v</td><td>max(Pi + f(i-1, v-Wi), f(i-1, v))</td></tr><tr><td>Wi &gt; v</td><td>f(i-1, v)</td></tr></tbody></table><p><strong>3、代码实现</strong><br>我们继续用上面罗伯特打家劫舍的思路，把已经计算过的值保存下来，然后在用到的时候直接取用。因为当前问题有多个商品和多种背包容量两个限制纬度，所以在记录时需要用到二维数组。<br>show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给出商品列表和背包的容量，请计算偷取哪些商品可以达到价格最大化，最大的价格是多少？</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> products    商品列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bagCapacity 背包容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 能够偷取的商品最大的价格之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">stealMaxPrice</span><span class="params">(Product[] products, <span class="keyword">int</span> bagCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 二维数组，记录已经计算过的最大价格</span></span><br><span class="line"><span class="comment">         * 二维数组比商品的个数多1，比背包的大小多1，原因是为了方便使用相同的公式，第0行和第0列的值都是0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>[][] table = <span class="keyword">new</span> <span class="keyword">int</span>[products.length + <span class="number">1</span>][bagCapacity + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= products.length; j++) &#123;</span><br><span class="line">            Product product = products[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> currentBagCapacity = <span class="number">1</span>; currentBagCapacity &lt;= bagCapacity; currentBagCapacity++) &#123;</span><br><span class="line">                table[j][currentBagCapacity] = product.weight &lt;= currentBagCapacity ?</span><br><span class="line">                        Math.max(product.price + table[j - <span class="number">1</span>][currentBagCapacity - product.weight], table[j - <span class="number">1</span>][currentBagCapacity])</span><br><span class="line">                        : table[j - <span class="number">1</span>][currentBagCapacity];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table[products.length][bagCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name, <span class="keyword">int</span> price, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品价格(单位$)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> price;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品重量(单位磅)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>代码中的table最终是这样的：</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td></tr><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td><td>3000</td></tr><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>2000</td><td>3500</td></tr></tbody></table><p>其实上面的代码我简化了一下，返回的是最大能偷的价格，而罗伯特当然是要价格最大的商品列表了，这个实现比较麻烦不贴在这里了可以看<a href="https://github.com/guozhe001/my-tools/blob/eb33781f6fe3613ca531ad047de60b2cb0ec8e45/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/other/DynamicProgrammingPractice.java" target="_blank" rel="noopener">源码</a></p><h1 id="什么是动态规划（英语：Dynamic-programming，简称DP）">什么是动态规划（英语：Dynamic programming，简称DP）</h1><h2 id="概念：">概念：</h2><p>动态规划是一种在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6" target="_blank" rel="noopener">数学</a>、<a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E7%90%86%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">管理科学</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">计算机科学</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BB%8F%E6%B5%8E%E5%AD%A6" target="_blank" rel="noopener">经济学</a>和<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6" target="_blank" rel="noopener">生物信息学</a>中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><h2 id="用途：">用途：</h2><p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。<br>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><h3 id="适用情况">适用情况</h3><ul><li>最优子结构性质。<ul><li>如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。</li><li>最优子结构性质为动态规划算法解决问题提供了重要线索。</li></ul></li><li>无后效性。<ul><li>即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</li></ul></li><li>子问题重叠性质。<ul><li>子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。</li><li>动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。</li></ul></li></ul><br>### 重叠子问题：如何理解这个概念呢？Fibnacci数列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> n &gt;=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的斐波那契数列的递归的实现方法中，我们传入的参数n等于8或者等于10的时候，第m（m&lt;n）个数字是变化的吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            c[i] = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[i] = c[i - <span class="number">2</span>] + c[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态规划是递归算法的优化方案，一般来说能用递归的都可以思考一下能不能使用动态规划的方式优化。</p><h3 id="最优子结构性质">最优子结构性质</h3><p>上面两个罗伯特的例子就是最“优自结构性质”的问题，不好解释大家可以自己体会。</p><p><strong>总结：判断是否可以用动态规划解决问题的核心是：大规模的问题是否能够通过较小规模的问题来解决。</strong></p><h2 id="效率：">效率：</h2><p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其<a href="https://zh.wikipedia.org/wiki/%E8%AE%B0%E5%BF%86%E5%8C%96" target="_blank" rel="noopener">记忆化</a>存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E6%95%B8%E5%A2%9E%E9%95%B7" target="_blank" rel="noopener">指数增长</a>时特别有用。<br></p><h2 id="一些可以使用动态规划解决的常见题目">一些可以使用动态规划解决的常见题目</h2><ul><li>爬楼梯问题</li><li>最长子串（子串需要连续）</li><li>最长子序列（子序列不需要连续）</li><li>最长子串的变种：最长回文子串（回文：“上海自来水来自海上”）</li><li>DNA序列比对</li></ul><h2 id="动态规划不可以解决什么问题">动态规划不可以解决什么问题</h2><ul><li>可以拆分的商品（如罗伯特拿着4kg的背包偷四袋不同价格的豆子（这些商品可以拆分））</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;动态规划&lt;/h1&gt;
&lt;p&gt;本来想用5W2H分析法来解释此问题，但是发现比较困难，还是先看例子吧。&lt;br&gt;动态规划的原理：动态规划先解决子问题，再逐步解决大问题。先有这个简单的概念即可，我会通过例子来说明。&lt;/p&gt;
&lt;h1 id=&quot;举例：做个小偷顾问&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://guozhe001.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://guozhe001.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://guozhe001.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>开发智能合约</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</id>
    <published>2020-12-30T09:20:58.418Z</published>
    <updated>2021-01-05T11:06:10.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发智能合约">开发智能合约</h1><p>本次的智能合约从<a href="https://github.com/hyperledger/fabric-samples.git" target="_blank" rel="noopener">fabric-samples</a>的<code>asset-transfer-basic/chaincode-go</code>拷贝然后进行了修改。</p><p>智能合约代码<code>smartcontract.go</code>如下：本文档更新不及时，可到<a href="https://github.com/guozhe001/supply-finance.git" target="_blank" rel="noopener">源码地址</a>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">package chaincode</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"encoding/json"</span><br><span class="line">"fmt"</span><br><span class="line">"time"</span><br><span class="line"></span><br><span class="line">"github.com/golang/protobuf/ptypes"</span><br><span class="line">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// SmartContract provides functions for managing an Asset</span><br><span class="line">type SmartContract struct &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Asset describes basic details of what makes up a simple asset</span><br><span class="line">type Asset struct &#123;</span><br><span class="line">ID           string    `json:"ID"`</span><br><span class="line">Issuer       string    `json:"issuer"`</span><br><span class="line">Owner        string    `json:"owner"`</span><br><span class="line">Amount       int64     `json:"amount"`</span><br><span class="line">CreateDate   time.Time `json:"createDate"`</span><br><span class="line">EndDate      time.Time `json:"endDate"`</span><br><span class="line">ContractHash string    `json:"contractHash"`</span><br><span class="line">InvoiceHash  string    `json:"invoiceHash"`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// IssueVoucher 发行凭证</span><br><span class="line">func (s *SmartContract) IssueVoucher(ctx contractapi.TransactionContextInterface, assetID string, amount int64, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 创建资产</span><br><span class="line">return s.CreateAssetAndSave(ctx, assetID, amount, "核心企业", owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CreateAssetAndSave 创建资产并保存</span><br><span class="line">func (s *SmartContract) CreateAssetAndSave(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// createAsset issues a new asset to the world state with given details.</span><br><span class="line">func (s *SmartContract) createAsset(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) (*Asset, error) &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">if exists &#123;</span><br><span class="line">return nil, fmt.Errorf("the asset %s already exists", id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(0, 6, 0), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取当前时间</span><br><span class="line">func getNow(ctx contractapi.TransactionContextInterface) (time.Time, error) &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line">return ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReadAsset returns the asset stored in the world state with given id.</span><br><span class="line">func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, fmt.Errorf("failed to read from world state: %v", err)</span><br><span class="line">&#125;</span><br><span class="line">if assetJSON == nil &#123;</span><br><span class="line">return nil, fmt.Errorf("the asset %s does not exist", id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AssetExists returns true when asset with given ID exists in world state</span><br><span class="line">func (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return false, fmt.Errorf("failed to read from world state: %v", err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assetJSON != nil, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAssetByID 根据资产ID转账</span><br><span class="line">func (s *SmartContract) TransferAssetByID(ctx contractapi.TransactionContextInterface, id string, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAsset updates the owner field of asset with given id in world state.</span><br><span class="line">func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, asset *Asset, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span><br><span class="line">if asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &gt; amount &#123; // 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span><br><span class="line">if newID == "" &#123;</span><br><span class="line">return fmt.Errorf("转账金额小于资产的金额时，newID必须不能为空")</span><br><span class="line">&#125;</span><br><span class="line">// 创建新的资产并保存</span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">// 更新旧资产的金额</span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &lt; amount &#123; // 如果资产的额度小于要转账的金额，则直接报错</span><br><span class="line">return fmt.Errorf("转账金额=%d,不能超过资产的金额=%d", amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PutState 更新资产</span><br><span class="line">func (s *SmartContract) PutState(ctx contractapi.TransactionContextInterface, asset *Asset) error &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DelState 删除资产</span><br><span class="line">func (s *SmartContract) DelState(ctx contractapi.TransactionContextInterface, assetID string) error &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">if !exists &#123;</span><br><span class="line">return fmt.Errorf("assetID=%s的资产不存在", assetID)</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// GetAllAssets returns all assets found in world state</span><br><span class="line">func (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;</span><br><span class="line">// range query with empty string for startKey and endKey does an</span><br><span class="line">// open-ended query of all assets in the chaincode namespace.</span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange("", "")</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">defer resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">var assets []*Asset</span><br><span class="line">for resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">assets = append(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assets, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开发智能合约&quot;&gt;开发智能合约&lt;/h1&gt;
&lt;p&gt;本次的智能合约从&lt;a href=&quot;https://github.com/hyperledger/fabric-samples.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fabric-sam</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>创建channel</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/</id>
    <published>2020-12-30T09:18:28.198Z</published>
    <updated>2021-01-11T09:50:33.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-创建Channel">2. 创建Channel</h2><p>参考：<a href="https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/">创建一个新的channel</a></p><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>coreandfirstchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile CoreAndFirstChannel -outputCreateChannelTx ./channel-artifacts/coreandfirstchannel.tx -channelID coreandfirstchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 14:29:40.728 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/configtx/configtx.yaml</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-24 14:29:40.750 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以核心企业(<a href="http://core.supply.com" target="_blank" rel="noopener">core.supply.com</a>)管理员身份操作<code>peer</code>CLI;然后使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:59:28.470 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.490 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-24 15:59:28.497 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.701 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.708 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.917 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.924 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.134 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.141 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.349 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.357 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.566 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p><strong>报错信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel create -o localhost:8051  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line">2020-12-24 15:56:56.602 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 5.225381ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:57.611 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 3.907471ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:59.315 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.52302ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">Error: failed to create deliver client for orderer: orderer client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>peer channel create -o localhost:8051 </code>命令<code>-o</code>应该传入order服务的地址和端口。</p><h2 id="把核心企业和一级供应商的peer加入通道">把核心企业和一级供应商的peer加入通道</h2><h3 id="核心企业的peer加入通道">核心企业的peer加入通道</h3><p>使用下面的命令将核心企业的peer加入通道（确认已经设置了核心企业的环境变量）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:46:40.206 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 16:46:40.235 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息记录:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 16:18:23.258 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.895228ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:24.266 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 4.537447ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:25.659 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.16728ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>**错误原因：**未知。</p><p>**解决方式：**把Profiles里面的Organizations信息统一修改，与环境变量保持一致</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylCoreOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylFOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg2MSP</span></span><br></pre></td></tr></table></figure><p>然后把上面步骤中生成的加密材料信息、区块信息都删除，容器和volume全部删除；重新执行一遍。</p><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c coreandfirstchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:53:01.633 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c="&#125;</span><br></pre></td></tr></table></figure><h3 id="一级供应商加入通道">一级供应商加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:06:30.499 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:06:30.527 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 17:01:05.904 CST [main] InitCmd -&gt; ERRO 001 Cannot run peer because cannot init crypto, specified path "/Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp" does not exist or cannot be accessed: stat /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp: no such file or directory</span><br></pre></td></tr></table></figure><p>**错误原因：**因为在设置环境变量时不是在<code>supply-finance</code>目录下设置的，所以设置的环境变量有问题，重新设置一下。</p><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><p>因为上面已经设置了一级供应商（GylFOrg1MSP）的环境变量，所以先设置GylFOrg1MSP的锚节点：</p><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:56:48.435 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:56:48.439 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-24 17:56:48.439 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-24 17:56:48.442 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"coreandfirstchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat coreandfirstchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:12:49.469 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel 'coreandfirstchannel': error authorizing update: ConfigUpdate for channel 'channel1' but envelope for channel 'coreandfirstchannel'</span><br></pre></td></tr></table></figure><p>**错误原因：**在修改配置的时候指定channel名称错误，修正重新执行一遍。</p><h5 id="验证，获取通道信息-peer-channel-getinfo-c-coreandfirstchannel">验证，获取通道信息:<code>peer channel getinfo -c coreandfirstchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">supply-finance$</span><span class="bash">     peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:19:31.275 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":2,"currentBlockHash":"h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=","previousBlockHash":"kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c="&#125;</span><br></pre></td></tr></table></figure><h4 id="为核心企业GylCoreOrg1MSP设置锚节点">为核心企业GylCoreOrg1MSP设置锚节点</h4><p>修改环境变量，然后拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.core.supply.com","port": 8051&#125;]&#125;,"version": "0"&#125;&#125;' coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"coreandfirstchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat coreandfirstchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:24:51.015 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"e52oT2HAiTxyeh4a30kTx32xLJAKIWa7rm6PVOn8eoA=","previousBlockHash":"h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk="&#125;</span><br></pre></td></tr></table></figure><h2 id="部署测试chaincode来确认">部署测试chaincode来确认</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>basic.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:"\nJbasic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad\022\tbasic_1.0" &gt;</span><br><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:02:47.351 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [d7e2224f63a1516ffeeed26ec5c8f69872141f5864b3602a1409679472692840] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:10:18.071 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-24 19:10:18.094 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'basic' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n basic --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"InitLedger","Args":[]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n basic -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下,说明channel部署成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;,&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;,&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;,&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;,&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;,&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;]</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"error in simulation: failed to execute transaction 207cf99d289ffe9deca6a320aba59cc155fae02d19d51c9cfebc9943ffc7794d: could not launch chaincode basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad: error starting container: error starting container: API error (404): network _test not found"</span><br></pre></td></tr></table></figure><p>**错误原因：**因为chaincode的容器没有启动成功,直接指定容器启动报错如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201224192439225.png" alt="image-20201224192439225"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/supply-finance$</span><span class="bash">     docker start bc47970e58a5</span></span><br><span class="line">Error response from daemon: network _test not found</span><br><span class="line">Error: failed to start containers: bc47970e58a5</span><br></pre></td></tr></table></figure><p><strong>问题解决：</strong></p><p>因为在<code>docker-compose.yml</code>文件中配置了下面的环境变量，在启动chaincode容器时会链接到这个网络。</p><p>之前的配置是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_test</span><br></pre></td></tr></table></figure><p>修改后重新启动，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;docker_test</span><br></pre></td></tr></table></figure><p>为什么修改成docker_test呢，可以查看使用<code>docker-compose</code>命令启动容器时的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating network "docker_test" with the default driver</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><h3 id="创建通道：-v2">创建通道：</h3><p>运行下面的程序来为<code>alljoinchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile AllPlayChannel -outputCreateChannelTx ./channel-artifacts/alljoinchannel.tx -channelID alljoinchannel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面的命令把交易发给order服务创建通道：</span></span><br><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel -f ./channel-artifacts/alljoinchannel.tx --outputBlock ./channel-artifacts/alljoinchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h2 id="加入通道">加入通道</h2><p>使用下面的命令将peer加入通道,所有节点都需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/alljoinchannel.block</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过获取通道信息确认加入成功</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h2 id="为各个组织设置锚节点">为各个组织设置锚节点</h2><h3 id="GylCoreOrg1MSP">GylCoreOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq '.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.core.supply.com","port": 8051&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylFOrg1MSP">GylFOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s1.supply.com","port": 8055&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP-v2">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s2.supply.com","port": 8151&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-创建Channel&quot;&gt;2. 创建Channel&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/tags/channel/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>创建网络</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2020-12-30T09:11:32.892Z</published>
    <updated>2021-01-07T06:17:43.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建网络">创建网络</h1><p>一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。</p><h2 id="生成加密材料">生成加密材料</h2><h3 id="创建配置文件">创建配置文件</h3><p>创建<code>supply-finance</code>文件夹，配置<code>config/crypto-config.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">supply.com</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_core_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">core.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_f_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">f1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s2.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="使用配置文件生成加密材料">使用配置文件生成加密材料</h3><p>使用下面的命令生成加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cryptogen generate --config=config/crypto-config.yaml --output="./organizations"</span><br></pre></td></tr></table></figure><h4 id="使用加密材料生成创世纪区块">使用加密材料生成创世纪区块</h4><p>使用下面的命令生成系统创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TestOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">esis.block</span><br><span class="line">2020-12-24 15:41:52.702 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:"500ms" election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Creating system channel genesis block</span><br><span class="line">2020-12-24 15:41:52.724 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br></pre></td></tr></table></figure><p><strong>遇到的错误信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:39:28.696 CST [common.tools.configtxgen] main -&gt; FATA 005 Error on outputBlock: could not create bootstrapper: could not create channel group: could not create orderer group: cannot marshal metadata for orderer type etcdraft: cannot load client cert for consenter orderer.supply.com:8050: open /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/cryptogen/crypto-config/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls/server.crt: no such file or directory</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>$FABRIC_CFG_PATH/configtx.yaml</code>配置的加密文件地址不正确</p><h2 id="启动网络">启动网络</h2><p>各个组织的加密材料生成之后，在本地docker环境启动这些组织的peer节点。</p><h3 id="配置docker-compose-yml文件">配置docker-compose.yml文件</h3><p>在<code>supply-finance</code>目录下添加<code>docker/docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=8050</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LEDGERTYPE=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../system-genesis-block/genesis.block:/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.supply.com:/var/hyperledger/production/orderer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8050</span><span class="string">:8050</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.core.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.core.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.core.supply.com:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylCoreOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.core.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8051</span><span class="string">:8051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.f1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.f1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.f1.supply.com:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylFOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.f1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8053</span><span class="string">:8053</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s1.supply.com:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8055</span><span class="string">:8055</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s2.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s2.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s2.supply.com:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s2.supply.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8151</span><span class="string">:8151</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="使用docker-compose-yml配置文件启动各组织的服务">使用docker-compose.yml配置文件启动各组织的服务</h3><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f ./docker/docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>启动之后会在docker启动下面这些容器：</p><ul><li><a href="http://orderer.supply.com" target="_blank" rel="noopener">orderer.supply.com</a>:排序节点</li><li><a href="http://peer0.core.supply.com" target="_blank" rel="noopener">peer0.core.supply.com</a>:核心企业节点</li><li><a href="http://peer0.f1.supply.com" target="_blank" rel="noopener">peer0.f1.supply.com</a>:一级供应商节点</li><li><a href="http://peer0.s1.supply.com" target="_blank" rel="noopener">peer0.s1.supply.com</a>:二级供应商1节点</li><li><a href="http://peer0.s2.supply.com" target="_blank" rel="noopener">peer0.s2.supply.com</a>:二级供应商2节点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建网络&quot;&gt;创建网络&lt;/h1&gt;
&lt;p&gt;一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。&lt;/p&gt;
&lt;h2 id=&quot;生成加密材料&quot;&gt;生成加密材料&lt;/h2&gt;
&lt;h3 id=&quot;创建配置文件&quot;&gt;创建配置文件&lt;/h</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/25/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/25/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-25T03:38:24.105Z</published>
    <updated>2020-12-31T06:44:07.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar-解压，压缩，帮助：tar-h">tar(解压，压缩，帮助：tar -h)</h2><p>解压，<code>-C</code>标签指定解压到哪个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf -C ./test</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf &lt;archive-filename&gt; [filenames...]</span><br></pre></td></tr></table></figure><h2 id="shasum（hash，帮助shasum-h）">shasum（hash，帮助shasum -h）</h2><p>生成hash，<code>-a</code>标签指定使用哪个算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 README.md</span><br></pre></td></tr></table></figure><h2 id="修改终端显示，不显示用户名和电脑名称">修改终端显示，不显示用户名和电脑名称</h2><p>修改<code>/etc/bashrc</code>：PS1='\w $ ’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> more /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System-wide .bashrc file <span class="keyword">for</span> interactive bash(1) shells.</span></span><br><span class="line">if [ -z "$PS1" ]; then</span><br><span class="line">   return</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PS1=<span class="string">'\h:\W \u\$ '</span></span></span><br><span class="line">PS1='\w \$ '</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make bash check its window size after a process completes</span></span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line">[ -r "/etc/bashrc_$TERM_PROGRAM" ] &amp;&amp; . "/etc/bashrc_$TERM_PROGRAM"</span><br></pre></td></tr></table></figure><p>其他参数：</p><ul><li>\d ：代表日期，格式为weekday month date，例如：“Mon Aug 1”</li><li>\H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux</li><li>\h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略</li><li>\t ：显示时间为24小时格式，如：HH：MM：SS</li><li>\T ：显示时间为12小时格式\A ：显示时间为24小时格式：HH：MM</li><li>\u ：当前用户的账号名称\v ：BASH的版本信息</li><li>\w ：完整的工作目录名称。家目录会以 ~代替</li><li>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</li><li># ：下达的第几个命令</li><li>$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</li></ul><h3 id="crontab（定时任务-man-crontab）">crontab（定时任务,man crontab）</h3><ul><li>查看：<code>crontab -l</code></li><li>编辑：<code>crontab -e</code></li></ul><p>crontab配置举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天十点30分执行hello.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分 时 日 月 星期 <span class="built_in">command</span></span></span><br><span class="line">30 10 * * * ～/hello.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tar-解压，压缩，帮助：tar-h&quot;&gt;tar(解压，压缩，帮助：tar -h)&lt;/h2&gt;
&lt;p&gt;解压，&lt;code&gt;-C&lt;/code&gt;标签指定解压到哪个目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="shell" scheme="https://guozhe001.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>添加一个新的组织到channel</title>
    <link href="https://guozhe001.github.io/2020/12/23/blockchain/fabric/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/"/>
    <id>https://guozhe001.github.io/2020/12/23/blockchain/fabric/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/</id>
    <published>2020-12-23T09:58:30.091Z</published>
    <updated>2021-01-11T09:54:55.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加一个新的组织到channel">添加一个新的组织到channel</h1><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/channel_update_tutorial.html" target="_blank" rel="noopener">官方文档</a></p><p>This tutorial extends the Fabric test network by adding a new organization – Org3 – to an application channel.</p><p>本教程通过向应用程序通道添加新组织Org3扩展了Fabric测试网络。</p><p>While we will focus on adding a new organization to the channel, you can use a similar process to make other channel configuration updates (updating modification policies or altering batch size, for example). To learn more about the process and possibilities of channel config updates in general, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">Updating a channel configuration</a>). It’s also worth noting that channel configuration updates like the one demonstrated here will usually be the responsibility of an organization admin (rather than a chaincode or application developer).</p><p>我们将专注于向channel添加新组织，你可以使用相似的流程来进行其他情况的通道配置更新。略</p><h2 id="Setup-the-Environment（启动环境）">Setup the Environment（启动环境）</h2><p>启动测试环境并创建默认的channel，请参考：<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><h2 id="Bring-Org3-into-the-Channel-with-the-Script（使用脚本将Org3加入到通道）">Bring Org3 into the Channel with the Script（使用脚本将Org3加入到通道）</h2><p>You should be in the <code>test-network</code> directory. To use the script, simply issue the following commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh up</span><br></pre></td></tr></table></figure><p>The output here is well worth reading. You’ll see the Org3 crypto material being generated, the Org3 organization definition being created, and then the channel configuration being updated, signed, and then submitted to the channel.</p><p>这里的输出值的我们一读。你会看到生成Org3组织的加密材料，创建组织Org3的定义然后通道配置会被更新、签名并且提交到通道。</p><p>If everything goes well, you’ll get this message:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">========= Finished adding Org3 to your test network! =========</span><br></pre></td></tr></table></figure><p>Now that we have confirmed we can add Org3 to our channel, we can go through the steps to update the channel configuration that the script completed behind the scenes.</p><p>现在我们已经确认我们可以把组织Org3添加到我们的通道，我们可以按照以下步骤更新通道配置来完成脚本在幕后完成工作。</p><h2 id="Bring-Org3-into-the-Channel-Manually（手动将Org3加入通道）">Bring Org3 into the Channel Manually（手动将Org3加入通道）</h2><p>If you just used the <code>addOrg3.sh</code> script, you’ll need to bring your network down. The following command will bring down all running components and remove the crypto material for all organizations:</p><p>如果你刚才使用了 <code>addOrg3.sh</code>脚本，你需要先把网络关闭。下面的命令会关闭所有正在运行的组件并且移除所有组织的加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh down</span><br></pre></td></tr></table></figure><p>After the network is brought down, bring it back up again（网络关闭之后，重新启动它）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">./network.sh up createChannel</span><br></pre></td></tr></table></figure><p>This will bring your network back to the same state it was in before you executed the <code>addOrg3.sh</code> script.</p><p>这将使您的网络恢复到执行addOrg3.sh脚本之前的状态。</p><p>Now we’re ready to add Org3 to the channel manually. As a first step, we’ll need to generate Org3’s crypto material.</p><p>现在我们已经准备好手动的将Org3添加到通道中了，第一步，我们需要生成Org3的加密材料。</p><h2 id="Generate-the-Org3-Crypto-Material（生成Org3的加密材料）">Generate the Org3 Crypto Material（生成Org3的加密材料）</h2><p>In another terminal, change into the <code>addOrg3</code> subdirectory from <code>test-network</code>.</p><p>在另一个终端切换到 <code>test-network</code>目录的子目录 <code>addOrg3</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br></pre></td></tr></table></figure><p>First, we are going to create the certificates and keys for the Org3 peer, along with an application and admin user. Because we are updating an example channel, we are going to use the cryptogen tool instead of using a Certificate Authority. The following command uses cryptogen to read the <code>org3-crypto.yaml</code> file and generate the Org3 crypto material in a new <code>org3.example.com</code> folder:</p><p>首先，我们将为Org3组织的peer节点包括应用程序和管理员用户创建证书和密钥。因为我们正在更新示例通道，所以我们将使用<code>cryptogen</code>工具而不是使用证书颁发机构。 下面的命令使用<code>cryptogen</code>读取 <code>org3-crypto.yaml</code>文件然后在新的 <code>org3.example.com</code> 文件夹下面生成Org3的加密材料。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../bin/cryptogen generate --config=org3-crypto.yaml --output="../organizations"</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;添加一个新的组织到channel&quot;&gt;添加一个新的组织到channel&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/channel_update_tutorial</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/channel/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/peer/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/tags/channel/"/>
    
    <category term="peer" scheme="https://guozhe001.github.io/tags/peer/"/>
    
  </entry>
  
  <entry>
    <title>创建一个新的channel</title>
    <link href="https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/"/>
    <id>https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/</id>
    <published>2020-12-22T09:09:41.285Z</published>
    <updated>2020-12-31T04:11:36.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建一个新的channel">创建一个新的channel</h1><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html" target="_blank" rel="noopener">官方文档</a></p><p>You can use this tutorial to learn how to create new channels using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a> CLI tool and then use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html" target="_blank" rel="noopener">peer channel</a> commands to join a channel with your peers. While this tutorial will leverage the Fabric test network to create the new channel, the steps in this tutorial can also be used by network operators in a production environment.</p><p>你可以通过这个教程来学习通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a>CLI工具来创建新的通道，然后通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html" target="_blank" rel="noopener">peer channel</a> 命令将peer节点加入通道。尽管本教程将利用Fabric测试网络来创建新渠道，网络操作人员也可以在生产环境中使用本教程中的步骤。</p><p>In the process of creating the channel, this tutorial will take you through the following steps and concepts:</p><p>在创建频道的过程中，本教程将带您完成以下步骤和概念：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#setting-up-the-configtxgen-tool" target="_blank" rel="noopener">Setting up the configtxgen tool</a>：设置configtxgen工具</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-configtx-yaml-file" target="_blank" rel="noopener">Using the configtx.yaml file</a>：使用configtx.yaml配置文件</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-orderer-system-channel" target="_blank" rel="noopener">The orderer system channel</a>：排序的系统通道介绍</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#creating-an-application-channel" target="_blank" rel="noopener">Creating an application channel</a>：创建一个应用通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#join-peers-to-the-channel" target="_blank" rel="noopener">Joining peers to the channel</a>：将peer节点加入通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#set-anchor-peers" target="_blank" rel="noopener">Setting anchor peers</a>：设置锚节点</li></ul><h3 id="Setting-up-the-configtxgen-tool（设置configtxgen工具）">Setting up the configtxgen tool（设置configtxgen工具）</h3><p>Channels are created by building a channel creation transaction and submitting the transaction to the ordering service. The channel creation transaction specifies the initial configuration of the channel and is used by the ordering service to write the channel genesis block. While it is possible to build the channel creation transaction file manually, it is easier to use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a> tool. The tool works by reading a <code>configtx.yaml</code> file that defines the configuration of your channel, and then writing the relevant information into the channel creation transaction. Before we discuss the <code>configtx.yaml</code> file in the next section, we can get started by downloading and setting up the <code>configtxgen</code> tool.</p><p>通道的创建是通过构建一个创建通道的交易然后将此交易提交给排序服务来完成的。“创建通道的交易”指明了此通道的初始化配置并且由排序服务写入通道的创世纪区块中。尽管可以手动构建“创建通道的交易”，但使用configtxgen工具更容易。configtxgen工具读取定义了channle配置的<code>configtx.yaml</code>文件，然后将相关信息写入“创建通道的交易”中。在我们讨论 <code>configtx.yaml</code> 文件之前，我们先开始下载并设置<code>configtxgen</code> 工具。</p><p>You can download the <code>configtxgen</code> binaries by following the steps to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html" target="_blank" rel="noopener">install the samples, binaries and Docker images</a>. <code>configtxgen</code> will be downloaded to the <code>bin</code> folder of your local clone of the <code>fabric-samples</code> repository along with other Fabric tools.</p><p>你可以跟着 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html" target="_blank" rel="noopener">install the samples, binaries and Docker images</a>的步骤来下载 <code>configtxgen</code> 。 <code>configtxgen</code> 会下载到<code>fabric-samples</code>仓库的<code>bin</code>目录下。</p><p>For the purposes of this tutorial, we will want to operate from the <code>test-network</code> directory inside <code>fabric-samples</code>. Navigate to that directory using the following command:</p><p>为了本教程的目的，我们会想要在<code>fabric-samples</code>下面的 <code>test-network</code> 目录下进行操作，使用下面的命令切换到此目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>We will operate from the <code>test-network</code> directory for the remainder of the tutorial. Use the following command to add the configtxgen tool to your CLI path:</p><p>在本教程的其余部分中，我们将从test-network目录进行操作。使用以下命令将configtxgen工具添加到您的CLI路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>In order to use <code>configtxgen</code>, you need to the set the <code>FABRIC_CFG_PATH</code> environment variable to the path of the directory that contains your local copy of the <code>configtx.yaml</code> file. For this tutorial, we will reference the <code>configtx.yaml</code> used to setup the Fabric test network in the <code>configtx</code> folder:</p><p>为了使用<code>configtxgen</code>，您需要将<code>FABRIC_CFG_PATH</code>环境变量设置为包含<code>configtx.yaml</code>的本地目录。对于本教程，我们将在此环境变量设置为在Fabric test network目录下的包含<code>configtx.yaml</code>的<code>configtx</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/configtx</span><br></pre></td></tr></table></figure><p>You can check that you can are able to use the tool by printing the <code>configtxgen</code> help text:</p><p>你可以通过打印 <code>configtxgen</code>工具的help来检查是否已经设置好:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h2 id="The-configtx-yaml-file（configtx-yaml文件）">The configtx.yaml file（configtx.yaml文件）</h2><p>The <code>configtx.yaml</code> file specifies the <strong>channel configuration</strong> of new channels. The information that is required to build the channel configuration is specified in a readable and editable form in the <code>configtx.yaml</code> file. The <code>configtxgen</code> tool uses the channel profiles defined in the <code>configtx.yaml</code> file to create the channel configuration and write it to the <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">protobuf format</a> that can be read by Fabric.</p><p><code>configtx.yaml</code> 文件指明了一个新的通道的通道配置。在<code>configtx.yaml</code>文件中可以读取和编辑构建通道配置所需的信息。 <code>configtxgen</code> 工具通过使用 <code>configtx.yaml</code>文件中的通道属性的定义来创建通道配置，并将其写入可由Fabric读取的 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">protobuf格式</a>。</p><p>You can find the <code>configtx.yaml</code> file that is used to deploy the test network in the <code>configtx</code> folder in the <code>test-network</code> directory. The file contains the following information that we will use to create our new channel:</p><p>你可以在<code>test-network</code>目录的<code>configtx</code> 文件夹下面看到 <code>configtx.yaml</code> 文件，这个文件包含在创建新通道时会用到的下面的信息：</p><ul><li><p><strong>Organizations:</strong> The organizations that can become members of your channel. Each organization has a reference to the cryptographic material that is used to build the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html" target="_blank" rel="noopener">channel MSP</a>.</p><ul><li>可以成为你的通道成员的组织信息，每一个组织都有对用于构建<a href="%5D(https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html)">通道MSP</a>的加密材料的引用。</li></ul></li><li><p><strong>Ordering service:</strong> Which ordering nodes will form the ordering service of the network, and consensus method they will use to agree to a common order of transactions. The file also contains the organizations that will become the ordering service administrators.</p><ul><li>哪些排序节点将形成网络中的排序服务，以及它们用于同意交易顺序的共识方法。此文件还包含了会成为排序服务管理员的组织的信息。</li></ul></li><li><p><strong>Channel policies：</strong> Different sections of the file work together to define the policies that will govern how organizations interact with the channel and which organizations need to approve channel updates. For the purposes of this tutorial, we will use the default policies used by Fabric.</p><ul><li>文件的不同部分一起定义通道策略，这些策略将控制组织与通道的交互方式以及哪些组织需要批准渠道更新。就本教程而言，我们将使用Fabric使用的默认策略。</li></ul></li><li><p><strong>Channel profiles</strong> Each channel profile references information from other sections of the <code>configtx.yaml</code> file to build a channel configuration. The profiles are used the create the genesis block of the orderer system channel and the channels that will be used by peer organizations. To distinguish them from the system channel, the channels used by peer organizations are often referred to as application channels.</p><ul><li>每个通道的配置信息都引用<code>configtx.yaml</code>文件的其他部分来构建通道配置。这些配置信息是用来创建<strong>orderer system channel</strong> 的创世纪区块的，然后通道会被同等的其他组织所使用。为了将它们（<strong>orderer system channel</strong>）与系统通道区分开来，组织使用的通道通常称为应用程序通道。</li></ul><p>The <code>configtxgen</code> tool uses <code>configtx.yaml</code> file to create a complete genesis block for the system channel. As a result, the system channel profile needs to specify the full system channel configuration. The channel profile used to create the channel creation transaction only needs to contain the additional configuration information required to create an application channel.</p></li></ul><p><code>configtxgen</code>工具使用<code>configtx.yaml</code>文件为系统通道创建完整的创世块。结果，系统通道配置文件需要指定完整的系统通道配置。用于创建“创建通道的交易”使用的通道配置仅需要包含创建应用程序通道所需的其他配置信息。</p><p>You can visit the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html" target="_blank" rel="noopener">Using configtx.yaml to create a channel genesis block</a> tutorial to learn more about this file. For now, we will return to the operational aspects of creating the channel, though we will reference parts of this file in future steps.</p><p>你可以访问 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html" target="_blank" rel="noopener">Using configtx.yaml to create a channel genesis block</a> 教程来学习此文件的更多信息。现在我们回到创建通道的操作方面。</p><h2 id="Start-the-network（启动网络）">Start the network（启动网络）</h2><p>参考<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><p>Our instance of the test network was deployed without creating an application channel. However, the test network script creates the system channel when you issue the <code>./network.sh up</code> command. Under the covers, the script uses the <code>configtxgen</code> tool and the <code>configtx.yaml</code> file to build the genesis block of the system channel. Because the system channel is used to create other channels, we need to take some time to understand the orderer system channel before we can create an application channel.</p><p>我们部署的测试网络实例未创建应用程序通道。但是测试网络脚本在你运行<code>./network.sh up</code> 命令时创建了系统通道。在幕后，脚本使用<code>configtxgen</code>工具和<code>configtx.yaml</code>文件来构建系统通道的创世纪块。因为系统通道是用来创建其他通道的，所以我们在创建一个应用通道之前需要花一些时间去了解排序系统通道（ <strong>orderer system channel</strong> ）</p><h2 id="The-orderer-system-channel（排序系统通道）">The orderer system channel（排序系统通道）</h2><p>略</p><h2 id="Creating-an-application-channel（创建一个应用通道）">Creating an application channel（创建一个应用通道）</h2><p>Now that we have deployed the nodes of the network and created the orderer system channel using the <code>network.sh</code> script, we can start the process of creating a new channel for our peer organizations. We have already set the environment variables that are required to use the <code>configtxgen</code> tool. Run the following command to create a channel creation transaction for <code>channel1</code>:</p><p>现在我们已经使用<code>network.sh</code>脚本在测试网络中部署了节点，并且创建了排序系统通道。我们现在可以开始为我们的组织创建一个新通道的程序了。我们已经设置了使用<code>configtxgen</code>工具所需的环境变量。运行下面的程序来为<code>channel1</code>通道创建一个“创建通道的交易”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID channel1</span><br></pre></td></tr></table></figure><p>The <code>-channelID</code> will be the name of the future channel. Channel names must be all lower case, less than 250 characters long and match the regular expression <code>[a-z][a-z0-9.-]*</code>. The command uses the uses the <code>-profile</code> flag to reference the <code>TwoOrgsChannel:</code> profile from <code>configtx.yaml</code> that is used by the test network to create application channels:</p><p><code>-channelID</code>标志制定了创建的通道的名称，通道的名称必须全是小写，不超过250个字符并且符合正则表达式<code>[a-z][a-z0-9.-]*</code>。该命令使用<code>-profile</code>标志来引用<code>configtx.yaml</code>文件中的<code>TwoOrgsChannel：</code>配置，测试网络使用它来创建应用程序通道：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TwoOrgsChannel:</span></span><br><span class="line">    <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">    <span class="attr">Application:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">        <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">        <span class="attr">Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><p>The profile references the name of the <code>SampleConsortium</code> from the system channel, and includes both peer organizations from the consortium as channel members. Because the system channel is used as a template to create the application channel, the ordering nodes defined in the system channel become the default <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a> of the new channel, while the administrators of the ordering service become the orderer administrators of the channel. Ordering nodes and ordering organizations can be added or removed from the consenter set using channel updates.</p><p>该配置文件从系统通道引用<code>SampleConsortium</code>的名称，并且包含来自该联盟的两个组织作为通道成员。因为系统通道被用作模版来创建应用通道，系统通道中定义的排序节点成为新渠道的默认<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a>，而排序服务的管理员将成为新渠道的排序管理员。可以使用通道更新在<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a>中添加或删除排序节点和排序组织。</p><p>If the command successful, you will see logs of <code>configtxgen</code> loading the <code>configtx.yaml</code> file and printing a channel creation transaction:</p><p>如果上面的命令执行成功，你会看到<code>configtxgen</code> 工具加载 <code>configtx.yaml</code> 文件并且打印了一个创建通道的交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:25:49.175 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/test-network/configtx/configtx.yaml</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-23 14:25:49.188 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>We can use the <code>peer</code> CLI to submit the channel creation transaction to the ordering service. To use the <code>peer</code> CLI, we need to set the <code>FABRIC_CFG_PATH</code> to the <code>core.yaml</code> file located in the <code>fabric-samples/config</code> directory. Set the <code>FABRIC_CFG_PATH</code> environment variable by running the following command:</p><p>你可以使用 <code>peer</code>CLI来把这个“创建通道的交易”提交到排序服务。为了使用<code>peer</code> CLI，我们需要设置环境变量<code>FABRIC_CFG_PATH</code>为 <code>fabric-samples/config</code> 目录下的<code>core.yaml</code>文件，运行下面的命令来设置<code>FABRIC_CFG_PATH</code>环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>Before the ordering service creates the channel, the ordering service will check the permission of the identity that submitted the request. By default, only admin identities of organizations that belong to the system channel consortium can create a new channel. Issue the commands below to operate the <code>peer</code> CLI as the admin user from Org1:</p><p>在排序服务创建通道时，排序服务会检查提交请求的身份的权限。默认情况下，只有属于系统通道联盟的组织的管理员身份才能创建新的通道。运行下面的命令来以Org1的管理员身份操作 <code>peer</code> CLI:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can now create the channel by using the following command:</p><p>你现在可以使用下面的命令来创建通道了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com -c channel1 -f ./channel-artifacts/channel1.tx --outputBlock ./channel-artifacts/channel1.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command above provides the path to the channel creation transaction file using the <code>-f</code> flag and uses the <code>-c</code> flag to specify the channel name. The <code>-o</code> flag is used to select the ordering node that will be used to create the channel. The <code>--cafile</code> is the path to the TLS certificate of the ordering node. When you run the <code>peer channel create</code> command, the <code>peer</code> CLI will generate the following response:</p><p>上面的命令使用 <code>-f</code>标志来指定“创建通道的交易”的文件，并且使用 <code>-c</code> 标志来指定通道名称。<code>-o</code>标志是用来选择用来创建通道的排序节点的。<code>--cafile</code> 标志是排序节点的TLS证书路径。当你运行 <code>peer channel create</code>命令时， <code>peer</code> CLI会生成下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:36:09.386 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 14:36:09.595 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p>Because we are using a Raft ordering service, you may get some status unavailable messages that you can safely ignore. The command will return the genesis block of the new channel to the location specified by the <code>--outputBlock</code> flag.</p><p>因为我们使用一个Raft策略的排序服务，你可能会收到一些状态不可用的信息你可以放心的忽略他们。该命令会将新通道的创世纪区块输出到<code>--outputBlock</code>标志指定的位置。</p><h2 id="Join-peers-to-the-channel（把节点加入通道中）">Join peers to the channel（把节点加入通道中）</h2><p>After the channel has been created, we can join the channel with our peers. Organizations that are members of the channel can fetch the channel genesis block from the ordering service using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch" target="_blank" rel="noopener">peer channel fetch</a> command. The organization can then use the genesis block to join the peer to the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join" target="_blank" rel="noopener">peer channel join</a> command. Once the peer is joined to the channel, the peer will build the blockchain ledger by retrieving the other blocks on the channel from the ordering service.</p><p>在通道创建之后，我们可以把我们的peer节点加入到通道。属于通道成员的组织可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch" target="_blank" rel="noopener">peer channel fetch</a>命令从排序服务那里获取通道的创世纪区块。然后这个组织就可以使用这个创世纪区块来通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join" target="_blank" rel="noopener">peer channel join</a> 命令将peer节点加入到通道了。一旦peer节点加入了通道，peer节点将通过从排序服务中检索其他区块来构建区块链账本了。</p><p>Since we are already operating the <code>peer</code> CLI as the Org1 admin, let’s join the Org1 peer to the channel. Since Org1 submitted the channel creation transaction, we already have the channel genesis block on our file system. Join the Org1 peer to the channel using the command below.</p><p>因为我们已经通过Org1的管理员操作了 <code>peer</code> CLI ，让我们把Org1的peer节点加入到通道。因为是Org1组织提交的“创建通道的交易”，我们已经在我们本地的文件系统中拥有了通道的创世纪区块。使用下面的命令将组织Org1的peer节点加入到通道中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel1.block</span><br></pre></td></tr></table></figure><p>The <code>CORE_PEER_ADDRESS</code> environment variable has been set to target <code>peer0.org1.example.com</code>. A successful command will generate a response from <code>peer0.org1.example.com</code> joining the channel:</p><p>环境变量<code>CORE_PEER_ADDRESS</code>已经设置为指向了<code>peer0.org1.example.com</code>，如果命令成功的话会获取 <code>peer0.org1.example.com</code> 加入通道的响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 17:49:09.903 EST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-06 17:49:10.060 EST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p>我本地的运行报错如下，记录TODO，最终使用最新2.3.0的版本就没有这个问题。2.2.0版本没有成功启动org1的peer。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     peer channel join -b ./channel-artifacts/channel1.block</span><br><span class="line">2020-12-23 14:59:02.760 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.782623ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:03.768 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 2.438885ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:05.075 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 1.857716ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>You can verify that the peer has joined the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo" target="_blank" rel="noopener">peer channel getinfo</a> command:</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo" target="_blank" rel="noopener">peer channel getinfo</a> 命令来验证peer节点已经加入了通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>The command will list the block height of the channel and the hash of the most recent block. Because the genesis block is the only block on the channel, the height of the channel will be 1:</p><p>这个命令会列出通道区块的高度和最新的区块的hash值，因为这个通道上只有一个创世纪区块，所以这个通道上的区块高度是1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 10:50:06.978 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"kvtQYYEL2tz0kDCNttPFNC4e6HVUFOGMTIDxZ+DeNQM="&#125;</span><br></pre></td></tr></table></figure><p>We can now join the Org2 peer to the channel. Set the following environment variables to operate the <code>peer</code> CLI as the Org2 admin. The environment variables will also set the Org2 peer, <code>peer0.org1.example.com</code>, as the target peer.</p><p>我们现在可以把组织Org2的peer节点加入通道了。设置下面的环境变量来使用Org2的管理员操作<code>peer</code> CLI。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>While we still have the channel genesis block on our file system, in a more realistic scenario, Org2 would have the fetch the block from the ordering service. As an example, we will use the <code>peer channel fetch</code> command to get the genesis block for Org2:</p><p>然而在我们本地系统中仍然存在通道的创世纪区块，在一个更真实的情形中，组织Org2应该从排序服务获取这个区块。例如，我们将使用 <code>peer channel fetch</code>命令来为组织Org2获取创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/channel_org2.block -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command uses <code>0</code> to specify that it needs to fetch the genesis block that is required to join the channel. If the command is successful, you should see the following output:</p><p>该命令使用<code>0</code>来指明它需要获取创世纪块，该创世纪区块用于加入通道。如果命令执行成功，你会看到下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 11:32:06.309 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-13 11:32:06.336 EDT [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br></pre></td></tr></table></figure><p>The command returns the channel genesis block and names it <code>channel_org2.block</code> to distinguish it from the block pulled by org1. You can now use the block to join the Org2 peer to the channel:</p><p>这个命令会获取到名为 <code>channel_org2.block</code> 的通道创世纪区块，以与Org1的区块作区分。你现在可以使用这个区块把Org2的peer节点加入到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel_org2.block</span><br></pre></td></tr></table></figure><h2 id="Set-anchor-peers（设置锚节点）">Set anchor peers（设置锚节点）</h2><p>After an organizations has joined their peers to the channel, they should select at least one of their peers to become an anchor peer. <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers" target="_blank" rel="noopener">Anchor peers</a> are required in order to take advantage of features such as private data and service discovery. Each organization should set multiple anchor peers on a channel for redundancy. For more information about gossip and anchor peers, see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html" target="_blank" rel="noopener">Gossip data dissemination protocol</a>.</p><p>在一个组织将他们的peer节点加入到通道之后，他们还需要在他们的组织内部选择至少一个peer节点作为锚节点。<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers" target="_blank" rel="noopener">Anchor peers</a> 需要锚节点的好处是他能够利用私有数据以及做服务发现。每个组织都应在一个通道上设置多个锚节点以实现冗余。</p><p>The endpoint information of the anchor peers of each organization is included in the channel configuration. Each channel member can specify their anchor peers by updating the channel. We will use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html" target="_blank" rel="noopener">configtxlator</a> tool to update the channel configuration and select an anchor peer for Org1 and Org2. The process for setting an anchor peer is similar to the steps that are required to make other channel updates and provides an introduction to how to use <code>configtxlator</code> to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">update a channel configuration</a>. You will also need to install the <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq tool</a> on your local machine.</p><p>通道配置中包含每个组织的锚节点的终点信息。每个组织都可以通过更新通道配置来知名他们的锚节点。我们会使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html" target="_blank" rel="noopener">configtxlator</a>工具来更新通道配置并且为组织Org1和Org2各选择一个锚节点。设置锚节点的流程与教程<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">update a channel configuration</a>的步骤很类似。你还需要在你的本地安装<a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq</a> 工具。</p><p>We will start by selecting an anchor peer as Org1. The first step is to pull the most recent channel configuration block using the <code>peer channel fetch</code> command. Set the following environment variables to operate the <code>peer</code> CLI as the Org1 admin:</p><p>我们先以Org1的身份来选择一个锚节点。第一步是使用<code>peer channel fetch</code> 命令拉去最新的通道配置区块。设置环境变量以Org1管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can use the following command to fetch the channel configuration:</p><p>你可以通过下面的命令来获取通道配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Because the most recent channel configuration block is the channel genesis block, you will see the command return block 0 from the channel.</p><p>因为最新的通道配置区块是通道的创世纪区块，你会看到该命令会返回通道上的0区块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 16:37:33.686 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 16:37:33.689 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-23 16:37:33.689 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-23 16:37:33.693 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><p>The channel configuration block was stored in the <code>channel-artifacts</code> folder to keep the update process separate from other artifacts. Change into the <code>channel-artifacts</code> folder to complete the next steps:</p><p>通道配置区块被存储在channel-artifacts目录下，以使更新流程与其他的组件区分开。进入 <code>channel-artifacts</code> 目录下来完成接下来的步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>We can now start using the <code>configtxlator</code> tool to start working with the channel configuration. The first step is to decode the block from protobuf into a JSON object that can be read and edited. We also strip away the unnecessary block data, leaving only the channel configuration.</p><p>我们现在开始使用 <code>configtxlator</code> 工具和通道配置一起工作。第一步是将来自区块的protobuf格式解码为可以读取和编辑的JSON格式。我们还将去除不必要的块数据，仅保留通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br></pre></td></tr></table></figure><p>These commands convert the channel configuration block into a streamlined JSON, <code>config.json</code>, that will serve as the baseline for our update. Because we don’t want to edit this file directly, we will make a copy that we can edit. We will use the original channel config in a future step.</p><p>这些命令将通道配置区块转换为简化的JSON格式的文件<code>config.json</code>，它将作为我们更新的基准。因为我们不想直接编辑这个文件，我们会先创建一个可以编辑的副本。我们将在以后的步骤中使用原始的通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>You can use the <code>jq</code> tool to add the Org1 anchor peer to the channel configuration.</p><p>你可以使用<code>jq</code> 工具来添加Org1组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.Org1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.org1.example.com","port": 7051&#125;]&#125;,"version": "0"&#125;&#125;' config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>After this step, we have an updated version of channel configuration in JSON format in the <code>modified_config.json</code> file. We can now convert both the original and modified channel configurations back into protobuf format and calculate the difference between them.</p><p>完成此步骤后，我们在<code>modified_config.json</code>文件中以JSON格式获取了通道配置的更新版本。现在，我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>The new protobuf named <code>channel_update.pb</code> contains the anchor peer update that we need to apply to the channel configuration. We can wrap the configuration update in a transaction envelope to create the channel configuration update transaction.</p><p>格式为protobuf的新的<code>channel_update.pb</code>文件包含我们需要应用于通道配置上的锚节点更新。我们可以将配置更新包装在交易信封中以创建通道配置更新交易。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"channel1", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat config_update.json)'&#125;&#125;&#125;' | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>We can now use the final artifact, <code>config_update_in_envelope.pb</code>, that can be used to update the channel. Navigate back to the <code>test-network</code> directory:</p><p>现在，我们可以使用最终工件<code>config_update_in_envelope.pb</code>，该工件可以用于更新通道。回到<code>test-network</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>We can add the anchor peer by providing the new channel configuration to the <code>peer channel update</code> command. Because we are updating a section of the channel configuration that only affects Org1, other channel members do not need to approve the channel update.</p><p>我们可以通过向<code>peer channel update</code>命令提供新的通道配置来添加锚节点。因为我们正在更新仅影响Org1的部分通道配置，所以其他通道成员不需要批准通道更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>When the channel update is successful, you should see the following response:</p><p>当渠道更新成功后，你会看到下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:05:48.187 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 17:05:48.222 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p>We can set the anchor peers for Org2. Because we are going through the process a second time, we will go through the steps more quickly. Set the environment variables to operate the <code>peer</code> CLI as the Org2 admin:</p><p>我们可以为Org2设置锚节点。因为我们是第二次进行该过程，所以我们将更快地完成这些步骤。设置环境变量以Org2管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>Pull the latest channel configuration block, which is now the second block on the channel:</p><p>拉去最新的通道配置区块，即目前通道上的第二个区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>channel-artifacts</code> directory（切换回 <code>channel-artifacts</code> 目录）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>You can then decode and copy the configuration block.（你可以解码并复制配置区块）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>Add the Org2 peer that is joined to the channel as the anchor peer in the channel configuration:</p><p>在通道配置中添加Org2的已经加入通道的节点作为锚节点:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.Org2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.org2.example.com","port": 9051&#125;]&#125;,"version": "0"&#125;&#125;' config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>We can now convert both the original and updated channel configurations back into protobuf format and calculate the difference between them.</p><p>我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>Wrap the configuration update in a transaction envelope to create the channel configuration update transaction:</p><p>将配置更新包装在交易信封中以创建通道配置更新交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"channel1", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat config_update.json)'&#125;&#125;&#125;' | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>test-network</code> directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>Update the channel and set the Org2 anchor peer by issuing the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>You can confirm that the channel has been updated successfully by running the <code>peer channel info</code> command:</p><p>你可以使用 <code>peer channel info</code>命令来确认通道已经成功更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>Now that the channel has been updated by adding two channel configuration blocks to the channel genesis block, the height of the channel will have grown to three:</p><p>现在已经通过在创世纪区块上添加两个通道配置区块更新了通道，通道的区块高度会增长到3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:19:08.620 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"0xMLgGnvbUE+gfDpxjbfB1OsxROF3djLzPX9S76ai2I=","previousBlockHash":"6oIrHH8zjeOuhlj2/rrpzxh0pNmGOdPTDjiphJwCXcQ="&#125;</span><br></pre></td></tr></table></figure><h2 id="Deploy-a-chaincode-to-the-new-channel（部署链码到新通道上）">Deploy a chaincode to the new channel（部署链码到新通道上）</h2><p>We can confirm that the channel was created successfully by deploying a chaincode to the channel. We can use the <code>network.sh</code> script to deploy the Basic asset transfer chaincode to any test network channel. Deploy a chaincode to our new channel using the following command:</p><p>我们可以通过在通道上部署链码来确认通道已经创建成功。我们可以使用 <code>network.sh</code> 脚本部署Basic asset transfer 链码到任何测试通道，使用下面的命令将链码部署到新通道上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go/ -ccl go -c channel1 -cci InitLedger</span><br></pre></td></tr></table></figure><p>After you run the command, you should see the chaincode being deployed to the channel in your logs. The chaincode is invoked to add data to the channel ledger.</p><p>运行命令后，您应该在日志中看到链码已部署到通道。调用链码将数据添加到通道账本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C channel1 -n basic -c '&#123;"Args":["getAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>After you run the query, you should see the assets that were added to the channel ledger.</p><p>在运行查询之后，你会看到已经添加到通道账本上的资产列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;,&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;,&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;,&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;,&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;,&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建一个新的channel&quot;&gt;创建一个新的channel&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/channel/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="channel" scheme="https://guozhe001.github.io/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>SUMMARY-供应链金融</title>
    <link href="https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/"/>
    <id>https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/</id>
    <published>2020-12-22T08:15:02.071Z</published>
    <updated>2021-01-11T10:03:39.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>为了学习Fabric，模拟搭建一个供应链金融的区块链项目。</p><p>为了简单起见，此项目有以下四个组织：</p><ul><li>核心企业</li><li>一级供应商</li><li>二级供应商1</li><li>二级供应商2</li></ul><h2 id="操作步骤：">操作步骤：</h2><ol start="0"><li><a href="https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/">设置环境变量</a></li><li><a href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/">创建网络</a></li><li><a href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></li><li><a href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/">开发智能合约</a></li><li><a href="https://guozhe001.github.io/2020/12/31/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/">部署智能合约到channel并进行交易</a></li><li>[交易与验证](file://部署智能合约到channel.md)：查看“部署supply-v8到alljoinchannel通道”部分</li><li><a href="https://guozhe001.github.io/2021/01/05/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/">隐秘交易</a></li><li><a href="https://github.com/guozhe001/supply-finance.git" target="_blank" rel="noopener">源码地址</a></li></ol><h2 id="总结：">总结：</h2><p>本项目成功的在测试环境自己部署网络，自己写智能合约并进行调用；完成了入门练习。</p><h2 id="存在的问题：">存在的问题：</h2><h3 id="问题1">问题1</h3><p>目前此程序把所有的组织都加入了同一个渠道，所以账本是对所有组织都是公开的；现实生活中每个企业之间的交易应该都是私密的，不能被其他企业所见。</p><h4 id="解决方案1：">解决方案1：</h4><p>使用通道隔离，每两个需要交易的组织之间都创建一个通道。</p><p><strong>可行性：</strong> <em>初步判断此方法不可行，因为不同通道之间无法交易资产？如果可以交易需要从原来的channel销毁此资产，然后在新channel创建一个新的可被信任的新资产</em></p><h4 id="解决方案2：">解决方案2：</h4><p>使用私密资产交易的方式解决,参考文档<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html" target="_blank" rel="noopener">Secured asset transfer in Fabric</a></p><p><strong>可行性：</strong> 可以，查看[隐秘交易](file://隐秘交易.md)</p><h3 id="问题2">问题2:</h3><p>同一个智能合约如何限制只能由指定的人调用？如本例中，发行方法应该只能由核心企业调用。</p><h3 id="解决方案">解决方案</h3><p>同一个智能合约可以由部署智能合约的成员调用，所以无法限制，除非智能合约里面写死。</p><p>在应收账款供应链金融的demo中，我们写的智能合约可以由任何人发行应收账款，但是这只是生成了私有的数据，别人认不认可是否跟发行应收账款的组织交易是链下解决的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目背景&quot;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;为了学习Fabric，模拟搭建一个供应链金融的区块链项目。&lt;/p&gt;
&lt;p&gt;为了简单起见，此项目有以下四个组织：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心企业&lt;/li&gt;
&lt;li&gt;一级供应商&lt;/li&gt;
&lt;li&gt;二级供应商1&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>编写您的第一个Chaincode</title>
    <link href="https://guozhe001.github.io/2020/12/21/blockchain/fabric/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/"/>
    <id>https://guozhe001.github.io/2020/12/21/blockchain/fabric/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/</id>
    <published>2020-12-21T10:35:52.258Z</published>
    <updated>2021-01-11T09:55:06.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Asset-Transfer-Chaincode（资产交易智能合约）">Asset Transfer Chaincode（资产交易智能合约）</h2><p>Our application is a basic sample chaincode to initialize a ledger with assets, create, read, update, and delete assets, check to see if an asset exists, and transfer assets from one owner to another.</p><p>我们的程序是一个基本简单的链码，利用资产初始化账本，创建、读取，更新以及更新资产，检查一个资产是否存在并且把资产从一个所有者交易给另一个所有者。</p><h3 id="Choosing-a-Location-for-the-Code（给代码选一个位置）">Choosing a Location for the Code（给代码选一个位置）</h3><p>If you haven’t been doing programming in Go, you may want to make sure that you have <a href="https://golang.org/" target="_blank" rel="noopener">Go</a> installed and your system properly configured. We assume you are using a version that supports modules.</p><p>如果你还没有使用过Go，你需要确认你的环境已经安装了 <a href="https://golang.org/" target="_blank" rel="noopener">Go</a>并配置好了环境变量。我们假设你使用的是支持模块的版本。</p><p>Now, you will want to create a directory for your chaincode application.</p><p>To keep things simple, let’s use the following command:</p><p>现在你想要为你的链码程序创建一个目录，简单起见，我们使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// atcc is shorthand for asset transfer chaincode</span><br><span class="line">mkdir atcc &amp;&amp; cd atcc</span><br></pre></td></tr></table></figure><p>Now, let’s create the module and the source file that we’ll fill in with code:</p><p>现在让我们创建模块和源文件，并用代码填充它们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init atcc</span><br><span class="line">touch atcc.go</span><br></pre></td></tr></table></figure><h3 id="Housekeeping-整理工作">Housekeeping(整理工作)</h3><p>First, let’s start with some housekeeping. As with every chaincode, it implements the <a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi" target="_blank" rel="noopener">fabric-contract-api interface</a>, so let’s add the Go import statements for the necessary dependencies for our chaincode. We’ll import the fabric contract api package and define our SmartContract.</p><p>首先让我们做一些整理工作。所有的链码都实现了<a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi" target="_blank" rel="noopener">fabric-contract-api interface</a>，所以让我们为Go程序添加必要的依赖。我们会导入fabric合同API包来定义我们的智能合约。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line">   <span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">   contractapi.Contract</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Next, let’s add a struct <code>Asset</code> to represent simple assets on the ledger. Note the JSON annotations, which will be used to marshal the asset to JSON which is stored on the ledger.</p><p>下一步让我们增加一个<code>Asset</code> 类来表示账本上的简单的资产。请注意JSON注释，该注释将用于将资产编组为存储在分类帐中的JSON。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line">   <span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID             <span class="keyword">string</span> <span class="string">`json:"ID"`</span></span><br><span class="line">    Color          <span class="keyword">string</span> <span class="string">`json:"color"`</span></span><br><span class="line">    Size           <span class="keyword">int</span>    <span class="string">`json:"size"`</span></span><br><span class="line">    Owner          <span class="keyword">string</span> <span class="string">`json:"owner"`</span></span><br><span class="line">    AppraisedValue <span class="keyword">int</span>    <span class="string">`json:"appraisedValue"`</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Initializing-the-Chaincode-初始化链码">Initializing the Chaincode(初始化链码)</h3><p>Next, we’ll implement the <code>InitLedger</code> function to populate the ledger with some initial data.</p><p>接下来我们实现<code>InitLedger</code> 方法，这个方法使用一些初始化的数据来填充账本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InitLedger adds a base set of assets to the ledger</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">InitLedger</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      assets := []Asset&#123;</span><br><span class="line">        &#123;ID: <span class="string">"asset1"</span>, Color: <span class="string">"blue"</span>, Size: <span class="number">5</span>, Owner: <span class="string">"Tomoko"</span>, AppraisedValue: <span class="number">300</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset2"</span>, Color: <span class="string">"red"</span>, Size: <span class="number">5</span>, Owner: <span class="string">"Brad"</span>, AppraisedValue: <span class="number">400</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset3"</span>, Color: <span class="string">"green"</span>, Size: <span class="number">10</span>, Owner: <span class="string">"Jin Soo"</span>, AppraisedValue: <span class="number">500</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset4"</span>, Color: <span class="string">"yellow"</span>, Size: <span class="number">10</span>, Owner: <span class="string">"Max"</span>, AppraisedValue: <span class="number">600</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset5"</span>, Color: <span class="string">"black"</span>, Size: <span class="number">15</span>, Owner: <span class="string">"Adriana"</span>, AppraisedValue: <span class="number">700</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset6"</span>, Color: <span class="string">"white"</span>, Size: <span class="number">15</span>, Owner: <span class="string">"Michel"</span>, AppraisedValue: <span class="number">800</span>&#125;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, asset := <span class="keyword">range</span> assets &#123;</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      err = ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to put to world state. %v"</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Next, we write a function to create an asset on the ledger that does not yet exist. When writing chaincode, it is a good idea to check for the existence of something on the ledger prior to taking an action on it, as is demonstrated in the <code>CreateAsset</code> function below.</p><p>接下来，我们写一个创建一个账本上不存在的资产的方法。当编写链码时，最好先对分类帐进行检查，然后再对其进行操作，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Asset-Transfer-Chaincode（资产交易智能合约）&quot;&gt;Asset Transfer Chaincode（资产交易智能合约）&lt;/h2&gt;
&lt;p&gt;Our application is a basic sample chaincode to initia</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="chaincode" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/chaincode/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="chaincode" scheme="https://guozhe001.github.io/tags/chaincode/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/21/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/21/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-21T03:52:27.579Z</published>
    <updated>2021-01-04T03:47:20.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker命令">docker命令</h2><h3 id="删除本地所有没有被使用的卷：">删除本地所有没有被使用的卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>WARNING! This will remove all local volumes not used by at least one container.</p><h3 id="查看本地的所有卷：">查看本地的所有卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="删除某个volume卷">删除某个volume卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm docker_orderer.supply.com</span><br></pre></td></tr></table></figure><h3 id="查看所有的容器，包括没有运行中的">查看所有的容器，包括没有运行中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看某个容器的日志">查看某个容器的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs ead00b30e8ec</span><br></pre></td></tr></table></figure><h3 id="停止容器">停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm ead00b30e8ec 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="进入docker容器">进入docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="修改容器的环境变量">修改容器的环境变量</h3><p>在配置docker-compose某个容器的环境变量时出现了错误，但是容器已经运行了，如果重新运行则数据会丢失。所以需要修正此环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#Generic</span> <span class="string">peer</span> <span class="string">variables*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">the</span> <span class="string">following</span> <span class="string">setting</span> <span class="string">starts</span> <span class="string">chaincode</span> <span class="string">containers</span> <span class="string">on</span> <span class="string">the</span> <span class="string">same*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">bridge</span> <span class="string">network</span> <span class="string">as</span> <span class="string">the</span> <span class="string">peers*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">https://docs.docker.com/compose/networking/*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=_test</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG*</span></span><br></pre></td></tr></table></figure><p>如要修改<code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code>为<code>docker_test</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入容器</span></span><br><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改环境变量</span></span><br><span class="line">echo "export CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test" &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新启动容器即可</span></span><br></pre></td></tr></table></figure><h3 id="查看docker启动的网络">查看docker启动的网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="docker-compose命令">docker-compose命令</h2><h3 id="使用docker-compose启动docker镜像">使用docker-compose启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --f 指定文件, -d指定后台运行</span></span><br><span class="line">docker-compose --f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker命令&quot;&gt;docker命令&lt;/h2&gt;
&lt;h3 id=&quot;删除本地所有没有被使用的卷：&quot;&gt;删除本地所有没有被使用的卷：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="工具" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Docker" scheme="https://guozhe001.github.io/categories/%E5%B7%A5%E5%85%B7/Docker/"/>
    
    
    <category term="Docker" scheme="https://guozhe001.github.io/tags/Docker/"/>
    
    <category term="docker-compose" scheme="https://guozhe001.github.io/tags/docker-compose/"/>
    
  </entry>
  
</feed>
