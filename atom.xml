<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滴水成涓</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://guozhe001.github.io/atom.xml" rel="self"/>
  
  <link href="https://guozhe001.github.io/"/>
  <updated>2020-12-30T09:41:20.284Z</updated>
  <id>https://guozhe001.github.io/</id>
  
  <author>
    <name>guozhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/部署智能合约到channel</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/</id>
    <published>2020-12-30T09:29:55.658Z</published>
    <updated>2020-12-30T09:41:20.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署新的智能合约到channel">部署新的智能合约到channel</h1><h2 id="部署V1版本">部署V1版本</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>supply.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:12:37.540 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:"\nKsupply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a\022\nsupply_1.0" &gt;</span><br><span class="line">2020-12-28 17:12:37.542 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br><span class="line">Package ID: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a, Label: supply_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:07.090 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5c192d72135019a4bd6d444231fc95d41b6c7391cbc80a98cb67618f5e7a85c6] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8051</span><br><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["100", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:&lt;status:200 &gt; payload:"\n \266\367\033\202\030f\357\010\266zg\350\237\212\313 \342B\2041\316\351&gt;H\037\035\312\274J\021i\220\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n'\n!namespaces/fields/supply/Sequence\022\002\010\t\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\"ID\":\"1\",\"issuer\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"owner\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"amount\":100,\"createDate\":\"2020-12-28T09:24:44.871052163Z\",\"endDate\":\"2021-06-28T09:24:44.871052228Z\",\"contractHash\":\"test\",\"invoiceHash\":\"test\"&#125;\032\003\010\310\001\"\r\022\006supply\032\0031.0" endorsement:&lt;endorser:"\n\013GylFOrg1MSP\022\212\006-----BEGIN CERTIFICATE-----\nMIICETCCAbegAwIBAgIRAKxyUt8FsMI4LRaMcjh08ZgwCgYIKoZIzj0EAwIwbTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFjAUBgNVBAoTDWYxLnN1cHBseS5jb20xGTAXBgNVBAMTEGNhLmYx\nLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBYMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEcMBoGA1UEAxMTcGVlcjAuZjEuc3VwcGx5LmNvbTBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABIChG5EnW6enlGqH2F9EiWYbilBwfA+KgqqxnN56njS5\ngv368PElfoafV6jCrjA+p2OnbTI3gO2/RAwr2WBLB0+jTTBLMA4GA1UdDwEB/wQE\nAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIHNOBiXoFslrjdFMBMzU7pNe\nI5pmxxrQGrWTdgfI0cetMAoGCCqGSM49BAMCA0gAMEUCIQDEOKc114LvsauKzrMR\n7k6ipg0HPM1+W8JJt06Jeqd1vwIgBre+xg2g/rS7F5oZaJpECUf7ALV0fy9/Dhw0\nYDB3H+g=\n-----END CERTIFICATE-----\n" signature:"0D\002 9\020\212\014\220\302Ao_\226n`o\005\354B\263\316\346\330\347\010\217\205^X\"\267d\320U\365\002 \t&lt;\024e\324\312X\036\346=\025.I*A\311\223\013\301\276\320\232\366\246tZm\341g\223\235|" &gt;</span><br></pre></td></tr></table></figure><p>原因应该是代码中使用了Now（）来创建当前时间，两个peer的当前时间可能会有一点误差导致了校验不通过。</p><p>**解决方案：**使用<code>ctx.GetStub().GetTxTimestamp()</code>来获取时间，这样所有的节点创建的时间都是一致的，详见<a href="https://stackoverflow.com/questions/55289283/hyperledger-fabric-error-could-not-assemble-transaction-proposalresponsepaylo/61727958" target="_blank" rel="noopener">参考文档</a></p><h2 id="更新智能合约">更新智能合约</h2><h3 id="打包-v2">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label supply_1.0</span></span><br></pre></td></tr></table></figure><p>打包本地的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.5.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_5.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v2">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v3">批准链码定义</h3><h4 id="查看已经安装的chaincode-v2">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_5.0:0006888ea72e1b318238518b719382d440ab72f2d2c45b22e674f4828b7f7f9c</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v4">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --package-id $CC_PACKAGE_ID --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v2">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v2">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset001", "100", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 18:37:54.285 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: proposal response was not successful, error code 500, msg Incorrect number of params. Expected 2, received 1 - proposal response: version:1 response:&lt;status:200 &gt; payload:"\n \177\017\350[\344G6\010V\331\332\377\354\216&amp;\035\317&amp;\251[N`\023\036\033\237\237A\005\3670\260\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n'\n!namespaces/fields/supply/Sequence\022\002\010\016\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\"ID\":\"1\",\"issuer\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"owner\":\"\346\240\270\345\277\203\344\274\201\344\270\232\",\"amount\":100,\"createDate\":\"2020-12-28T10:02:30.578872398Z\",\"endDate\":\"2021-06-28T10:02:30.578872527Z\",\"contractHash\":\"test\",\"invoiceHash\":\"test\"&#125;\032\003\010\310\001\"\r\022\006supply\032\0033.0" endorsement:&lt;endorser:"\n\016GylCoreOrg1MSP\022\222\006-----BEGIN CERTIFICATE-----\nMIICFjCCAbygAwIBAgIQU43L5gjtXO+uCpRP2jG2AjAKBggqhkjOPQQDAjBxMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEYMBYGA1UEChMPY29yZS5zdXBwbHkuY29tMRswGQYDVQQDExJjYS5j\nb3JlLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBa\nMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2Fu\nIEZyYW5jaXNjbzEeMBwGA1UEAxMVcGVlcjAuY29yZS5zdXBwbHkuY29tMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAErf3R+7XpNQpmTsMO+iM4WS7IrOoafiPbAS7Q\nbuFFR3Qs4riIczgSmjh9rOA6I1q2q0CstLhfWDbqpf+8fXPUlKNNMEswDgYDVR0P\nAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAguznqsTisa64dNvOR\nvPwP0KGklWohNpbSe7VgIghx4L8wCgYIKoZIzj0EAwIDSAAwRQIhALIw1VMzezCg\n9LONbO4+V+weY42HQLbShkTP/gCFnGRYAiARyLLSDJIC2wwzSvOHNdm+aDRtbqGC\nNJenP9hmEbYsTw==\n-----END CERTIFICATE-----\n" signature:"0E\002!\000\251\370K6S\020\373\242\321\000\211\312\0001\333\365&gt;\314\324\231\020&gt;u;+\243\303dD\023\221\237\002 z \224\236R\355Z\251\202\363\035\304\365\212\277\235\375?\376\030\371\236\220\354iG6\244\334M\315\331" &gt;</span><br></pre></td></tr></table></figure><p>原因是因为下图，只有一个组织的链码更新到了最新的版本。</p><p>![截屏2020-12-28 18.03.06](/Users/apple/Desktop/截屏2020-12-28 18.03.06.png)</p><p>**解决方案：**原因是因为设置环境变量<code>CC_PACKAGE_ID</code>时只设置了一个组织的peer，导致旧的环境变量还在生效，重新操作一遍问题解决。</p><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"核心企业","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"核心企业","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法">调用交易方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset001", "一级供应商"]&#125;'</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"一级供应商","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;"ID":"asset001","issuer":"核心企业","owner":"一级供应商","amount":100,"createDate":"2020-12-28T10:37:54.271518Z","endDate":"2021-06-28T10:37:54.271518Z","contractHash":"test","invoiceHash":"test"&#125;]</span><br></pre></td></tr></table></figure><p>交易之后owner变成了一级供应商，没有问题。</p><h2 id="问题记录：">问题记录：</h2><p>虽然智能合约的代码编写方式如下，但是第二行的<code>TransferAsset</code>并没有执行，可能是因为第一个创建交易（CreateAsset）还没有成功，所以第二个交易（TransferAsset）没有这个资产所以没有执行？待确认</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">s.CreateAsset(ctx, assetID, amount)</span><br><span class="line">s.TransferAsset(ctx, assetID, owner)</span><br></pre></td></tr></table></figure><h2 id="部署v6版本的supply">部署v6版本的supply</h2><h3 id="v6版本智能合约源码如下：">v6版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">asset, err := s.createAsset(ctx, assetID, amount, <span class="string">"核心企业"</span>, <span class="string">"核心企业"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: <span class="string">"test"</span>, InvoiceHash: <span class="string">"test"</span>&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">newAsset, err := s.createAsset(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = s.PutState(ctx, newAsset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line">err = fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v3">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.6.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_6.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v3">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v5">批准链码定义</h3><h4 id="查看已经安装的chaincode-v3">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_6.0:18a7379ed3b12a57961a735880a71bea3dd242c741fa0970f779b5a338f848de</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v6">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --package-id $CC_PACKAGE_ID --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v3">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'supply' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v3">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset002", "1000"]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 10:59:48.513 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"the asset asset001 already exists"</span><br></pre></td></tr></table></figure><p>**解决方案：**原因是以内资产ID为asset001的资产已经存在，修改资产ID参数即可。</p><h4 id="查询调用后的结果-v2">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset002"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法-v2">调用交易方法</h3><p>把凭证资产拆分一部分（200）给一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset002", "一级供应商", "200"]&#125;'</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset001",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "一级供应商",</span><br><span class="line">    "amount": 100,</span><br><span class="line">    "createDate": "2020-12-28T10:37:54.271518Z",</span><br><span class="line">    "endDate": "2021-06-28T10:37:54.271518Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset002",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "核心企业",</span><br><span class="line">    "amount": 800,</span><br><span class="line">    "createDate": "2020-12-29T02:59:48.495257Z",</span><br><span class="line">    "endDate": "2021-06-29T02:59:48.495257Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    "ID": "asset0021",</span><br><span class="line">    "issuer": "核心企业",</span><br><span class="line">    "owner": "一级供应商",</span><br><span class="line">    "amount": 200,</span><br><span class="line">    "createDate": "2020-12-29T03:02:49.495789Z",</span><br><span class="line">    "endDate": "2021-06-29T03:02:49.495789Z",</span><br><span class="line">    "contractHash": "test",</span><br><span class="line">    "invoiceHash": "test"</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>交易之后，核心企业剩余800的凭证，一级供应商获得一个新的凭证。验证无误。</p><h2 id="部署v7版本的supply">部署v7版本的supply</h2><h3 id="v7版本智能合约源码如下：">v7版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">"核心企业"</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v4">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v4">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v7">批准链码定义</h3><h4 id="查看已经安装的chaincode-v4">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v8">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v4">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v4">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 CORE_AND_F1_CONTRACT.txt &gt; core_and_f1_contract_hash.txt</span><br><span class="line">shasum -a 256 CORE_AND_F1_INVOICE.txt &gt; CORE_AND_F1_INVOICE_hash.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果-v3">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-28T10:37:54.271518Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset002"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T02:59:48.495257Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0021"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T03:02:49.495789Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T03:02:49.495789Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T06:20:30.868298Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T06:20:30.868298Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>ID为asset003的资产归属为一级供应商，金额无误。</p><h2 id="创建一级供应商与二级供应商之间的channel">创建一级供应商与二级供应商之间的channel</h2><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>firstandsecondchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile FirstAndSecondChannel -outputCreateChannelTx ./channel-artifacts/firstandsecondchannel.tx -channelID firstandsecondchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:27:37.416 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-29 14:27:37.436 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以一级供应商管理员身份操作<code>peer</code>CLI，使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel -f ./channel-artifacts/firstandsecondchannel.tx --outputBlock ./channel-artifacts/firstandsecondchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: got unexpected status: BAD_REQUEST -- error validating channel creation transaction for new channel 'firstandsecondchannel', could not successfully apply update to template configuration: error authorizing update: error validating DeltaSet: policy for [Group]  /Channel/Application not satisfied: implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 1 of the 'Admins' sub-policies to be satisfied</span><br></pre></td></tr></table></figure><p><strong>错误原因和解决方案：</strong></p><p>由于配置文件里面配置的firstandsecondchannel里面包含一级供应商和两个二级供应商，而上面的命令是以核心企业的管理员身份运行的。所以有问题。切换成一级供应商的环境执行即可。</p><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:34:06.203 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.231 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-29 14:34:06.244 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.450 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.458 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.667 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.676 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.885 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.892 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.099 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:07.108 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.320 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><h2 id="把一级供应商和二级供应商的peer加入通道">把一级供应商和二级供应商的peer加入通道</h2><h3 id="一级供应商的peer加入通道">一级供应商的peer加入通道</h3><p>使用下面的命令将peer加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:00.679 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:35:00.724 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c firstandsecondchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:28.593 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434="&#125;</span><br></pre></td></tr></table></figure><h3 id="二级供应商1加入通道">二级供应商1加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:47:03.684 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:47:03.722 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supply-finance apple$ peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-29 14:43:56.186 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: proposal failed (err: rpc error: code = Unknown desc = error validating proposal: access denied: channel [] creator org [GylSOrg1M])</span><br></pre></td></tr></table></figure><p>**错误原因：**由于环境变量设置的有问题，<code>CORE_PEER_LOCALMSPID</code>设置成了<code>GylSOrg1M</code>，应该设置为<code>GylSOrg1MSP</code></p><h3 id="二级供应商2加入通道">二级供应商2加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:52:12.969 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:52:13.010 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:55:57.114 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:55:57.120 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-29 14:55:57.120 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-29 14:55:57.125 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:57:48.872 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:57:48.894 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-peer-channel-getinfo-c-firstandsecondchannel">验证，获取通道信息:<code>peer channel getinfo -c firstandsecondchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:58:15.937 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":2,"currentBlockHash":"4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=","previousBlockHash":"270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商1（GylSOrg1MSP）设置锚节点">为二级供应商1（GylSOrg1MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s1.supply.com","port": 8055&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:01:14.643 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:01:14.670 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:01:26.952 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=","previousBlockHash":"4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商2（GylSOrg2MSP）设置锚节点">为二级供应商2（GylSOrg2MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v3">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s2.supply.com","port": 8151&#125;]&#125;,"version": "0"&#125;&#125;' firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v3">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"firstandsecondchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat firstandsecondchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v3">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:03:39.793 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:03:39.817 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v2">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:04:10.414 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":4,"currentBlockHash":"PWXXje7tci4mk1ggQ9QMVzkvkP3i+N8WslOGDXreIQ0=","previousBlockHash":"DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE="&#125;</span><br></pre></td></tr></table></figure><h2 id="部署supply-v7到二级供应商的peer节点">部署supply-v7到二级供应商的peer节点</h2><h3 id="打包-v5">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v5">安装链码包</h3><p>两个二级供应商都要安装：<br>二级供应商1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>二级供应商2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v9">批准链码定义</h3><h4 id="查看已经安装的chaincode-v5">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v10">批准链码定义</h4><p>一级供应商和两个二级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v5">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID firstandsecondchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">Error: proposal failed with status: 500 - channel 'firstandsecondchannel' not found</span><br></pre></td></tr></table></figure><p>**错误原因：**由于批准的组织中包含核心企业，核心企业并没有加入<code>firstandsecondchannel</code>通道，所以报错。</p><h3 id="调用链码-v5">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><p>调用转账交易：TODO 问题来了，两个channel之间如何交换资产？这是个问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -C firstandsecondchannel -n supply --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C firstandsecondchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><h3 id="创建通道：-v2">创建通道：</h3><p>运行下面的程序来为<code>alljoinchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile AllPlayChannel -outputCreateChannelTx ./channel-artifacts/alljoinchannel.tx -channelID alljoinchannel</span><br></pre></td></tr></table></figure><p>设置环境变量，以一级供应商管理员身份操作<code>peer</code>CLI，使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel -f ./channel-artifacts/alljoinchannel.tx --outputBlock ./channel-artifacts/alljoinchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h2 id="加入通道">加入通道</h2><p>使用下面的命令将peer加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/alljoinchannel.block</span><br></pre></td></tr></table></figure><p>通过获取通道信息确认加入成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="设置锚节点-v2">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点-v2">为GylFOrg1MSP设置锚节点</h4><h5 id="拉取最新的channel配置区块-v2">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v4">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v4">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v4">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v3">验证，获取通道信息:</h5><p><code>peer channel getinfo -c alljoinchannel</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:58:15.937 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":2,"currentBlockHash":"4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=","previousBlockHash":"270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商1（GylSOrg1MSP）设置锚节点-v2">为二级供应商1（GylSOrg1MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v5">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s1.supply.com","port": 8055&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v5">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v5">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v4">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c alljoinchannel</span><br><span class="line">2020-12-29 17:53:43.321 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"f4Kjeh92KetKyGDxHP7iWggg8q2yqgtN1Bqp/GPLKb0=","previousBlockHash":"u3wb+X2daPlEeaIrktyguAv46jnwdr0HYW6E3acEpXc="&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商2（GylSOrg2MSP）设置锚节点-v2">为二级供应商2（GylSOrg2MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v6">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.s2.supply.com","port": 8151&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v6">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v6">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v5">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c alljoinchannel</span><br><span class="line">2020-12-29 17:54:47.186 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":4,"currentBlockHash":"SGebZzoqoSS16y1Nq83k5VGzXrV/cFjjRXGcCSalAj4=","previousBlockHash":"f4Kjeh92KetKyGDxHP7iWggg8q2yqgtN1Bqp/GPLKb0="&#125;</span><br></pre></td></tr></table></figure><h4 id="为核心企业GylCoreOrg1MSP设置锚节点">为核心企业GylCoreOrg1MSP设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v7">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.core.supply.com","port": 8051&#125;]&#125;,"version": "0"&#125;&#125;' alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v7">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"alljoinchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat alljoinchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v7">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v6">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c alljoinchannel</span><br><span class="line">2020-12-29 17:59:30.313 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":5,"currentBlockHash":"3GPw4KdjlTCtDgXxi2C7jvMUQ8fm5OLJSyuPtoK7Qik=","previousBlockHash":"SGebZzoqoSS16y1Nq83k5VGzXrV/cFjjRXGcCSalAj4="&#125;</span><br></pre></td></tr></table></figure><h2 id="部署supply-v7到alljoinchannel通道">部署supply-v7到alljoinchannel通道</h2><h3 id="打包-v6">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span></span><br></pre></td></tr></table></figure><h3 id="安装链码包-v6">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.7.tar.gz</code></p><h3 id="批准链码定义-v11">批准链码定义</h3><h4 id="查看已经安装的chaincode-v6">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v12">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v6">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v6">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v2">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset003", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset003", "二级供应商1", "500", "76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v2">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0031"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset003", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"the asset asset0031 already exists"</span><br></pre></td></tr></table></figure><p>原因如下：如果同一个资产ID交易两次，则会出现资产ID重复的问题；代码bug。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">"1"</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v2">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset0031", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p>查询资产，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset003"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:07:43.665003Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0031"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:12:37.227293Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset00311"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-29T10:17:26.148125Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-29T10:17:26.148125Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="部署supply-v8到alljoinchannel通道">部署supply-v8到alljoinchannel通道</h2><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">"核心企业"</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="keyword">if</span> newID == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额小于资产的金额时，newID必须不能为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v7">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.8.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_8.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v7">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.8.tar.gz</code></p><h3 id="批准链码定义-v13">批准链码定义</h3><h4 id="查看已经安装的chaincode-v7">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_8.0:797ec1d00145482b746640d0b8bb9bea64cb69dea3e95abb69a1195a19e34511</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v14">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --package-id $CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v7">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v7">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v3">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset001", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v3">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易-v2">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0011", "二级供应商1", "500", "76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v4">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v3">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0012", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转账金额大于凭证资产的金额-期待错误">转账金额大于凭证资产的金额(期待错误)</h3><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0013", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"\350\275\254\350\264\246\351\207\221\351\242\235=300,\344\270\215\350\203\275\350\266\205\350\277\207\350\265\204\344\272\247\347\232\204\351\207\221\351\242\235=200"</span><br></pre></td></tr></table></figure><p>错误信息解码如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201230151742496-20201230173424532.png" alt></p><h3 id="转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）">转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）</h3><p>一级供应商把剩余的200转给二级供应商2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;supply.com&#x2F;orderers&#x2F;orderer.supply.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;f1.supply.com&#x2F;peers&#x2F;peer0.f1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s1.supply.com&#x2F;peers&#x2F;peer0.s1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s2.supply.com&#x2F;peers&#x2F;peer0.s2.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;core.supply.com&#x2F;peers&#x2F;peer0.core.supply.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;200&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>没有产生新的资产，而是把原来的资产的拥有者变更了。</p><p><em>注意：这样有个问题，合同hash和发票hash不应该还是原来的。</em></p><h2 id="部署supply-v9到alljoinchannel通道">部署supply-v9到alljoinchannel通道</h2><h3 id="源码-v2">源码</h3><p>与v8版本相比，增加删除资产的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetIds ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, assetID := <span class="keyword">range</span> assetIds &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v8">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v8">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.tar.gz</code></p><h3 id="批准链码定义-v15">批准链码定义</h3><h4 id="查看已经安装的chaincode-v8">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.0:fbe0d3c75d2cc9d84c44f11d526047bb88ec7e2b961d59b83352d502da5f907a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v16">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --package-id $CC_PACKAGE_ID --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v8">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v8">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产">删除资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"Error managing parameter param0. Conversion error. Value asset001 asset0011 asset0012 asset003 asset0031 asset00311 was not passed in expected format []string"</span><br></pre></td></tr></table></figure><p>**错误原因：**因为方法使用的是可变长参数，但是不知道该怎么给他传参数</p><h2 id="部署supply-v9-1到alljoinchannel通道">部署supply-v9.1到alljoinchannel通道</h2><h3 id="源码-v3">源码</h3><p>与v9版本相比，修改删除资产的方法为删除单个资产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v9">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.1.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.1</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v9">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.1.tar.gz</code></p><h3 id="批准链码定义-v17">批准链码定义</h3><h4 id="查看已经安装的chaincode-v9">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.1:f733e8484c17cb415e38ac1fb14ed646622f2980762906c97d6e7e1c1a90f2c3</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v18">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --package-id $CC_PACKAGE_ID --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v9">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v9">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产-v2">删除资产</h4><p>资产ID列表：“asset001 asset0011 asset0012 asset003 asset0031 asset00311”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset00311"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="删除之后查询：">删除之后查询：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>返回的资产列表为空，删除方法验证成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;部署新的智能合约到channel&quot;&gt;部署新的智能合约到channel&lt;/h1&gt;
&lt;h2 id=&quot;部署V1版本&quot;&gt;部署V1版本&lt;/h2&gt;
&lt;h3 id=&quot;打包&quot;&gt;打包&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/开发智能合约</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</id>
    <published>2020-12-30T09:20:58.418Z</published>
    <updated>2020-12-30T10:04:07.016Z</updated>
    
    <content type="html"><![CDATA[<p>本次的智能合约从<a href="https://github.com/hyperledger/fabric-samples.git" target="_blank" rel="noopener">fabric-samples</a>的<code>asset-transfer-basic/chaincode-go</code>拷贝然后进行了修改。</p><p>智能合约代码<code>smartcontract.go</code>如下：本文档更新不及时，可到<a href="https://github.com/guozhe001/supply-finance.git" target="_blank" rel="noopener">源码地址</a>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">package chaincode</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">"encoding/json"</span><br><span class="line">"fmt"</span><br><span class="line">"time"</span><br><span class="line"></span><br><span class="line">"github.com/golang/protobuf/ptypes"</span><br><span class="line">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// SmartContract provides functions for managing an Asset</span><br><span class="line">type SmartContract struct &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Asset describes basic details of what makes up a simple asset</span><br><span class="line">type Asset struct &#123;</span><br><span class="line">ID           string    `json:"ID"`</span><br><span class="line">Issuer       string    `json:"issuer"`</span><br><span class="line">Owner        string    `json:"owner"`</span><br><span class="line">Amount       int64     `json:"amount"`</span><br><span class="line">CreateDate   time.Time `json:"createDate"`</span><br><span class="line">EndDate      time.Time `json:"endDate"`</span><br><span class="line">ContractHash string    `json:"contractHash"`</span><br><span class="line">InvoiceHash  string    `json:"invoiceHash"`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// IssueVoucher 发行凭证</span><br><span class="line">func (s *SmartContract) IssueVoucher(ctx contractapi.TransactionContextInterface, assetID string, amount int64, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 创建资产</span><br><span class="line">return s.CreateAssetAndSave(ctx, assetID, amount, "核心企业", owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CreateAssetAndSave 创建资产并保存</span><br><span class="line">func (s *SmartContract) CreateAssetAndSave(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// createAsset issues a new asset to the world state with given details.</span><br><span class="line">func (s *SmartContract) createAsset(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) (*Asset, error) &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">if exists &#123;</span><br><span class="line">return nil, fmt.Errorf("the asset %s already exists", id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(0, 6, 0), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取当前时间</span><br><span class="line">func getNow(ctx contractapi.TransactionContextInterface) (time.Time, error) &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line">return ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReadAsset returns the asset stored in the world state with given id.</span><br><span class="line">func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, fmt.Errorf("failed to read from world state: %v", err)</span><br><span class="line">&#125;</span><br><span class="line">if assetJSON == nil &#123;</span><br><span class="line">return nil, fmt.Errorf("the asset %s does not exist", id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AssetExists returns true when asset with given ID exists in world state</span><br><span class="line">func (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return false, fmt.Errorf("failed to read from world state: %v", err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assetJSON != nil, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAssetByID 根据资产ID转账</span><br><span class="line">func (s *SmartContract) TransferAssetByID(ctx contractapi.TransactionContextInterface, id string, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAsset updates the owner field of asset with given id in world state.</span><br><span class="line">func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, asset *Asset, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span><br><span class="line">if asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &gt; amount &#123; // 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span><br><span class="line">if newID == "" &#123;</span><br><span class="line">return fmt.Errorf("转账金额小于资产的金额时，newID必须不能为空")</span><br><span class="line">&#125;</span><br><span class="line">// 创建新的资产并保存</span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">// 更新旧资产的金额</span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &lt; amount &#123; // 如果资产的额度小于要转账的金额，则直接报错</span><br><span class="line">return fmt.Errorf("转账金额=%d,不能超过资产的金额=%d", amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PutState 更新资产</span><br><span class="line">func (s *SmartContract) PutState(ctx contractapi.TransactionContextInterface, asset *Asset) error &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DelState 删除资产</span><br><span class="line">func (s *SmartContract) DelState(ctx contractapi.TransactionContextInterface, assetID string) error &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">if !exists &#123;</span><br><span class="line">return fmt.Errorf("assetID=%s的资产不存在", assetID)</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// GetAllAssets returns all assets found in world state</span><br><span class="line">func (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;</span><br><span class="line">// range query with empty string for startKey and endKey does an</span><br><span class="line">// open-ended query of all assets in the chaincode namespace.</span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange("", "")</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">defer resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">var assets []*Asset</span><br><span class="line">for resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">assets = append(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assets, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次的智能合约从&lt;a href=&quot;https://github.com/hyperledger/fabric-samples.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fabric-samples&lt;/a&gt;的&lt;code&gt;asset-transfe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/创建channel</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/</id>
    <published>2020-12-30T09:18:28.198Z</published>
    <updated>2020-12-30T09:21:57.597Z</updated>
    
    <content type="html"><![CDATA[<p>通过供应链金融练习Fabric-创建channel</p><h2 id="2-创建Channel">2. 创建Channel</h2><p>参考：<a href="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel.md">创建一个新的channel</a></p><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>coreandfirstchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile CoreAndFirstChannel -outputCreateChannelTx ./channel-artifacts/coreandfirstchannel.tx -channelID coreandfirstchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 14:29:40.728 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/configtx/configtx.yaml</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-24 14:29:40.750 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以核心企业(<a href="http://core.supply.com" target="_blank" rel="noopener">core.supply.com</a>)管理员身份操作<code>peer</code>CLI;然后使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:59:28.470 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.490 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-24 15:59:28.497 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.701 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.708 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.917 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.924 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.134 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.141 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.349 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.357 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.566 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p><strong>报错信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel create -o localhost:8051  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line">2020-12-24 15:56:56.602 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 5.225381ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:57.611 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 3.907471ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:59.315 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.52302ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">Error: failed to create deliver client for orderer: orderer client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>peer channel create -o localhost:8051 </code>命令<code>-o</code>应该传入order服务的地址和端口。</p><h2 id="把核心企业和一级供应商的peer加入通道">把核心企业和一级供应商的peer加入通道</h2><h3 id="核心企业的peer加入通道">核心企业的peer加入通道</h3><p>使用下面的命令将核心企业的peer加入通道（确认已经设置了核心企业的环境变量）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:46:40.206 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 16:46:40.235 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息记录:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 16:18:23.258 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.895228ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:24.266 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 4.537447ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:25.659 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.16728ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>**错误原因：**未知。</p><p>**解决方式：**把Profiles里面的Organizations信息统一修改，与环境变量保持一致</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylCoreOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylFOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg2MSP</span></span><br></pre></td></tr></table></figure><p>然后把上面步骤中生成的加密材料信息、区块信息都删除，容器和volume全部删除；重新执行一遍。</p><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c coreandfirstchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:53:01.633 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c="&#125;</span><br></pre></td></tr></table></figure><h3 id="一级供应商加入通道">一级供应商加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:06:30.499 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:06:30.527 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 17:01:05.904 CST [main] InitCmd -&gt; ERRO 001 Cannot run peer because cannot init crypto, specified path "/Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp" does not exist or cannot be accessed: stat /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp: no such file or directory</span><br></pre></td></tr></table></figure><p>**错误原因：**因为在设置环境变量时不是在<code>supply-finance</code>目录下设置的，所以设置的环境变量有问题，重新设置一下。</p><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><p>因为上面已经设置了一级供应商（GylFOrg1MSP）的环境变量，所以先设置GylFOrg1MSP的锚节点：</p><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:56:48.435 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:56:48.439 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-24 17:56:48.439 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-24 17:56:48.442 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.f1.supply.com","port": 8053&#125;]&#125;,"version": "0"&#125;&#125;' coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"coreandfirstchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat coreandfirstchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:12:49.469 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel 'coreandfirstchannel': error authorizing update: ConfigUpdate for channel 'channel1' but envelope for channel 'coreandfirstchannel'</span><br></pre></td></tr></table></figure><p>**错误原因：**在修改配置的时候指定channel名称错误，修正重新执行一遍。</p><h5 id="验证，获取通道信息-peer-channel-getinfo-c-coreandfirstchannel">验证，获取通道信息:<code>peer channel getinfo -c coreandfirstchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">supply-finance$</span><span class="bash">     peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:19:31.275 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":2,"currentBlockHash":"h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=","previousBlockHash":"kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c="&#125;</span><br></pre></td></tr></table></figure><h4 id="为核心企业GylCoreOrg1MSP设置锚节点">为核心企业GylCoreOrg1MSP设置锚节点</h4><p>修改环境变量，然后拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.core.supply.com","port": 8051&#125;]&#125;,"version": "0"&#125;&#125;' coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"coreandfirstchannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat coreandfirstchannel_config_update.json)'&#125;&#125;&#125;' | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:24:51.015 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"e52oT2HAiTxyeh4a30kTx32xLJAKIWa7rm6PVOn8eoA=","previousBlockHash":"h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk="&#125;</span><br></pre></td></tr></table></figure><h2 id="部署测试chaincode来确认">部署测试chaincode来确认</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>basic.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:"\nJbasic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad\022\tbasic_1.0" &gt;</span><br><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:02:47.351 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [d7e2224f63a1516ffeeed26ec5c8f69872141f5864b3602a1409679472692840] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"approvals"</span>: &#123;</span><br><span class="line"><span class="attr">"GylCoreOrg1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"GylFOrg1MSP"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:10:18.071 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-24 19:10:18.094 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'basic' on channel 'coreandfirstchannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n basic --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c '&#123;"function":"InitLedger","Args":[]&#125;'</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n basic -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>成功结果如下,说明channel部署成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;,&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;,&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;,&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;,&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;,&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;]</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:"error in simulation: failed to execute transaction 207cf99d289ffe9deca6a320aba59cc155fae02d19d51c9cfebc9943ffc7794d: could not launch chaincode basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad: error starting container: error starting container: API error (404): network _test not found"</span><br></pre></td></tr></table></figure><p>**错误原因：**因为chaincode的容器没有启动成功,直接指定容器启动报错如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201224192439225.png" alt="image-20201224192439225"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/supply-finance$</span><span class="bash">     docker start bc47970e58a5</span></span><br><span class="line">Error response from daemon: network _test not found</span><br><span class="line">Error: failed to start containers: bc47970e58a5</span><br></pre></td></tr></table></figure><p><strong>问题解决：</strong></p><p>因为在<code>docker-compose.yml</code>文件中配置了下面的环境变量，在启动chaincode容器时会链接到这个网络。</p><p>之前的配置是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_test</span><br></pre></td></tr></table></figure><p>修改后重新启动，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;docker_test</span><br></pre></td></tr></table></figure><p>为什么修改成docker_test呢，可以查看使用<code>docker-compose</code>命令启动容器时的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating network "docker_test" with the default driver</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过供应链金融练习Fabric-创建channel&lt;/p&gt;
&lt;h2 id=&quot;2-创建Channel&quot;&gt;2. 创建Channel&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/创建网络</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2020-12-30T09:11:32.892Z</published>
    <updated>2020-12-30T09:16:53.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过供应链金融练习Fabric-创建网络">通过供应链金融练习Fabric-创建网络</h1><p>一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。</p><h2 id="生成加密材料">生成加密材料</h2><h3 id="创建配置文件">创建配置文件</h3><p>创建<code>supply-finance</code>文件夹，配置<code>config/crypto-config.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">supply.com</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_core_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">core.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_f_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">f1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s2.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="使用配置文件生成加密材料">使用配置文件生成加密材料</h3><p>使用下面的命令生成加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cryptogen generate --config=config/crypto-config.yaml --output="./organizations"</span><br></pre></td></tr></table></figure><h4 id="使用加密材料生成创世纪区块">使用加密材料生成创世纪区块</h4><p>使用下面的命令生成系统创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TestOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">esis.block</span><br><span class="line">2020-12-24 15:41:52.702 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:"500ms" election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Creating system channel genesis block</span><br><span class="line">2020-12-24 15:41:52.724 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br></pre></td></tr></table></figure><p><strong>遇到的错误信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:39:28.696 CST [common.tools.configtxgen] main -&gt; FATA 005 Error on outputBlock: could not create bootstrapper: could not create channel group: could not create orderer group: cannot marshal metadata for orderer type etcdraft: cannot load client cert for consenter orderer.supply.com:8050: open /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/cryptogen/crypto-config/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls/server.crt: no such file or directory</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>$FABRIC_CFG_PATH/configtx.yaml</code>配置的加密文件地址不正确</p><h2 id="启动网络">启动网络</h2><p>各个组织的加密材料生成之后，在本地docker环境启动这些组织的peer节点。</p><h3 id="配置docker-compose-yml文件">配置docker-compose.yml文件</h3><p>在<code>supply-finance</code>目录下添加<code>docker/docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=8050</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LEDGERTYPE=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../system-genesis-block/genesis.block:/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.supply.com:/var/hyperledger/production/orderer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8050</span><span class="string">:8050</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.core.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.core.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.core.supply.com:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylCoreOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.core.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8051</span><span class="string">:8051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.f1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.f1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.f1.supply.com:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylFOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.f1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8053</span><span class="string">:8053</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s1.supply.com:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8055</span><span class="string">:8055</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s2.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s2.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s2.supply.com:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s2.supply.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8151</span><span class="string">:8151</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="使用docker-compose-yml配置文件启动各组织的服务">使用docker-compose.yml配置文件启动各组织的服务</h3><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f ./docker/docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>启动之后会在docker启动下面这些容器：</p><ul><li><a href="http://orderer.supply.com" target="_blank" rel="noopener">orderer.supply.com</a>:排序节点</li><li><a href="http://peer0.core.supply.com" target="_blank" rel="noopener">peer0.core.supply.com</a>:核心企业节点</li><li><a href="http://peer0.f1.supply.com" target="_blank" rel="noopener">peer0.f1.supply.com</a>:一级供应商节点</li><li><a href="http://peer0.s1.supply.com" target="_blank" rel="noopener">peer0.s1.supply.com</a>:二级供应商1节点</li><li><a href="http://peer0.s2.supply.com" target="_blank" rel="noopener">peer0.s2.supply.com</a>:二级供应商2节点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过供应链金融练习Fabric-创建网络&quot;&gt;通过供应链金融练习Fabric-创建网络&lt;/h1&gt;
&lt;p&gt;一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。&lt;/p&gt;
&lt;h2 id=&quot;生成加密材料&quot;&gt;生成加密材</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/设置环境变量</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2020-12-30T03:22:45.662Z</published>
    <updated>2020-12-30T10:02:46.881Z</updated>
    
    <content type="html"><![CDATA[<p>以下所有的命令均在<code>supply-finance</code>目录下执行</p><h3 id="环境变量设置：">环境变量设置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/bin:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/config</span><br><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h3 id="核心企业GylCoreOrg1MSP：">核心企业GylCoreOrg1MSP：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylCoreOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/users/Admin@core.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8051</span><br></pre></td></tr></table></figure><h3 id="一级供应商GylFOrg1MSP：">一级供应商GylFOrg1MSP：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylFOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8053</span><br></pre></td></tr></table></figure><h3 id="二级供应商1GylSOrg1MSP：">二级供应商1GylSOrg1MSP：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylSOrg1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/users/Admin@s1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8055</span><br></pre></td></tr></table></figure><h3 id="二级供应商2GylSOrg2MSP：">二级供应商2GylSOrg2MSP：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="GylSOrg2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/users/Admin@s2.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8151</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下所有的命令均在&lt;code&gt;supply-finance&lt;/code&gt;目录下执行&lt;/p&gt;
&lt;h3 id=&quot;环境变量设置：&quot;&gt;环境变量设置：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/通过供应链金融练习Fabric-部署v8版本chaincode</title>
    <link href="https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric-%E9%83%A8%E7%BD%B2v8%E7%89%88%E6%9C%ACchaincode/"/>
    <id>https://guozhe001.github.io/2020/12/30/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric-%E9%83%A8%E7%BD%B2v8%E7%89%88%E6%9C%ACchaincode/</id>
    <published>2020-12-30T03:18:13.354Z</published>
    <updated>2020-12-30T08:05:50.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署supply-v8到alljoinchannel通道">部署supply-v8到alljoinchannel通道</h2><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/protobuf/ptypes"</span></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:"ID"`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:"issuer"`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:"owner"`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:"amount"`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:"createDate"`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:"endDate"`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:"contractHash"`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:"invoiceHash"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">"核心企业"</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"the asset %s does not exist"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"failed to read from world state: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="keyword">if</span> newID == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额小于资产的金额时，newID必须不能为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"转账金额=%d,不能超过资产的金额=%d"</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.8.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_8.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.8.tar.gz</code></p><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_8.0:797ec1d00145482b746640d0b8bb9bea64cb69dea3e95abb69a1195a19e34511</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --package-id $CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"IssueVoucher","Args":["asset001", "1000", "一级供应商", "93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14", "83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0011", "二级供应商1", "500", "76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a", "792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="查询资产-v2">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0012", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"一级供应商"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转账金额大于凭证资产的金额-期待错误">转账金额大于凭证资产的金额(期待错误)</h3><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"TransferAssetByID","Args":["asset001", "asset0013", "二级供应商2", "300", "f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb", "f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"\350\275\254\350\264\246\351\207\221\351\242\235=300,\344\270\215\350\203\275\350\266\205\350\277\207\350\265\204\344\272\247\347\232\204\351\207\221\351\242\235=200"</span><br></pre></td></tr></table></figure><p>错误信息解码如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201230151742496.png" alt></p><h3 id="转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）">转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）</h3><p>一级供应商把剩余的200转给二级供应商2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;supply.com&#x2F;orderers&#x2F;orderer.supply.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;f1.supply.com&#x2F;peers&#x2F;peer0.f1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s1.supply.com&#x2F;peers&#x2F;peer0.s1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s2.supply.com&#x2F;peers&#x2F;peer0.s2.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;core.supply.com&#x2F;peers&#x2F;peer0.core.supply.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;200&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '{&quot;Args&quot;:[&quot;GetAllAssets&quot;]}'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset001"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:06.963617Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0011"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商1"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:57:50.047189Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"ID"</span>: <span class="string">"asset0012"</span>,</span><br><span class="line">    <span class="attr">"issuer"</span>: <span class="string">"核心企业"</span>,</span><br><span class="line">    <span class="attr">"owner"</span>: <span class="string">"二级供应商2"</span>,</span><br><span class="line">    <span class="attr">"amount"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"createDate"</span>: <span class="string">"2020-12-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"endDate"</span>: <span class="string">"2021-06-30T06:58:33.143818Z"</span>,</span><br><span class="line">    <span class="attr">"contractHash"</span>: <span class="string">"f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb"</span>,</span><br><span class="line">    <span class="attr">"invoiceHash"</span>: <span class="string">"f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>没有产生新的资产，而是把原来的资产的拥有者变更了。</p><p><em>注意：这样有个问题，合同hash和发票hash不应该还是原来的。</em></p><h2 id="部署supply-v9到alljoinchannel通道">部署supply-v9到alljoinchannel通道</h2><h3 id="源码-v2">源码</h3><p>与v8版本相比，增加删除资产的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetIds ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, assetID := <span class="keyword">range</span> assetIds &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v2">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v2">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.tar.gz</code></p><h3 id="批准链码定义-v3">批准链码定义</h3><h4 id="查看已经安装的chaincode-v2">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.0:fbe0d3c75d2cc9d84c44f11d526047bb88ec7e2b961d59b83352d502da5f907a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v4">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --package-id $CC_PACKAGE_ID --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v2">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.0 --sequence 3 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v2">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产">删除资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset001 asset0011 asset0012 asset003 asset0031 asset00311"]&#125;'</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:"Error managing parameter param0. Conversion error. Value asset001 asset0011 asset0012 asset003 asset0031 asset00311 was not passed in expected format []string"</span><br></pre></td></tr></table></figure><p>**错误原因：**因为方法使用的是可变长参数，但是不知道该怎么给他传参数</p><h2 id="部署supply-v9-1到alljoinchannel通道">部署supply-v9.1到alljoinchannel通道</h2><h3 id="源码-v3">源码</h3><p>与v9版本相比，修改删除资产的方法为删除单个资产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"assetID=%s的资产不存在"</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v3">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.1.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.1</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v3">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.1.tar.gz</code></p><h3 id="批准链码定义-v5">批准链码定义</h3><h4 id="查看已经安装的chaincode-v3">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.1:f733e8484c17cb415e38ac1fb14ed646622f2980762906c97d6e7e1c1a90f2c3</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v6">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --package-id $CC_PACKAGE_ID --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v3">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v3">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产-v2">删除资产</h4><p>资产ID列表：“asset001 asset0011 asset0012 asset003 asset0031 asset00311”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c '&#123;"function":"DelState","Args":["asset00311"]&#125;'</span><br></pre></td></tr></table></figure><h4 id="删除之后查询：">删除之后查询：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>返回的资产列表为空，删除方法验证成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署supply-v8到alljoinchannel通道&quot;&gt;部署supply-v8到alljoinchannel通道&lt;/h2&gt;
&lt;h3 id=&quot;源码&quot;&gt;源码&lt;/h3&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>others/Linux Shell命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/25/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/25/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-25T03:38:24.105Z</published>
    <updated>2020-12-25T03:39:43.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Shell命令记录">Linux Shell命令记录</h1><h3 id="修改终端显示，不显示用户名和电脑名称">修改终端显示，不显示用户名和电脑名称</h3><p>修改<code>/etc/bashrc</code>：PS1='\w $ ’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/code/open-source/blockchain/hyperledger/supply-finance $ more /etc/bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> System-wide .bashrc file <span class="keyword">for</span> interactive bash(1) shells.</span></span><br><span class="line">if [ -z "$PS1" ]; then</span><br><span class="line">   return</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PS1=<span class="string">'\h:\W \u\$ '</span></span></span><br><span class="line">PS1='\w \$ '</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make bash check its window size after a process completes</span></span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line">[ -r "/etc/bashrc_$TERM_PROGRAM" ] &amp;&amp; . "/etc/bashrc_$TERM_PROGRAM"</span><br></pre></td></tr></table></figure><p>其他参数：</p><ul><li>\d ：代表日期，格式为weekday month date，例如：“Mon Aug 1”</li><li>\H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux</li><li>\h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略</li><li>\t ：显示时间为24小时格式，如：HH：MM：SS</li><li>\T ：显示时间为12小时格式\A ：显示时间为24小时格式：HH：MM</li><li>\u ：当前用户的账号名称\v ：BASH的版本信息</li><li>\w ：完整的工作目录名称。家目录会以 ~代替</li><li>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</li><li># ：下达的第几个命令</li><li>$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-Shell命令记录&quot;&gt;Linux Shell命令记录&lt;/h1&gt;
&lt;h3 id=&quot;修改终端显示，不显示用户名和电脑名称&quot;&gt;修改终端显示，不显示用户名和电脑名称&lt;/h3&gt;
&lt;p&gt;修改&lt;code&gt;/etc/bashrc&lt;/code&gt;：PS1=&#39;\w $ ’&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/添加一个新的组织到channel</title>
    <link href="https://guozhe001.github.io/2020/12/23/blockchain/fabric/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/"/>
    <id>https://guozhe001.github.io/2020/12/23/blockchain/fabric/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/</id>
    <published>2020-12-23T09:58:30.091Z</published>
    <updated>2020-12-24T04:01:21.674Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/channel_update_tutorial.html" target="_blank" rel="noopener">官方文档</a></p><h1 id="添加一个新的组织到channel">添加一个新的组织到channel</h1><p>This tutorial extends the Fabric test network by adding a new organization – Org3 – to an application channel.</p><p>本教程通过向应用程序通道添加新组织Org3扩展了Fabric测试网络。</p><p>While we will focus on adding a new organization to the channel, you can use a similar process to make other channel configuration updates (updating modification policies or altering batch size, for example). To learn more about the process and possibilities of channel config updates in general, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">Updating a channel configuration</a>). It’s also worth noting that channel configuration updates like the one demonstrated here will usually be the responsibility of an organization admin (rather than a chaincode or application developer).</p><p>我们将专注于向channel添加新组织，你可以使用相似的流程来进行其他情况的通道配置更新。略</p><h2 id="Setup-the-Environment（启动环境）">Setup the Environment（启动环境）</h2><p>启动测试环境并创建默认的channel，请参考：<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><h2 id="Bring-Org3-into-the-Channel-with-the-Script（使用脚本将Org3加入到通道）">Bring Org3 into the Channel with the Script（使用脚本将Org3加入到通道）</h2><p>You should be in the <code>test-network</code> directory. To use the script, simply issue the following commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh up</span><br></pre></td></tr></table></figure><p>The output here is well worth reading. You’ll see the Org3 crypto material being generated, the Org3 organization definition being created, and then the channel configuration being updated, signed, and then submitted to the channel.</p><p>这里的输出值的我们一读。你会看到生成Org3组织的加密材料，创建组织Org3的定义然后通道配置会被更新、签名并且提交到通道。</p><p>If everything goes well, you’ll get this message:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">========= Finished adding Org3 to your test network! =========</span><br></pre></td></tr></table></figure><p>Now that we have confirmed we can add Org3 to our channel, we can go through the steps to update the channel configuration that the script completed behind the scenes.</p><p>现在我们已经确认我们可以把组织Org3添加到我们的通道，我们可以按照以下步骤更新通道配置来完成脚本在幕后完成工作。</p><h2 id="Bring-Org3-into-the-Channel-Manually（手动将Org3加入通道）">Bring Org3 into the Channel Manually（手动将Org3加入通道）</h2><p>If you just used the <code>addOrg3.sh</code> script, you’ll need to bring your network down. The following command will bring down all running components and remove the crypto material for all organizations:</p><p>如果你刚才使用了 <code>addOrg3.sh</code>脚本，你需要先把网络关闭。下面的命令会关闭所有正在运行的组件并且移除所有组织的加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh down</span><br></pre></td></tr></table></figure><p>After the network is brought down, bring it back up again（网络关闭之后，重新启动它）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">./network.sh up createChannel</span><br></pre></td></tr></table></figure><p>This will bring your network back to the same state it was in before you executed the <code>addOrg3.sh</code> script.</p><p>这将使您的网络恢复到执行addOrg3.sh脚本之前的状态。</p><p>Now we’re ready to add Org3 to the channel manually. As a first step, we’ll need to generate Org3’s crypto material.</p><p>现在我们已经准备好手动的将Org3添加到通道中了，第一步，我们需要生成Org3的加密材料。</p><h2 id="Generate-the-Org3-Crypto-Material（生成Org3的加密材料）">Generate the Org3 Crypto Material（生成Org3的加密材料）</h2><p>In another terminal, change into the <code>addOrg3</code> subdirectory from <code>test-network</code>.</p><p>在另一个终端切换到 <code>test-network</code>目录的子目录 <code>addOrg3</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br></pre></td></tr></table></figure><p>First, we are going to create the certificates and keys for the Org3 peer, along with an application and admin user. Because we are updating an example channel, we are going to use the cryptogen tool instead of using a Certificate Authority. The following command uses cryptogen to read the <code>org3-crypto.yaml</code> file and generate the Org3 crypto material in a new <code>org3.example.com</code> folder:</p><p>首先，我们将为Org3组织的peer节点包括应用程序和管理员用户创建证书和密钥。因为我们正在更新示例通道，所以我们将使用<code>cryptogen</code>工具而不是使用证书颁发机构。 下面的命令使用<code>cryptogen</code>读取 <code>org3-crypto.yaml</code>文件然后在新的 <code>org3.example.com</code> 文件夹下面生成Org3的加密材料。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../bin/cryptogen generate --config=org3-crypto.yaml --output="../organizations"</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/channel_update_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/创建一个新的channel</title>
    <link href="https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/"/>
    <id>https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/</id>
    <published>2020-12-22T09:09:41.285Z</published>
    <updated>2020-12-24T10:47:29.918Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html" target="_blank" rel="noopener">官方文档</a></p><h1 id="创建一个新的channel">创建一个新的channel</h1><p>You can use this tutorial to learn how to create new channels using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a> CLI tool and then use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html" target="_blank" rel="noopener">peer channel</a> commands to join a channel with your peers. While this tutorial will leverage the Fabric test network to create the new channel, the steps in this tutorial can also be used by network operators in a production environment.</p><p>你可以通过这个教程来学习通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a>CLI工具来创建新的通道，然后通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html" target="_blank" rel="noopener">peer channel</a> 命令将peer节点加入通道。尽管本教程将利用Fabric测试网络来创建新渠道，网络操作人员也可以在生产环境中使用本教程中的步骤。</p><p>In the process of creating the channel, this tutorial will take you through the following steps and concepts:</p><p>在创建频道的过程中，本教程将带您完成以下步骤和概念：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#setting-up-the-configtxgen-tool" target="_blank" rel="noopener">Setting up the configtxgen tool</a>：设置configtxgen工具</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-configtx-yaml-file" target="_blank" rel="noopener">Using the configtx.yaml file</a>：使用configtx.yaml配置文件</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-orderer-system-channel" target="_blank" rel="noopener">The orderer system channel</a>：排序的系统通道介绍</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#creating-an-application-channel" target="_blank" rel="noopener">Creating an application channel</a>：创建一个应用通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#join-peers-to-the-channel" target="_blank" rel="noopener">Joining peers to the channel</a>：将peer节点加入通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#set-anchor-peers" target="_blank" rel="noopener">Setting anchor peers</a>：设置锚节点</li></ul><h3 id="Setting-up-the-configtxgen-tool（设置configtxgen工具）">Setting up the configtxgen tool（设置configtxgen工具）</h3><p>Channels are created by building a channel creation transaction and submitting the transaction to the ordering service. The channel creation transaction specifies the initial configuration of the channel and is used by the ordering service to write the channel genesis block. While it is possible to build the channel creation transaction file manually, it is easier to use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html" target="_blank" rel="noopener">configtxgen</a> tool. The tool works by reading a <code>configtx.yaml</code> file that defines the configuration of your channel, and then writing the relevant information into the channel creation transaction. Before we discuss the <code>configtx.yaml</code> file in the next section, we can get started by downloading and setting up the <code>configtxgen</code> tool.</p><p>通道的创建是通过构建一个创建通道的交易然后将此交易提交给排序服务来完成的。“创建通道的交易”指明了此通道的初始化配置并且由排序服务写入通道的创世纪区块中。尽管可以手动构建“创建通道的交易”，但使用configtxgen工具更容易。configtxgen工具读取定义了channle配置的<code>configtx.yaml</code>文件，然后将相关信息写入“创建通道的交易”中。在我们讨论 <code>configtx.yaml</code> 文件之前，我们先开始下载并设置<code>configtxgen</code> 工具。</p><p>You can download the <code>configtxgen</code> binaries by following the steps to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html" target="_blank" rel="noopener">install the samples, binaries and Docker images</a>. <code>configtxgen</code> will be downloaded to the <code>bin</code> folder of your local clone of the <code>fabric-samples</code> repository along with other Fabric tools.</p><p>你可以跟着 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html" target="_blank" rel="noopener">install the samples, binaries and Docker images</a>的步骤来下载 <code>configtxgen</code> 。 <code>configtxgen</code> 会下载到<code>fabric-samples</code>仓库的<code>bin</code>目录下。</p><p>For the purposes of this tutorial, we will want to operate from the <code>test-network</code> directory inside <code>fabric-samples</code>. Navigate to that directory using the following command:</p><p>为了本教程的目的，我们会想要在<code>fabric-samples</code>下面的 <code>test-network</code> 目录下进行操作，使用下面的命令切换到此目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>We will operate from the <code>test-network</code> directory for the remainder of the tutorial. Use the following command to add the configtxgen tool to your CLI path:</p><p>在本教程的其余部分中，我们将从test-network目录进行操作。使用以下命令将configtxgen工具添加到您的CLI路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>In order to use <code>configtxgen</code>, you need to the set the <code>FABRIC_CFG_PATH</code> environment variable to the path of the directory that contains your local copy of the <code>configtx.yaml</code> file. For this tutorial, we will reference the <code>configtx.yaml</code> used to setup the Fabric test network in the <code>configtx</code> folder:</p><p>为了使用<code>configtxgen</code>，您需要将<code>FABRIC_CFG_PATH</code>环境变量设置为包含<code>configtx.yaml</code>的本地目录。对于本教程，我们将在此环境变量设置为在Fabric test network目录下的包含<code>configtx.yaml</code>的<code>configtx</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/configtx</span><br></pre></td></tr></table></figure><p>You can check that you can are able to use the tool by printing the <code>configtxgen</code> help text:</p><p>你可以通过打印 <code>configtxgen</code>工具的help来检查是否已经设置好:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h2 id="The-configtx-yaml-file（configtx-yaml文件）">The configtx.yaml file（configtx.yaml文件）</h2><p>The <code>configtx.yaml</code> file specifies the <strong>channel configuration</strong> of new channels. The information that is required to build the channel configuration is specified in a readable and editable form in the <code>configtx.yaml</code> file. The <code>configtxgen</code> tool uses the channel profiles defined in the <code>configtx.yaml</code> file to create the channel configuration and write it to the <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">protobuf format</a> that can be read by Fabric.</p><p><code>configtx.yaml</code> 文件指明了一个新的通道的通道配置。在<code>configtx.yaml</code>文件中可以读取和编辑构建通道配置所需的信息。 <code>configtxgen</code> 工具通过使用 <code>configtx.yaml</code>文件中的通道属性的定义来创建通道配置，并将其写入可由Fabric读取的 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">protobuf格式</a>。</p><p>You can find the <code>configtx.yaml</code> file that is used to deploy the test network in the <code>configtx</code> folder in the <code>test-network</code> directory. The file contains the following information that we will use to create our new channel:</p><p>你可以在<code>test-network</code>目录的<code>configtx</code> 文件夹下面看到 <code>configtx.yaml</code> 文件，这个文件包含在创建新通道时会用到的下面的信息：</p><ul><li><p><strong>Organizations:</strong> The organizations that can become members of your channel. Each organization has a reference to the cryptographic material that is used to build the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html" target="_blank" rel="noopener">channel MSP</a>.</p><ul><li>可以成为你的通道成员的组织信息，每一个组织都有对用于构建<a href="%5D(https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html)">通道MSP</a>的加密材料的引用。</li></ul></li><li><p><strong>Ordering service:</strong> Which ordering nodes will form the ordering service of the network, and consensus method they will use to agree to a common order of transactions. The file also contains the organizations that will become the ordering service administrators.</p><ul><li>哪些排序节点将形成网络中的排序服务，以及它们用于同意交易顺序的共识方法。此文件还包含了会成为排序服务管理员的组织的信息。</li></ul></li><li><p><strong>Channel policies：</strong> Different sections of the file work together to define the policies that will govern how organizations interact with the channel and which organizations need to approve channel updates. For the purposes of this tutorial, we will use the default policies used by Fabric.</p><ul><li>文件的不同部分一起定义通道策略，这些策略将控制组织与通道的交互方式以及哪些组织需要批准渠道更新。就本教程而言，我们将使用Fabric使用的默认策略。</li></ul></li><li><p><strong>Channel profiles</strong> Each channel profile references information from other sections of the <code>configtx.yaml</code> file to build a channel configuration. The profiles are used the create the genesis block of the orderer system channel and the channels that will be used by peer organizations. To distinguish them from the system channel, the channels used by peer organizations are often referred to as application channels.</p><ul><li>每个通道的配置信息都引用<code>configtx.yaml</code>文件的其他部分来构建通道配置。这些配置信息是用来创建<strong>orderer system channel</strong> 的创世纪区块的，然后通道会被同等的其他组织所使用。为了将它们（<strong>orderer system channel</strong>）与系统通道区分开来，组织使用的通道通常称为应用程序通道。</li></ul><p>The <code>configtxgen</code> tool uses <code>configtx.yaml</code> file to create a complete genesis block for the system channel. As a result, the system channel profile needs to specify the full system channel configuration. The channel profile used to create the channel creation transaction only needs to contain the additional configuration information required to create an application channel.</p></li></ul><p><code>configtxgen</code>工具使用<code>configtx.yaml</code>文件为系统通道创建完整的创世块。结果，系统通道配置文件需要指定完整的系统通道配置。用于创建“创建通道的交易”使用的通道配置仅需要包含创建应用程序通道所需的其他配置信息。</p><p>You can visit the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html" target="_blank" rel="noopener">Using configtx.yaml to create a channel genesis block</a> tutorial to learn more about this file. For now, we will return to the operational aspects of creating the channel, though we will reference parts of this file in future steps.</p><p>你可以访问 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html" target="_blank" rel="noopener">Using configtx.yaml to create a channel genesis block</a> 教程来学习此文件的更多信息。现在我们回到创建通道的操作方面。</p><h2 id="Start-the-network（启动网络）">Start the network（启动网络）</h2><p>参考<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><p>Our instance of the test network was deployed without creating an application channel. However, the test network script creates the system channel when you issue the <code>./network.sh up</code> command. Under the covers, the script uses the <code>configtxgen</code> tool and the <code>configtx.yaml</code> file to build the genesis block of the system channel. Because the system channel is used to create other channels, we need to take some time to understand the orderer system channel before we can create an application channel.</p><p>我们部署的测试网络实例未创建应用程序通道。但是测试网络脚本在你运行<code>./network.sh up</code> 命令时创建了系统通道。在幕后，脚本使用<code>configtxgen</code>工具和<code>configtx.yaml</code>文件来构建系统通道的创世纪块。因为系统通道是用来创建其他通道的，所以我们在创建一个应用通道之前需要花一些时间去了解排序系统通道（ <strong>orderer system channel</strong> ）</p><h2 id="The-orderer-system-channel（排序系统通道）">The orderer system channel（排序系统通道）</h2><p>略</p><h2 id="Creating-an-application-channel（创建一个应用通道）">Creating an application channel（创建一个应用通道）</h2><p>Now that we have deployed the nodes of the network and created the orderer system channel using the <code>network.sh</code> script, we can start the process of creating a new channel for our peer organizations. We have already set the environment variables that are required to use the <code>configtxgen</code> tool. Run the following command to create a channel creation transaction for <code>channel1</code>:</p><p>现在我们已经使用<code>network.sh</code>脚本在测试网络中部署了节点，并且创建了排序系统通道。我们现在可以开始为我们的组织创建一个新通道的程序了。我们已经设置了使用<code>configtxgen</code>工具所需的环境变量。运行下面的程序来为<code>channel1</code>通道创建一个“创建通道的交易”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID channel1</span><br></pre></td></tr></table></figure><p>The <code>-channelID</code> will be the name of the future channel. Channel names must be all lower case, less than 250 characters long and match the regular expression <code>[a-z][a-z0-9.-]*</code>. The command uses the uses the <code>-profile</code> flag to reference the <code>TwoOrgsChannel:</code> profile from <code>configtx.yaml</code> that is used by the test network to create application channels:</p><p><code>-channelID</code>标志制定了创建的通道的名称，通道的名称必须全是小写，不超过250个字符并且符合正则表达式<code>[a-z][a-z0-9.-]*</code>。该命令使用<code>-profile</code>标志来引用<code>configtx.yaml</code>文件中的<code>TwoOrgsChannel：</code>配置，测试网络使用它来创建应用程序通道：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TwoOrgsChannel:</span></span><br><span class="line">    <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">    <span class="attr">Application:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">        <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">        <span class="attr">Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><p>The profile references the name of the <code>SampleConsortium</code> from the system channel, and includes both peer organizations from the consortium as channel members. Because the system channel is used as a template to create the application channel, the ordering nodes defined in the system channel become the default <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a> of the new channel, while the administrators of the ordering service become the orderer administrators of the channel. Ordering nodes and ordering organizations can be added or removed from the consenter set using channel updates.</p><p>该配置文件从系统通道引用<code>SampleConsortium</code>的名称，并且包含来自该联盟的两个组织作为通道成员。因为系统通道被用作模版来创建应用通道，系统通道中定义的排序节点成为新渠道的默认<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a>，而排序服务的管理员将成为新渠道的排序管理员。可以使用通道更新在<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set" target="_blank" rel="noopener">consenter set</a>中添加或删除排序节点和排序组织。</p><p>If the command successful, you will see logs of <code>configtxgen</code> loading the <code>configtx.yaml</code> file and printing a channel creation transaction:</p><p>如果上面的命令执行成功，你会看到<code>configtxgen</code> 工具加载 <code>configtx.yaml</code> 文件并且打印了一个创建通道的交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:25:49.175 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/test-network/configtx/configtx.yaml</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-23 14:25:49.188 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>We can use the <code>peer</code> CLI to submit the channel creation transaction to the ordering service. To use the <code>peer</code> CLI, we need to set the <code>FABRIC_CFG_PATH</code> to the <code>core.yaml</code> file located in the <code>fabric-samples/config</code> directory. Set the <code>FABRIC_CFG_PATH</code> environment variable by running the following command:</p><p>你可以使用 <code>peer</code>CLI来把这个“创建通道的交易”提交到排序服务。为了使用<code>peer</code> CLI，我们需要设置环境变量<code>FABRIC_CFG_PATH</code>为 <code>fabric-samples/config</code> 目录下的<code>core.yaml</code>文件，运行下面的命令来设置<code>FABRIC_CFG_PATH</code>环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>Before the ordering service creates the channel, the ordering service will check the permission of the identity that submitted the request. By default, only admin identities of organizations that belong to the system channel consortium can create a new channel. Issue the commands below to operate the <code>peer</code> CLI as the admin user from Org1:</p><p>在排序服务创建通道时，排序服务会检查提交请求的身份的权限。默认情况下，只有属于系统通道联盟的组织的管理员身份才能创建新的通道。运行下面的命令来以Org1的管理员身份操作 <code>peer</code> CLI:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can now create the channel by using the following command:</p><p>你现在可以使用下面的命令来创建通道了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com -c channel1 -f ./channel-artifacts/channel1.tx --outputBlock ./channel-artifacts/channel1.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command above provides the path to the channel creation transaction file using the <code>-f</code> flag and uses the <code>-c</code> flag to specify the channel name. The <code>-o</code> flag is used to select the ordering node that will be used to create the channel. The <code>--cafile</code> is the path to the TLS certificate of the ordering node. When you run the <code>peer channel create</code> command, the <code>peer</code> CLI will generate the following response:</p><p>上面的命令使用 <code>-f</code>标志来指定“创建通道的交易”的文件，并且使用 <code>-c</code> 标志来指定通道名称。<code>-o</code>标志是用来选择用来创建通道的排序节点的。<code>--cafile</code> 标志是排序节点的TLS证书路径。当你运行 <code>peer channel create</code>命令时， <code>peer</code> CLI会生成下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:36:09.386 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 14:36:09.595 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p>Because we are using a Raft ordering service, you may get some status unavailable messages that you can safely ignore. The command will return the genesis block of the new channel to the location specified by the <code>--outputBlock</code> flag.</p><p>因为我们使用一个Raft策略的排序服务，你可能会收到一些状态不可用的信息你可以放心的忽略他们。该命令会将新通道的创世纪区块输出到<code>--outputBlock</code>标志指定的位置。</p><h2 id="Join-peers-to-the-channel（把节点加入通道中）">Join peers to the channel（把节点加入通道中）</h2><p>After the channel has been created, we can join the channel with our peers. Organizations that are members of the channel can fetch the channel genesis block from the ordering service using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch" target="_blank" rel="noopener">peer channel fetch</a> command. The organization can then use the genesis block to join the peer to the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join" target="_blank" rel="noopener">peer channel join</a> command. Once the peer is joined to the channel, the peer will build the blockchain ledger by retrieving the other blocks on the channel from the ordering service.</p><p>在通道创建之后，我们可以把我们的peer节点加入到通道。属于通道成员的组织可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch" target="_blank" rel="noopener">peer channel fetch</a>命令从排序服务那里获取通道的创世纪区块。然后这个组织就可以使用这个创世纪区块来通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join" target="_blank" rel="noopener">peer channel join</a> 命令将peer节点加入到通道了。一旦peer节点加入了通道，peer节点将通过从排序服务中检索其他区块来构建区块链账本了。</p><p>Since we are already operating the <code>peer</code> CLI as the Org1 admin, let’s join the Org1 peer to the channel. Since Org1 submitted the channel creation transaction, we already have the channel genesis block on our file system. Join the Org1 peer to the channel using the command below.</p><p>因为我们已经通过Org1的管理员操作了 <code>peer</code> CLI ，让我们把Org1的peer节点加入到通道。因为是Org1组织提交的“创建通道的交易”，我们已经在我们本地的文件系统中拥有了通道的创世纪区块。使用下面的命令将组织Org1的peer节点加入到通道中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel1.block</span><br></pre></td></tr></table></figure><p>The <code>CORE_PEER_ADDRESS</code> environment variable has been set to target <code>peer0.org1.example.com</code>. A successful command will generate a response from <code>peer0.org1.example.com</code> joining the channel:</p><p>环境变量<code>CORE_PEER_ADDRESS</code>已经设置为指向了<code>peer0.org1.example.com</code>，如果命令成功的话会获取 <code>peer0.org1.example.com</code> 加入通道的响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 17:49:09.903 EST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-06 17:49:10.060 EST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p>我本地的运行报错如下，记录TODO，最终使用最新2.3.0的版本就没有这个问题。2.2.0版本没有成功启动org1的peer。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     peer channel join -b ./channel-artifacts/channel1.block</span><br><span class="line">2020-12-23 14:59:02.760 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.782623ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:03.768 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 2.438885ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:05.075 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 1.857716ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>You can verify that the peer has joined the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo" target="_blank" rel="noopener">peer channel getinfo</a> command:</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo" target="_blank" rel="noopener">peer channel getinfo</a> 命令来验证peer节点已经加入了通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>The command will list the block height of the channel and the hash of the most recent block. Because the genesis block is the only block on the channel, the height of the channel will be 1:</p><p>这个命令会列出通道区块的高度和最新的区块的hash值，因为这个通道上只有一个创世纪区块，所以这个通道上的区块高度是1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 10:50:06.978 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":1,"currentBlockHash":"kvtQYYEL2tz0kDCNttPFNC4e6HVUFOGMTIDxZ+DeNQM="&#125;</span><br></pre></td></tr></table></figure><p>We can now join the Org2 peer to the channel. Set the following environment variables to operate the <code>peer</code> CLI as the Org2 admin. The environment variables will also set the Org2 peer, <code>peer0.org1.example.com</code>, as the target peer.</p><p>我们现在可以把组织Org2的peer节点加入通道了。设置下面的环境变量来使用Org2的管理员操作<code>peer</code> CLI。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>While we still have the channel genesis block on our file system, in a more realistic scenario, Org2 would have the fetch the block from the ordering service. As an example, we will use the <code>peer channel fetch</code> command to get the genesis block for Org2:</p><p>然而在我们本地系统中仍然存在通道的创世纪区块，在一个更真实的情形中，组织Org2应该从排序服务获取这个区块。例如，我们将使用 <code>peer channel fetch</code>命令来为组织Org2获取创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/channel_org2.block -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command uses <code>0</code> to specify that it needs to fetch the genesis block that is required to join the channel. If the command is successful, you should see the following output:</p><p>该命令使用<code>0</code>来指明它需要获取创世纪块，该创世纪区块用于加入通道。如果命令执行成功，你会看到下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 11:32:06.309 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-13 11:32:06.336 EDT [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br></pre></td></tr></table></figure><p>The command returns the channel genesis block and names it <code>channel_org2.block</code> to distinguish it from the block pulled by org1. You can now use the block to join the Org2 peer to the channel:</p><p>这个命令会获取到名为 <code>channel_org2.block</code> 的通道创世纪区块，以与Org1的区块作区分。你现在可以使用这个区块把Org2的peer节点加入到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel_org2.block</span><br></pre></td></tr></table></figure><h2 id="Set-anchor-peers（设置锚节点）">Set anchor peers（设置锚节点）</h2><p>After an organizations has joined their peers to the channel, they should select at least one of their peers to become an anchor peer. <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers" target="_blank" rel="noopener">Anchor peers</a> are required in order to take advantage of features such as private data and service discovery. Each organization should set multiple anchor peers on a channel for redundancy. For more information about gossip and anchor peers, see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html" target="_blank" rel="noopener">Gossip data dissemination protocol</a>.</p><p>在一个组织将他们的peer节点加入到通道之后，他们还需要在他们的组织内部选择至少一个peer节点作为锚节点。<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers" target="_blank" rel="noopener">Anchor peers</a> 需要锚节点的好处是他能够利用私有数据以及做服务发现。每个组织都应在一个通道上设置多个锚节点以实现冗余。</p><p>The endpoint information of the anchor peers of each organization is included in the channel configuration. Each channel member can specify their anchor peers by updating the channel. We will use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html" target="_blank" rel="noopener">configtxlator</a> tool to update the channel configuration and select an anchor peer for Org1 and Org2. The process for setting an anchor peer is similar to the steps that are required to make other channel updates and provides an introduction to how to use <code>configtxlator</code> to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">update a channel configuration</a>. You will also need to install the <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq tool</a> on your local machine.</p><p>通道配置中包含每个组织的锚节点的终点信息。每个组织都可以通过更新通道配置来知名他们的锚节点。我们会使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html" target="_blank" rel="noopener">configtxlator</a>工具来更新通道配置并且为组织Org1和Org2各选择一个锚节点。设置锚节点的流程与教程<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html" target="_blank" rel="noopener">update a channel configuration</a>的步骤很类似。你还需要在你的本地安装<a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq</a> 工具。</p><p>We will start by selecting an anchor peer as Org1. The first step is to pull the most recent channel configuration block using the <code>peer channel fetch</code> command. Set the following environment variables to operate the <code>peer</code> CLI as the Org1 admin:</p><p>我们先以Org1的身份来选择一个锚节点。第一步是使用<code>peer channel fetch</code> 命令拉去最新的通道配置区块。设置环境变量以Org1管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can use the following command to fetch the channel configuration:</p><p>你可以通过下面的命令来获取通道配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Because the most recent channel configuration block is the channel genesis block, you will see the command return block 0 from the channel.</p><p>因为最新的通道配置区块是通道的创世纪区块，你会看到该命令会返回通道上的0区块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 16:37:33.686 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 16:37:33.689 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-23 16:37:33.689 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-23 16:37:33.693 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><p>The channel configuration block was stored in the <code>channel-artifacts</code> folder to keep the update process separate from other artifacts. Change into the <code>channel-artifacts</code> folder to complete the next steps:</p><p>通道配置区块被存储在channel-artifacts目录下，以使更新流程与其他的组件区分开。进入 <code>channel-artifacts</code> 目录下来完成接下来的步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>We can now start using the <code>configtxlator</code> tool to start working with the channel configuration. The first step is to decode the block from protobuf into a JSON object that can be read and edited. We also strip away the unnecessary block data, leaving only the channel configuration.</p><p>我们现在开始使用 <code>configtxlator</code> 工具和通道配置一起工作。第一步是将来自区块的protobuf格式解码为可以读取和编辑的JSON格式。我们还将去除不必要的块数据，仅保留通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br></pre></td></tr></table></figure><p>These commands convert the channel configuration block into a streamlined JSON, <code>config.json</code>, that will serve as the baseline for our update. Because we don’t want to edit this file directly, we will make a copy that we can edit. We will use the original channel config in a future step.</p><p>这些命令将通道配置区块转换为简化的JSON格式的文件<code>config.json</code>，它将作为我们更新的基准。因为我们不想直接编辑这个文件，我们会先创建一个可以编辑的副本。我们将在以后的步骤中使用原始的通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>You can use the <code>jq</code> tool to add the Org1 anchor peer to the channel configuration.</p><p>你可以使用<code>jq</code> 工具来添加Org1组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.Org1MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.org1.example.com","port": 7051&#125;]&#125;,"version": "0"&#125;&#125;' config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>After this step, we have an updated version of channel configuration in JSON format in the <code>modified_config.json</code> file. We can now convert both the original and modified channel configurations back into protobuf format and calculate the difference between them.</p><p>完成此步骤后，我们在<code>modified_config.json</code>文件中以JSON格式获取了通道配置的更新版本。现在，我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>The new protobuf named <code>channel_update.pb</code> contains the anchor peer update that we need to apply to the channel configuration. We can wrap the configuration update in a transaction envelope to create the channel configuration update transaction.</p><p>格式为protobuf的新的<code>channel_update.pb</code>文件包含我们需要应用于通道配置上的锚节点更新。我们可以将配置更新包装在交易信封中以创建通道配置更新交易。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"channel1", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat config_update.json)'&#125;&#125;&#125;' | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>We can now use the final artifact, <code>config_update_in_envelope.pb</code>, that can be used to update the channel. Navigate back to the <code>test-network</code> directory:</p><p>现在，我们可以使用最终工件<code>config_update_in_envelope.pb</code>，该工件可以用于更新通道。回到<code>test-network</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>We can add the anchor peer by providing the new channel configuration to the <code>peer channel update</code> command. Because we are updating a section of the channel configuration that only affects Org1, other channel members do not need to approve the channel update.</p><p>我们可以通过向<code>peer channel update</code>命令提供新的通道配置来添加锚节点。因为我们正在更新仅影响Org1的部分通道配置，所以其他通道成员不需要批准通道更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>When the channel update is successful, you should see the following response:</p><p>当渠道更新成功后，你会看到下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:05:48.187 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 17:05:48.222 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p>We can set the anchor peers for Org2. Because we are going through the process a second time, we will go through the steps more quickly. Set the environment variables to operate the <code>peer</code> CLI as the Org2 admin:</p><p>我们可以为Org2设置锚节点。因为我们是第二次进行该过程，所以我们将更快地完成这些步骤。设置环境变量以Org2管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>Pull the latest channel configuration block, which is now the second block on the channel:</p><p>拉去最新的通道配置区块，即目前通道上的第二个区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>channel-artifacts</code> directory（切换回 <code>channel-artifacts</code> 目录）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>You can then decode and copy the configuration block.（你可以解码并复制配置区块）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>Add the Org2 peer that is joined to the channel as the anchor peer in the channel configuration:</p><p>在通道配置中添加Org2的已经加入通道的节点作为锚节点:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq '.channel_group.groups.Application.groups.Org2MSP.values += &#123;"AnchorPeers":&#123;"mod_policy": "Admins","value":&#123;"anchor_peers": [&#123;"host": "peer0.org2.example.com","port": 9051&#125;]&#125;,"version": "0"&#125;&#125;' config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>We can now convert both the original and updated channel configurations back into protobuf format and calculate the difference between them.</p><p>我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>Wrap the configuration update in a transaction envelope to create the channel configuration update transaction:</p><p>将配置更新包装在交易信封中以创建通道配置更新交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"channel1", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat config_update.json)'&#125;&#125;&#125;' | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>test-network</code> directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>Update the channel and set the Org2 anchor peer by issuing the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>You can confirm that the channel has been updated successfully by running the <code>peer channel info</code> command:</p><p>你可以使用 <code>peer channel info</code>命令来确认通道已经成功更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>Now that the channel has been updated by adding two channel configuration blocks to the channel genesis block, the height of the channel will have grown to three:</p><p>现在已经通过在创世纪区块上添加两个通道配置区块更新了通道，通道的区块高度会增长到3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:19:08.620 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;"height":3,"currentBlockHash":"0xMLgGnvbUE+gfDpxjbfB1OsxROF3djLzPX9S76ai2I=","previousBlockHash":"6oIrHH8zjeOuhlj2/rrpzxh0pNmGOdPTDjiphJwCXcQ="&#125;</span><br></pre></td></tr></table></figure><h2 id="Deploy-a-chaincode-to-the-new-channel（部署链码到新通道上）">Deploy a chaincode to the new channel（部署链码到新通道上）</h2><p>We can confirm that the channel was created successfully by deploying a chaincode to the channel. We can use the <code>network.sh</code> script to deploy the Basic asset transfer chaincode to any test network channel. Deploy a chaincode to our new channel using the following command:</p><p>我们可以通过在通道上部署链码来确认通道已经创建成功。我们可以使用 <code>network.sh</code> 脚本部署Basic asset transfer 链码到任何测试通道，使用下面的命令将链码部署到新通道上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go/ -ccl go -c channel1 -cci InitLedger</span><br></pre></td></tr></table></figure><p>After you run the command, you should see the chaincode being deployed to the channel in your logs. The chaincode is invoked to add data to the channel ledger.</p><p>运行命令后，您应该在日志中看到链码已部署到通道。调用链码将数据添加到通道账本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C channel1 -n basic -c '&#123;"Args":["getAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>After you run the query, you should see the assets that were added to the channel ledger.</p><p>在运行查询之后，你会看到已经添加到通道账本上的资产列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;,&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;,&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;,&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;,&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;,&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/通过供应链金融练习Fabric/summary</title>
    <link href="https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/"/>
    <id>https://guozhe001.github.io/2020/12/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/</id>
    <published>2020-12-22T08:15:02.071Z</published>
    <updated>2020-12-30T10:03:35.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>为了学习Fabric，模拟搭建一个供应链金融的区块链项目。</p><p>为了简单起见，此项目有以下四个组织：</p><ul><li>核心企业</li><li>一级供应商</li><li>二级供应商1</li><li>二级供应商2</li></ul><h2 id="操作步骤：">操作步骤：</h2><ol start="0"><li><a href="%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.md">设置环境变量</a></li><li><a href="%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C.md">创建网络</a></li><li><a href="%E5%88%9B%E5%BB%BAchannel.md">创建channel</a></li><li><a href="%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6.md">开发智能合约</a></li><li><a href="%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel.md">部署智能合约到channel并进行交易</a></li><li><a href="%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel.md">交易与验证</a>：查看“部署supply-v8到alljoinchannel通道”部分</li><li><a href="https://github.com/guozhe001/supply-finance.git" target="_blank" rel="noopener">源码地址</a></li></ol><h2 id="总结：">总结：</h2><p>本项目成功的在测试环境自己部署网络，自己写智能合约并进行调用；完成了入门练习。</p><h2 id="存在的问题：">存在的问题：</h2><h3 id="问题1">问题1</h3><p>目前此程序把所有的组织都加入了同一个渠道，所以账本是对所有组织都是公开的；现实生活中每个企业之间的交易应该都是私密的，不能被其他企业所见。</p><h4 id="解决方案1：">解决方案1：</h4><p>使用通道隔离，每两个需要交易的组织之间都创建一个通道。</p><p><strong>可行性：</strong> <em>初步判断此方法不可行，因为不同通道之间无法交易资产？如果可以交易需要从原来的channel销毁此资产，然后在新channel创建一个新的可被信任的新资产</em></p><h4 id="解决方案2：">解决方案2：</h4><p>使用私密资产交易的方式解决,参考文档<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html" target="_blank" rel="noopener">Secured asset transfer in Fabric</a></p><p><strong>可行性：</strong> <em>未知，待学习</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目背景&quot;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;为了学习Fabric，模拟搭建一个供应链金融的区块链项目。&lt;/p&gt;
&lt;p&gt;为了简单起见，此项目有以下四个组织：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心企业&lt;/li&gt;
&lt;li&gt;一级供应商&lt;/li&gt;
&lt;li&gt;二级供应商1&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/编写您的第一个Chaincode</title>
    <link href="https://guozhe001.github.io/2020/12/21/blockchain/fabric/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/"/>
    <id>https://guozhe001.github.io/2020/12/21/blockchain/fabric/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/</id>
    <published>2020-12-21T10:35:52.258Z</published>
    <updated>2020-12-25T10:10:35.204Z</updated>
    
    <content type="html"><![CDATA[<p>编写您的第一个Chaincode</p><h2 id="Asset-Transfer-Chaincode（资产交易智能合约）">Asset Transfer Chaincode（资产交易智能合约）</h2><p>Our application is a basic sample chaincode to initialize a ledger with assets, create, read, update, and delete assets, check to see if an asset exists, and transfer assets from one owner to another.</p><p>我们的程序是一个基本简单的链码，利用资产初始化账本，创建、读取，更新以及更新资产，检查一个资产是否存在并且把资产从一个所有者交易给另一个所有者。</p><h3 id="Choosing-a-Location-for-the-Code（给代码选一个位置）">Choosing a Location for the Code（给代码选一个位置）</h3><p>If you haven’t been doing programming in Go, you may want to make sure that you have <a href="https://golang.org/" target="_blank" rel="noopener">Go</a> installed and your system properly configured. We assume you are using a version that supports modules.</p><p>如果你还没有使用过Go，你需要确认你的环境已经安装了 <a href="https://golang.org/" target="_blank" rel="noopener">Go</a>并配置好了环境变量。我们假设你使用的是支持模块的版本。</p><p>Now, you will want to create a directory for your chaincode application.</p><p>To keep things simple, let’s use the following command:</p><p>现在你想要为你的链码程序创建一个目录，简单起见，我们使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// atcc is shorthand for asset transfer chaincode</span><br><span class="line">mkdir atcc &amp;&amp; cd atcc</span><br></pre></td></tr></table></figure><p>Now, let’s create the module and the source file that we’ll fill in with code:</p><p>现在让我们创建模块和源文件，并用代码填充它们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init atcc</span><br><span class="line">touch atcc.go</span><br></pre></td></tr></table></figure><h3 id="Housekeeping-整理工作">Housekeeping(整理工作)</h3><p>First, let’s start with some housekeeping. As with every chaincode, it implements the <a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi" target="_blank" rel="noopener">fabric-contract-api interface</a>, so let’s add the Go import statements for the necessary dependencies for our chaincode. We’ll import the fabric contract api package and define our SmartContract.</p><p>首先让我们做一些整理工作。所有的链码都实现了<a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi" target="_blank" rel="noopener">fabric-contract-api interface</a>，所以让我们为Go程序添加必要的依赖。我们会导入fabric合同API包来定义我们的智能合约。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line">   <span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">   contractapi.Contract</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Next, let’s add a struct <code>Asset</code> to represent simple assets on the ledger. Note the JSON annotations, which will be used to marshal the asset to JSON which is stored on the ledger.</p><p>下一步让我们增加一个<code>Asset</code> 类来表示账本上的简单的资产。请注意JSON注释，该注释将用于将资产编组为存储在分类帐中的JSON。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line">   <span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID             <span class="keyword">string</span> <span class="string">`json:"ID"`</span></span><br><span class="line">    Color          <span class="keyword">string</span> <span class="string">`json:"color"`</span></span><br><span class="line">    Size           <span class="keyword">int</span>    <span class="string">`json:"size"`</span></span><br><span class="line">    Owner          <span class="keyword">string</span> <span class="string">`json:"owner"`</span></span><br><span class="line">    AppraisedValue <span class="keyword">int</span>    <span class="string">`json:"appraisedValue"`</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Initializing-the-Chaincode-初始化链码">Initializing the Chaincode(初始化链码)</h3><p>Next, we’ll implement the <code>InitLedger</code> function to populate the ledger with some initial data.</p><p>接下来我们实现<code>InitLedger</code> 方法，这个方法使用一些初始化的数据来填充账本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InitLedger adds a base set of assets to the ledger</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">InitLedger</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      assets := []Asset&#123;</span><br><span class="line">        &#123;ID: <span class="string">"asset1"</span>, Color: <span class="string">"blue"</span>, Size: <span class="number">5</span>, Owner: <span class="string">"Tomoko"</span>, AppraisedValue: <span class="number">300</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset2"</span>, Color: <span class="string">"red"</span>, Size: <span class="number">5</span>, Owner: <span class="string">"Brad"</span>, AppraisedValue: <span class="number">400</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset3"</span>, Color: <span class="string">"green"</span>, Size: <span class="number">10</span>, Owner: <span class="string">"Jin Soo"</span>, AppraisedValue: <span class="number">500</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset4"</span>, Color: <span class="string">"yellow"</span>, Size: <span class="number">10</span>, Owner: <span class="string">"Max"</span>, AppraisedValue: <span class="number">600</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset5"</span>, Color: <span class="string">"black"</span>, Size: <span class="number">15</span>, Owner: <span class="string">"Adriana"</span>, AppraisedValue: <span class="number">700</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">"asset6"</span>, Color: <span class="string">"white"</span>, Size: <span class="number">15</span>, Owner: <span class="string">"Michel"</span>, AppraisedValue: <span class="number">800</span>&#125;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, asset := <span class="keyword">range</span> assets &#123;</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      err = ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to put to world state. %v"</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Next, we write a function to create an asset on the ledger that does not yet exist. When writing chaincode, it is a good idea to check for the existence of something on the ledger prior to taking an action on it, as is demonstrated in the <code>CreateAsset</code> function below.</p><p>接下来，我们写一个创建一个账本上不存在的资产的方法。当编写链码时，最好先对分类帐进行检查，然后再对其进行操作，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编写您的第一个Chaincode&lt;/p&gt;
&lt;h2 id=&quot;Asset-Transfer-Chaincode（资产交易智能合约）&quot;&gt;Asset Transfer Chaincode（资产交易智能合约）&lt;/h2&gt;
&lt;p&gt;Our application is a basic sa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>others/Docker常用命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/21/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/21/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-21T03:52:27.579Z</published>
    <updated>2020-12-30T03:38:14.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker常用命令记录">Docker常用命令记录</h1><h2 id="docker命令">docker命令</h2><h3 id="删除本地所有没有被使用的卷：">删除本地所有没有被使用的卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>WARNING! This will remove all local volumes not used by at least one container.</p><h3 id="查看本地的所有卷：">查看本地的所有卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="删除某个volume卷">删除某个volume卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm docker_orderer.supply.com</span><br></pre></td></tr></table></figure><h3 id="查看所有的容器，包括没有运行中的">查看所有的容器，包括没有运行中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看某个容器的日志">查看某个容器的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs ead00b30e8ec</span><br></pre></td></tr></table></figure><h3 id="停止容器">停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm ead00b30e8ec 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="进入docker容器">进入docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="修改容器的环境变量">修改容器的环境变量</h3><p>在配置docker-compose某个容器的环境变量时出现了错误，但是容器已经运行了，如果重新运行则数据会丢失。所以需要修正此环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#Generic</span> <span class="string">peer</span> <span class="string">variables*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">the</span> <span class="string">following</span> <span class="string">setting</span> <span class="string">starts</span> <span class="string">chaincode</span> <span class="string">containers</span> <span class="string">on</span> <span class="string">the</span> <span class="string">same*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">bridge</span> <span class="string">network</span> <span class="string">as</span> <span class="string">the</span> <span class="string">peers*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">https://docs.docker.com/compose/networking/*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=_test</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG*</span></span><br></pre></td></tr></table></figure><p>如要修改<code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code>为<code>docker_test</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入容器</span></span><br><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改环境变量</span></span><br><span class="line">echo "export CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test" &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新启动容器即可</span></span><br></pre></td></tr></table></figure><h3 id="查看docker启动的网络">查看docker启动的网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="docker-compose命令">docker-compose命令</h2><h3 id="使用docker-compose启动docker镜像">使用docker-compose启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --f 指定文件, -d指定后台运行</span></span><br><span class="line">docker-compose --f docker-compose.yml up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker常用命令记录&quot;&gt;Docker常用命令记录&lt;/h1&gt;
&lt;h2 id=&quot;docker命令&quot;&gt;docker命令&lt;/h2&gt;
&lt;h3 id=&quot;删除本地所有没有被使用的卷：&quot;&gt;删除本地所有没有被使用的卷：&lt;/h3&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/将智能合约部署到通道</title>
    <link href="https://guozhe001.github.io/2020/12/18/blockchain/fabric/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/"/>
    <id>https://guozhe001.github.io/2020/12/18/blockchain/fabric/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/</id>
    <published>2020-12-18T02:58:46.693Z</published>
    <updated>2020-12-28T09:40:03.761Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html" target="_blank" rel="noopener">参考文档</a></p><h1 id="Deploying-a-smart-contract-to-a-channel（将智能合约部署到通道）">Deploying a smart contract to a channel（将智能合约部署到通道）</h1><p>最终用户通过调用智能合约与区块链账本进行交互。在Hyperledger Fabric中，智能合约通过称为chaincode的软件包进行部署。一个组织想要验证交易或者查询账本的内容，就需要在其peer节点上部署chaincode。当一个已经安装了chaincode的节点加入channel之后，channel的成员就可以把chaincode部署到channel上，然后使用chaincode上的智能合约来创建和更新chanel账本上的资产。</p><p>我们使用一个叫做Fabric链码生命周期的程序来将chaincode部署到channel上；在链码可以被使用于交易之前，Fabric链码生命周期需要多个组织同意链码将如何操作。（<em>个人理解：需要组织同意智能合约的内容，智能合约才能部署到channel上</em>）举个例子，当一个背书策略制定哪些组织需要执行chaincode来验证一个交易时，channel上的成员需要使用Fabric链码生命周期来同意链码的背书策略。有关如何在通道上部署和管理链码的更深入的概述，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/chaincode_lifecycle.html" target="_blank" rel="noopener">Fabric chaincode lifecycle</a>。</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html" target="_blank" rel="noopener">peer lifecycle chaincode commands</a>这个教程来学习在Fabric测试网络中如何使用peer lifecycle chaincode commands来部署链码到channel。了解命令后，您可以使用本教程中的步骤将自己的链码部署到测试或生产网络。在这个教程中，你会部署教程<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/write_first_app.html" target="_blank" rel="noopener">Writing your first application tutorial</a>使用的链码程序。</p><p>**注意：**当前教程使用v2.0版本中引入的Fabric链码生命周期。</p><h2 id="Start-the-network（启动测试网络）">Start the network（启动测试网络）</h2><p>启动测试网络并创建channel，具体步骤参考<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a>。</p><p>你可以根据以下步骤使用节点的CLI来部署 asset-transfer (basic) 链码到channel中：</p><ul><li>[第一步：打包智能合约]</li><li>[第二步：安装链码包]</li><li>[第三步：批准链码定义]</li><li>[第四部：提交链码定义到channel中]</li></ul><h2 id="Setup-Logspout-optional-（启动日志输出，可选）">Setup Logspout (optional)（启动日志输出，可选）</h2><p>此步骤不是必需的，但是对于故障排除链码非常有用。要监视智能合约的日志，管理员可以使用<a href="https://logdna.com/blog/what-is-logspout/" target="_blank" rel="noopener">logspout</a>查看一组Docker容器的聚合输出。这个工具收集不同的Docker容器的输出流到一个位置，这样就可以在一个窗口看这些容器都发生了什么。这可以帮助管理员在安装智能合约或者是开发人员调用智能合约时调试问题。因为某些容器的创建纯粹是为了启动智能合约，并且仅存在很短的时间，所以从网络中收集所有日志将很有帮助。</p><p><a href="http://xn--FabricLogspoutmonitordocker-8c86b0p99fdhu31ag34avvicndd5i2t1e0etn22cmk5an23jl6lva1361ad0b263jzdgipw4t2gbf9d.sh" target="_blank" rel="noopener">Fabric的商业票据示例中已经包含了用于安装和配置Logspout的脚本monitordocker.sh</a>。在本教程中，我们还将使用相同的脚本。Logspout工具将持续向您的终端流式传输日志，因此您将需要使用新的终端窗口。打开一个新终端，然后导航到test-network目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>你可以在任何目录下运行 <code>monitordocker.sh</code>脚本，为了方便使用我们把 <code>monitordocker.sh</code> 从<code>commercial-paper</code>拷贝到你的工作目录(test-network)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ../commercial-paper/organization/digibank/configuration/cli/monitordocker.sh .</span><br></pre></td></tr></table></figure><p>你可以使用下面的命令来启动Logspout：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./monitordocker.sh net_test</span><br></pre></td></tr></table></figure><p>你会看到类似下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Starting monitoring on all containers on the network net_basic</span><br><span class="line">Unable to find image 'gliderlabs/logspout:latest' locally</span><br><span class="line">latest: Pulling from gliderlabs/logspout</span><br><span class="line">4fe2ade4980c: Pull complete</span><br><span class="line">decca452f519: Pull complete</span><br><span class="line">ad60f6b6c009: Pull complete</span><br><span class="line">Digest: sha256:374e06b17b004bddc5445525796b5f7adb8234d64c5c5d663095fccafb6e4c26</span><br><span class="line">Status: Downloaded newer image for gliderlabs/logspout:latest</span><br><span class="line">1f99d130f15cf01706eda3e1f040496ec885036d485cb6bcc0da4a567ad84361</span><br></pre></td></tr></table></figure><p>在我们部署链码之前你不会看到太多的日志。</p><h2 id="Package-the-smart-contract（打包智能合约）">Package the smart contract（打包智能合约）</h2><p>We need to package the chaincode before it can be installed on our peers. The steps are different if you want to install a smart contract written in <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go" target="_blank" rel="noopener">Go</a>, <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#javascript" target="_blank" rel="noopener">JavaScript</a>, or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript" target="_blank" rel="noopener">Typescript</a>.</p><p>在把智能合约安装到我们的节点之前需要先将其打包。根据编写智能合约的语言的不同，其步骤也是不一样的。（<em>本次只使用Go，其他语言如<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go" target="_blank" rel="noopener">Go</a>, <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#javascript" target="_blank" rel="noopener">JavaScript</a>, or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript" target="_blank" rel="noopener">Typescript</a>请参考官方文档</em>）</p><h3 id="Go">Go</h3><p>在我们打包链码之前，我们需要先安装链码的依赖。切换到Go版本的 asset-transfer (basic) 项目目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/asset-transfer-basic/chaincode-go</span><br></pre></td></tr></table></figure><p>该示例使用Go模块来安装chaincode依赖项。依赖关系列在asset-transfer-basic / chaincode-go目录的go.mod文件中。您应该花一点时间来检查此文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module github.com/hyperledger/fabric-samples/asset-transfer-basic/chaincode-<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/golang/protobuf v1<span class="number">.3</span><span class="number">.2</span></span><br><span class="line">        github.com/hyperledger/fabric-chaincode-<span class="keyword">go</span> v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200424173110</span>-d7076418f212</span><br><span class="line">        github.com/hyperledger/fabric-contract-api-<span class="keyword">go</span> v1<span class="number">.1</span><span class="number">.0</span></span><br><span class="line">        github.com/hyperledger/fabric-protos-<span class="keyword">go</span> v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200424173316</span>-dd554ba3746e</span><br><span class="line">        github.com/stretchr/testify v1<span class="number">.5</span><span class="number">.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>go.mod文件将Fabric合约API导入到智能合约包中。你可以打开<code>asset-transfer-basic/chaincode-go/chaincode/smartcontract.go</code>来查看在智能合约的最开始是如使用contract API来定义<code>SmartContract</code>类的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">    contractapi.Contract</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，将SmartContract类型用于为智能合约中定义的方法创建交易上下文，该方法可将数据读取和写入区块链账本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// CreateAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"the asset %s already exists"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asset := Asset&#123;</span><br><span class="line">ID:             id,</span><br><span class="line">Color:          color,</span><br><span class="line">Size:           size,</span><br><span class="line">Owner:          owner,</span><br><span class="line">AppraisedValue: appraisedValue,</span><br><span class="line">&#125;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过访问 <a href="https://github.com/hyperledger/fabric-contract-api-go" target="_blank" rel="noopener">API documentation</a> 和 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/smartcontract.html" target="_blank" rel="noopener">smart contract processing topic</a>来学习更多的关于合约API的内容。</p><p>为了安装智能合约的依赖，在<code>asset-transfer-basic/chaincode-go</code> 目录下运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GO111MODULE=on go mod vendor</span><br></pre></td></tr></table></figure><p>如果命令成功，则go软件包将安装vendor文件夹中。</p><p>现在我们已经有了依赖的包，我们可以创建chaincode的包了。把当前目录切换到<code>test-network</code> 以便我们可以将链码于其他网络组件打包在一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..&#x2F;..&#x2F;test-network</span><br></pre></td></tr></table></figure><p>You can use the <code>peer</code> CLI to create a chaincode package in the required format. The <code>peer</code> binaries are located in the <code>bin</code> folder of the <code>fabric-samples</code> repository. Use the following command to add those binaries to your CLI Path:</p><p>您可以使用<code>peer</code>CLI创建所需格式的链码包。<code>peer</code>二进制文件位于fabric-samples存储库的bin文件夹中。可以使用下面的命令添加到你的环境变量中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>您还需要将FABRIC_CFG_PATH设置为指向fabric-samples存储库中的core.yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>使用下面的命令来查看peer的版本，如果输出正常说明你已经可以使用<code>peer</code>CLI了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer version</span><br></pre></td></tr></table></figure><p>You can now create the chaincode package using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-package" target="_blank" rel="noopener">peer lifecycle chaincode package</a> command:</p><p>现在你可以通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-package" target="_blank" rel="noopener">peer lifecycle chaincode package</a> 命令来创建链码包了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>This command will create a package named <code>basic.tar.gz</code> in your current directory. The <code>--lang</code> flag is used to specify the chaincode language and the <code>--path</code> flag provides the location of your smart contract code. The path must be a fully qualified path or a path relative to your present working directory. The <code>--label</code> flag is used to specify a chaincode label that will identity your chaincode after it is installed. It is recommended that your label include the chaincode name and version.</p><p>这个命令会在你的当前目录下创建一个名为<code>basic.tar.gz</code>的压缩包。<code>--lang</code>标志是制定chaincode的语言，而<code>--path</code> 标志用于提供智能合约代码的位置。该路径必须是标准路径或相对于您当前工作目录的路径。<code>--label</code>标志用于指定一个链码标签，该标签将在安装链码后对其进行标识。建议您的标签包含链码名称和版本。</p><p>Now that we created the chaincode package, we can <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#install-the-chaincode-package" target="_blank" rel="noopener">install the chaincode</a> on the peers of the test network.</p><p>现在我们已经创建了链码包，我们可以把链码安装到网络上的节点上了。</p><h2 id="Install-the-chaincode-package（安装链码包）">Install the chaincode package（安装链码包）</h2><p>After we package the asset-transfer (basic) smart contract, we can install the chaincode on our peers. The chaincode needs to be installed on every peer that will endorse a transaction. Because we are going to set the endorsement policy to require endorsements from both Org1 and Org2, we need to install the chaincode on the peers operated by both organizations:</p><p>在我们打包了 asset-transfer (basic) 的智能合约之后，我们就可以将此链码安装到我们的peer节点上了。需要在所有的交易背书节点上安装链码。因为我们将设置背书策略要求来自Org1和Org2的背书，所以我们需要在两个组织运营的对等方上安装链码：</p><ul><li><a href="http://peer0.org1.example.com" target="_blank" rel="noopener">peer0.org1.example.com</a></li><li><a href="http://peer0.org2.example.com" target="_blank" rel="noopener">peer0.org2.example.com</a></li></ul><p>Let’s install the chaincode on the Org1 peer first. Set the following environment variables to operate the <code>peer</code> CLI as the Org1 admin user. The <code>CORE_PEER_ADDRESS</code> will be set to point to the Org1 peer, <code>peer0.org1.example.com</code>.</p><p>让我们先把链码安装到Org1的节点上。设置以下环境变量来使用Org1的admin用户的身份运行<code>peer</code>CLI。将CORE_PEER_ADDRESS设置为指向Org1的节点的<code>peer0.org1.example.com</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>Issue the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-install" target="_blank" rel="noopener">peer lifecycle chaincode install</a> command to install the chaincode on the peer:</p><p>发出在peer节点上安装链码的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz</span><br></pre></td></tr></table></figure><p>If the command is successful, the peer will generate and return the package identifier. This package ID will be used to approve the chaincode in the next step. You should see output similar to the following:</p><p>如果命令执行成功，则peer将生成并返回安装包的标识符。这个包的ID会在下一步批准这个链码时使用。你会看到类似下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-21 14:46:18.360 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:"\nJbasic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2\022\tbasic_1.0" &gt;</span><br><span class="line">2020-12-21 14:46:18.361 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2</span><br></pre></td></tr></table></figure><p>在运行<code>monitordocker.sh</code>的终端可以看到下面的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [lifecycle] InstallChaincode -&gt; INFO 046 Successfully installed chaincode with package ID 'basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2'</span><br><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [endorser] callChaincode -&gt; INFO 047 finished chaincode: _lifecycle duration: 35751ms channel= txID=26a66cb7</span><br><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [comm.grpc.server] 1 -&gt; INFO 048 unary call completed grpc.service=protos.Endorser grpc.method=ProcessProposal grpc.peer_address=172.19.0.1:62970 grpc.code=OK grpc.call_duration=35.752599039s</span><br></pre></td></tr></table></figure><p>We can now install the chaincode on the Org2 peer. Set the following environment variables to operate as the Org2 admin and target target the Org2 peer, <a href="http://peer0.org2.example.com" target="_blank" rel="noopener">peer0.org2.example.com</a>.</p><p>现在我们把链码安装到Org2组织的peer节点上。先设置环境变量让我们可以以Org2的管理员身份来操作Org2的节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>Issue the following command to install the chaincode（发出以下命令来安装链码）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz</span><br></pre></td></tr></table></figure><p>The chaincode is built by the peer when the chaincode is installed. The install command will return any build errors from the chaincode if there is a problem with the smart contract code.</p><p>在安装链码时，由peer节点来构建链码。如果智能合约有问题，安装命令会把所有构建的错误返回。</p><h2 id="Approve-a-chaincode-definition（批准链码定义）">Approve a chaincode definition（批准链码定义）</h2><p>After you install the chaincode package, you need to approve a chaincode definition for your organization. The definition includes the important parameters of chaincode governance such as the name, version, and the chaincode endorsement policy.</p><p>在安装链码包之后，需要你所在的组织批准链码的定义。这个定义包括链码管理的重要参数，例如名称、版本以及链码的背书策略。</p><p>The set of channel members who need to approve a chaincode before it can be deployed is governed by the <code>Application/Channel/lifeycleEndorsement</code> <a href="http://policy.By" target="_blank" rel="noopener">policy.By</a> default, this policy requires that a majority of channel members need to approve a chaincode before it can used on a channel.Because we have only two organizations on the channel, and a majority of 2 is 2, we need approve a chaincode definition of asset-transfer (basic) as Org1 and Org2.</p><p>在channel上的哪些成员需要在其可以部署链码之前批准，是定义在<code>Application/Channel/lifeycleEndorsement</code>策略中。默认情况下，此策略要求大多数channel的成员需要批准链码后才能在频道上使用。因为在我们的channel上只有两个组织，并且大多数就是2，我们需要以Org1和Org2的身份来批准asset-transfer (basic)的链码定义。</p><p>If an organization has installed the chaincode on their peer, they need to include the packageID in the chaincode definition approved by their organization. The package ID is used to associate the chaincode installed on a peer with an approved chaincode definition, and allows an organization to use the chaincode to endorse transactions. You can find the package ID of a chaincode by using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-queryinstalled" target="_blank" rel="noopener">peer lifecycle chaincode queryinstalled</a> command to query your peer.</p><p>如果一个组织已经在其peer节点上安装了链码，这个组织需要在其批准的链码定义中包含packageID。packageID是用来把安装在节点上的chaincode和已经批准通过的链码定义关联起来的，并且允许一个组织在背书节点使用这个链码。你可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-queryinstalled" target="_blank" rel="noopener">peer lifecycle chaincode queryinstalled</a> 命令在你的peer节点上查询一个链码的packageID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>The package ID is the combination of the chaincode label and a hash of the chaincode binaries. Every peer will generate the same package ID. You should see output similar to the following:</p><p>packageID是链码标签和链码二进制文件的哈希值的组合。每个peer将生成相同的程序包ID。您应该看到类似于以下内容的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>We are going to use the package ID when we approve the chaincode, so let’s go ahead and save it as an environment variable. Paste the package ID returned by <code>peer lifecycle chaincode queryinstalled</code> into the command below. <strong>Note:</strong> The package ID will not be the same for all users, so you need to complete this step using the package ID returned from your command window in the previous step.</p><p>在我们批准链码时我们需要使用这个 package ID，所以让我们先把它保存为一个环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2</span><br></pre></td></tr></table></figure><p>Because the environment variables have been set to operate the <code>peer</code> CLI as the Org2 admin, we can approve the chaincode definition of asset-transfer (basic) as Org2. Chaincode is approved at the organization level, so the command only needs to target one peer. The approval is distributed to the other peers within the organization using gossip. Approve the chaincode definition using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-approveformyorg" target="_blank" rel="noopener">peer lifecycle chaincode approveformyorg</a> command:</p><p>因为当前的环境变量已经设置为以Org2组织的管理员来操作<code>peer</code>CLI，我们可以以组织Org2的身份批准这个asset-transfer (basic)的链码定义。链码是在组织的级别进行批准的，所以这个命令只需要针对一个peer节点即可。这个批准的动作会使用gossip来在组织内部传播。使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-approveformyorg" target="_blank" rel="noopener">peer lifecycle chaincode approveformyorg</a>命令来批准链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command above uses the <code>--package-id</code> flag to include the package identifier in the chaincode definition. The <code>--sequence</code> parameter is an integer that keeps track of the number of times a chaincode has been defined or updated. Because the chaincode is being deployed to the channel for the first time, the sequence number is 1. When the asset-transfer (basic) chaincode is upgraded, the sequence number will be incremented to 2. If you are using the low level APIs provided by the Fabric Chaincode Shim API, you could pass the <code>--init-required</code> flag to the command above to request the execution of the Init function to initialize the chaincode. The first invoke of the chaincode would need to target the Init function and include the <code>--isInit</code> flag before you could use the other functions in the chaincode to interact with the ledger.</p><p>上面的命令使用<code>--package-id</code>标志将软件包标识符包含在链码定义中。<code>--sequence</code>参数是一个整数，用于跟踪定义或更新链码的次数；由于链码是第一次部署到channel，因此序列号为1。当asset-transfer (basic) 的链码在更新时，这个序列号会增加到2。链代码的首次调用需要使用<code>--isInit</code>来指明调用链码的Init函数，然后才能使用链代码中的其他函数与账本进行交互。</p><p>We could have provided a <code>--signature-policy</code> or <code>--channel-config-policy</code> argument to the <code>approveformyorg</code> command to specify a chaincode endorsement policy. The endorsement policy specifies how many peers belonging to different channel members need to validate a transaction against a given chaincode. Because we did not set a policy, the definition of asset-transfer (basic) will use the default endorsement policy, which requires that a transaction be endorsed by a majority of channel members present when the transaction is submitted. This implies that if new organizations are added or removed from the channel, the endorsement policy is updated automatically to require more or fewer endorsements. In this tutorial, the default policy will require a majority of 2 out of 2 and transactions will need to be endorsed by a peer from Org1 and Org2. If you want to specify a custom endorsement policy, you can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html" target="_blank" rel="noopener">Endorsement Policies</a> operations guide to learn about the policy syntax.</p><p>我们可以在<code>approveformyorg</code>命令中提供<code>--signature-policy</code>或<code>--channel-config-policy</code>参数，以指定链码背书策略。背书策略指定需要多少个属于不同渠道成员的peer根据给定的链码验证来交易。因为我们没有指定合格策略，asset-transfer (basic) 的定义会使用默认的背书策略，该政策要求在提交交易时，该交易必须得到channel中大多数成员的认可。这意味着，如果在channel中添加或删除组织，则背书政策会自动更新，以要求更多或更少的认可。在本教程中，默认策略需要2个中的大多数也就是2，并且交易需要由来自Org1和Org2的peer认可。如果要指定自定义认可策略，则可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html" target="_blank" rel="noopener">Endorsement Policies</a> 操作指南来了解策略语法。</p><p>You need to approve a chaincode definition with an identity that has an admin role. As a result, the <code>CORE_PEER_MSPCONFIGPATH</code> variable needs to point to the MSP folder that contains an admin identity. You cannot approve a chaincode definition with a client user. The approval needs to be submitted to the ordering service, which will validate the admin signature and then distribute the approval to your peers.</p><p>你需要使用具有管理员角色的身份来批准的链码定义。即<code>CORE_PEER_MSPCONFIGPATH</code>变量需要指向包含管理员身份的MSP文件夹。你不能使用客户端用户的身份来批准链码。这个审批结果需要提交给排序服务，排序服务会验证管理员的签名，然后分发这个验证结果到你的peer节点。</p><p>We still need to approve the chaincode definition as Org1. Set the following environment variables to operate as the Org1 admin:</p><p>你还需要在组织Org1上批准这个链码定义，把环境变量修改为以组织Org1的管理员身份来操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can now approve the chaincode definition as Org1.</p><p>现在你可以以组织Org1的身份批准链码定义了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>We now have the majority we need to deploy the asset-transfer (basic) the chaincode to the channel. While only a majority of organizations need to approve a chaincode definition (with the default policies), all organizations need to approve a chaincode definition to start the chaincode on their peers. If you commit the definition before a channel member has approved the chaincode, the organization will not be able to endorse transactions. As a result, it is recommended that all channel members approve a chaincode before committing the chaincode definition.</p><p>现在我们已经有了将asset-transfer (basic) 的链码部署到渠道的大多数的批准。在将链码定义部署到channel上时，我们需要大多数组织的批准（使用默认的策略）；但是所有的组织都需批准链码定义才能在其peer启动这个链码。如果你在一个channel成员批准定义之前将链码定义提交到channel，那么这个组织将无法批准交易。结果，建议所有通道成员在提交链码定义之前批准链码。</p><h2 id="Committing-the-chaincode-definition-to-the-channel（将链码定义提交到通道）">Committing the chaincode definition to the channel（将链码定义提交到通道）</h2><p>After a sufficient number of organizations have approved a chaincode definition, one organization can commit the chaincode definition to the channel. If a majority of channel members have approved the definition, the commit transaction will be successful and the parameters agreed to in the chaincode definition will be implemented on the channel.</p><p>在有足够数量的组织批准链码定义之后，其中一个组织就可以把链码定义提交到通道中了。如果大多数通道成员已批准该定义，则提交定义的交易将会成功，并且链码定义中同意的参数将在该通道上实现。</p><p>You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness" target="_blank" rel="noopener">peer lifecycle chaincode checkcommitreadiness</a> command to check whether channel members have approved the same chaincode definition. The flags used for the <code>checkcommitreadiness</code> command are identical to the flags used to approve a chaincode for your organization. However, you do not need to include the <code>--package-id</code> flag.</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness" target="_blank" rel="noopener">peer lifecycle chaincode checkcommitreadiness</a>命令来检查channel上的成员是否已经批准了相同的链码定义。用于<code>checkcommitreadiness</code>命令的标志与您的组织批准链码的标志相同；但是不需要包括<code>--package-id</code>标志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>The command will produce a JSON map that displays if a channel member has approved the parameters that were specified in the <code>checkcommitreadiness</code> command:</p><p>这个命令会生成一个JSON来显示通道成员是否已经批准了定义。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          <span class="attr">"Approvals"</span>: &#123;</span><br><span class="line">                  <span class="attr">"Org1MSP"</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">"Org2MSP"</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Since both organizations that are members of the channel have approved the same parameters, the chaincode definition is ready to be committed to the channel. You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit" target="_blank" rel="noopener">peer lifecycle chaincode commit</a> command to commit the chaincode definition to the channel. The commit command also needs to be submitted by an organization admin.</p><p>因为channel上的两个成员都已经批准了相同的参数，因此链码定义已准备好提交给channel。你可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit" target="_blank" rel="noopener">peer lifecycle chaincode commit</a> 命令将链码定义提交到channel。commit命令依然需要由组织管理员来发起。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>The transaction above uses the <code>--peerAddresses</code> flag to target <code>peer0.org1.example.com</code> from Org1 and <code>peer0.org2.example.com</code> from Org2. The <code>commit</code> transaction is submitted to the peers joined to the channel to query the chaincode definition that was approved by the organization that operates the peer. The command needs to target the peers from a sufficient number of organizations to satisfy the policy for deploying a chaincode. Because the approval is distributed within each organization, you can target any peer that belongs to a channel member.</p><p>上面的交易使用<code>--peerAddresses</code>标志来指定Org1中的<code>peer0.org1.example.com</code>和Org2中的<code>peer0.org2.example.com</code>。 <code>commit</code> 交易会提交给已经加入通道的peer节点，用于peer节点查询同组织内其他节点批准的链码定义。该命令需要指明来自足够数量的组织中的peer节点，以满足部署链码的策略。因为批准操作已经在每个组织内部进行广播，所以你可以指定属于一个通道成员的任意的peer节点。</p><p>The chaincode definition endorsements by channel members are submitted to the ordering service to be added to a block and distributed to the channel. The peers on the channel then validate whether a sufficient number of organizations have approved the chaincode definition. The <code>peer lifecycle chaincode commit</code> command will wait for the validations from the peer before returning a response.</p><p>通道成员对链码定义的认可会提交给排序服务，以添加到区块并分发给渠道。然后通道上的peer节点验证是否有足够数量的组织批准了链码定义。<code>peer lifecycle chaincode commit</code>命令在返回相应之前会等待peer节点的验证。</p><p>You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> command to confirm that the chaincode definition has been committed to the channel.</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID mychannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>If the chaincode was successful committed to the channel, the <code>querycommitted</code> command will return the sequence and version of the chaincode definition:</p><p>如果链码已经成功提交到通道，<code>querycommitted</code> 命令会返回该链码定义的序列号和版本号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode 'basic' on channel 'mychannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br></pre></td></tr></table></figure><h2 id="Invoking-the-chaincode（调用链码）">Invoking the chaincode（调用链码）</h2><p>After the chaincode definition has been committed to a channel, the chaincode will start on the peers joined to the channel where the chaincode was installed. The asset-transfer (basic) chaincode is now ready to be invoked by client applications. Use the following command create an initial set of assets on the ledger. Note that the invoke command needs target a sufficient number of peers to meet chaincode endorsement policy.</p><p>在链码定义提交到通道之后，链码可以由加入了通道并且安装了此链码的peer节点来启动。 asset-transfer (basic) 的链码已经可以由客户端程序进行调用。使用以下命令在账本上创建和初始化资产。请注意，invoke命令需要以足够数量的peer为目标，以满足链码的背书策略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"InitLedger","Args":[]&#125;'</span><br></pre></td></tr></table></figure><p>If the command is successful, you should be able to a response similar to the following:</p><p>如果命令执行成功，你会看到类似下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-21 16:51:11.086 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>We can use a query function to read the set of cars that were created by the chaincode:</p><p>我们使用查询方法来查看我们通过链码创建的车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>The response to the query should be the following list of assets:</p><p>下面的资产列表就是查询的响应结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;,&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;,&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;,&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;,&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;,&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;]</span><br></pre></td></tr></table></figure><h2 id="Upgrading-a-smart-contract（更新智能合约）">Upgrading a smart contract（更新智能合约）</h2><p>You can use the same Fabric chaincode lifecycle process to upgrade a chaincode that has already been deployed to a channel. Channel members can upgrade a chaincode by installing a new chaincode package and then approving a chaincode definition with the new package ID, a new chaincode version, and with the sequence number incremented by one. The new chaincode can be used after the chaincode definition is committed to the channel. This process allows channel members to coordinate on when a chaincode is upgraded, and ensure that a sufficient number of channel members are ready to use the new chaincode before it is deployed to the channel.</p><p>您可以使用相同的Fabric链码生命周期流程来升级已经部署到通道的链码。通道成员可以通过以下方式升级链码：安装新的链码包，然后批准这个具有新packageID、新链码版本以及序列号加1的链码定义。在链码定义被提交给通道后新的链码就可以被使用。此过程允许通道成员在升级链码时进行协调，并确保在将新链码部署到通道之前，有足够数量的通道成员准备使用新链码。</p><p>Channel members can also use the upgrade process to change the chaincode endorsement policy. By approving a chaincode definition with a new endorsement policy and committing the chaincode definition to the channel, channel members can change the endorsement policy governing a chaincode without installing a new chaincode package.</p><p>通道成员也可以使用这个更新流程来修改链码的背书策略。通过批准具有新背书策略的链码定义并将其提交给渠道，渠道成员可以更改背书策略而无需安装新的链码包。</p><p>To provide a scenario for upgrading the asset-transfer (basic) chaincode that we just deployed,let’s assume that Org1 and Org2 would like to install a version of the chaincode that is written in another language. They will use the Fabric chaincode lifecycle to update the chaincode version and ensure that both organizations have installed the new chaincode before it becomes active on the channel.</p><p>为了提供一个我们刚才部署的asset-transfer (basic) 链码升级的情景，让我们假设Org1和Org2想要安装一个通过其他语言编写的链码版本。他们会使用Fabric链码生命周期来更新链码的版本并且在新链码可用于通道之前确保所有的组织已经安装了新的链码。</p><p>We are going to assume that Org1 and Org2 initially installed the GO version of the asset-transfer (basic) chaincode, but would be more comfortable working with a chaincode written in JavaScript. The first step is to package the JavaScript version of the asset-transfer (basic) chaincode. If you used the JavaScript instructions to package your chaincode when you went through the tutorial, you can install new chaincode binaries by following the steps for packaging a chaincode written in <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go" target="_blank" rel="noopener">Go</a> or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript" target="_blank" rel="noopener">TypeScript</a>.</p><p>我们假设Org1和Org2最初安装了asset-transfer (basic) GO版本的链码，但使用JavaScript编写的链码会更舒适。第一步就是打包JavaScript版本的asset-transfer (basic) 链码。</p><p>Issue the following commands from the <code>test-network</code> directory to install the chaincode dependences.</p><p>在<code>test-network</code> 目录下运行下面的命令来安装链码的依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../asset-transfer-basic/chaincode-javascript</span><br><span class="line">npm install</span><br><span class="line">cd ../../test-network</span><br></pre></td></tr></table></figure><h3 id="打包">打包</h3><p>You can then issue the following commands to package the JavaScript chaincode from the <code>test-network</code> directory. We will set the environment variables needed to use the <code>peer</code> CLI again in case you closed your terminal.</p><p>然后你可以在<code>test-network</code> 目录下运行下面的命令来打包JavaScript版本的链码。在运行命令之前先参考前面的内容来设置可以操作Org1的环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic_2.tar.gz --path ../asset-transfer-basic/chaincode-javascript/ --lang node --label basic_2.0</span><br></pre></td></tr></table></figure><h3 id="安装">安装</h3><p>We can now use the following command to install the new chaincode package on the Org1 peer.</p><p>你可以在Org1组织的peer节点通过下面的命令来安装一个新的链码包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic_2.tar.gz</span><br></pre></td></tr></table></figure><p>The new chaincode package will create a new package ID. We can find the new package ID by querying our peer.</p><p>新的链码包会创建一个新的package ID，我们通过查询peer来获取新的package ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>The <code>queryinstalled</code> command will return a list of the chaincode that have been installed on your peer similar to this output.</p><p><code>queryinstalled</code> 命令会返回你的peer已经安装的链码，输出类似如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2, Label: basic_1.0</span><br><span class="line">Package ID: basic_2.0:59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd, Label: basic_2.0</span><br></pre></td></tr></table></figure><p>You can use the package label to find the package ID of the new chaincode and save it as a new environment variable. This output is for example only – your package ID will be different, so DO NOT COPY AND PASTE!</p><p>你可以把新的 package ID保存为一个新的环境变量。下面的命令只是一个例子，不要直接copy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NEW_CC_PACKAGE_ID&#x3D;basic_2.0:59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><p>Org1 can now approve a new chaincode definition（Org1现在可以批准这个新的链码定义）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --package-id $NEW_CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The new chaincode definition uses the package ID of the JavaScript chaincode package and updates the chaincode version. Because the sequence parameter is used by the Fabric chaincode lifecycle to keep track of chaincode upgrades, Org1 also needs to increment the sequence number from 1 to 2. You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a> command to find the sequence of the chaincode that was last committed to the channel.</p><p>新的链码定义使用JavaScript版本的链码包的packageID以及新的链码版本。由于Fabric链码生命周期使用序列号来跟踪链码升级，因此Org1还需要将序列号从1递增到2。你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted" target="_blank" rel="noopener">peer lifecycle chaincode querycommitted</a>命令来查询链码上次提交到通道的序列号。</p><p>We now need to install the chaincode package and approve the chaincode definition as Org2 in order to upgrade the chaincode. Run the following commands to operate the <code>peer</code> CLI as the Org2 admin:</p><p>我们现在需要以Org2组织的身份来安装链码并且批准链码定义来更新链码，运行下面的命令来使用Org2组织的管理员进行操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><h3 id="其他组织安装链码">其他组织安装链码</h3><p>We can now use the following command to install the new chaincode package on the Org2 peer.</p><p>我们现在就可以使用下面的命令来安装新的链码包到Org2组织的peer上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic_2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v2">批准链码定义</h3><p>You can now approve the new chaincode definition for Org2.</p><p>我们现在可以为Org2组织批准这个新的链码定义。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --package-id $NEW_CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness" target="_blank" rel="noopener">peer lifecycle chaincode checkcommitreadiness</a> command to check if the chaincode definition with sequence 2 is ready to be committed to the channel:</p><p>使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness" target="_blank" rel="noopener">peer lifecycle chaincode checkcommitreadiness</a> 敏玲来检查序列号为2的链码定义是否已经准备好被提交到channel上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 2.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>The chaincode is ready to be upgraded if the command returns the following JSON:</p><p>如果这个命令返回以下内容，说明已经准备好更新了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"approvals": &#123;</span><br><span class="line">"Org1MSP": true,</span><br><span class="line">"Org2MSP": true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The chaincode will be upgraded on the channel after the new chaincode definition is committed. Until then, the previous chaincode will continue to run on the peers of both organizations. Org2 can use the following command to upgrade the chaincode:</p><p>在新的链码定义提交后，通道上的链码将会升级。在此之前，先前的链码将继续在两个组织的peer上运行。Org2组织可以使用下面的命令来更新链码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>A successful commit transaction will start the new chaincode right away. If the chaincode definition changed the endorsement policy, the new policy would be put in effect.</p><p>成功的提交的交易将立即启动新的链码。如果链码定义更改了背书策略，则新政策将生效。</p><p>You can use the <code>docker ps</code> command to verify that the new chaincode has started on your peers:</p><p>你现在可以使用 <code>docker ps</code> 命令来验证新的链码已经在你的peer节点启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                                                                                                                                                    COMMAND                  CREATED         STATUS         PORTS                              NAMES</span><br><span class="line">2e253d5141c3   dev-peer0.org2.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd-c00efc2e7c009601f23247ba3330c47fc5b737d476f8233da9b404c28681847b   "docker-entrypoint.s…"   2 minutes ago   Up 2 minutes                                      dev-peer0.org2.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br><span class="line">cb7260fc3aa6   dev-peer0.org1.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd-ececda85b7ddf5cad9e5cbca808ffe76bc0b4b0d3067c345afa365a764b062ff   "docker-entrypoint.s…"   2 minutes ago   Up 2 minutes                                      dev-peer0.org1.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br><span class="line">ee12e6769e93   gliderlabs/logspout                                                                                                                                                      "/bin/logspout"          6 hours ago     Up 6 hours     127.0.0.1:8000-&gt;80/tcp             logspout</span><br><span class="line">628b12f2b3f0   hyperledger/fabric-peer:latest                                                                                                                                           "peer node start"        6 hours ago     Up 6 hours     7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com</span><br><span class="line">e47cbd1b0b15   hyperledger/fabric-peer:latest                                                                                                                                           "peer node start"        6 hours ago     Up 6 hours     0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com</span><br><span class="line">e67946f412a7   hyperledger/fabric-orderer:latest                                                                                                                                        "orderer"                6 hours ago     Up 6 hours     0.0.0.0:7050-&gt;7050/tcp             orderer.example.com</span><br></pre></td></tr></table></figure><p>If you used the <code>--init-required</code> flag, you need to invoke the Init function before you can use the upgraded chaincode. Because we did not request the execution of Init, we can test our new JavaScript chaincode by creating a new car:</p><p>我们现在可以通过创建一个新的汽车来测试我们新的JavaScript版本的链码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"CreateAsset","Args":["asset8","blue","16","Kelley","750"]&#125;'</span><br></pre></td></tr></table></figure><p>You can query all the cars on the ledger again to see the new car:</p><p>你可以查询账本上所有的车来看新创建的car：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>You should see the following result from the JavaScript chaincode:</p><p>通过JavaScript版本的链码，你会看到下面的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"Key":"asset1","Record":&#123;"ID":"asset1","color":"blue","size":5,"owner":"Tomoko","appraisedValue":300&#125;&#125;,&#123;"Key":"asset2","Record":&#123;"ID":"asset2","color":"red","size":5,"owner":"Brad","appraisedValue":400&#125;&#125;,&#123;"Key":"asset3","Record":&#123;"ID":"asset3","color":"green","size":10,"owner":"Jin Soo","appraisedValue":500&#125;&#125;,&#123;"Key":"asset4","Record":&#123;"ID":"asset4","color":"yellow","size":10,"owner":"Max","appraisedValue":600&#125;&#125;,&#123;"Key":"asset5","Record":&#123;"ID":"asset5","color":"black","size":15,"owner":"Adriana","appraisedValue":700&#125;&#125;,&#123;"Key":"asset6","Record":&#123;"ID":"asset6","color":"white","size":15,"owner":"Michel","appraisedValue":800&#125;&#125;,&#123;"Key":"asset8","Record":&#123;"ID":"asset8","Color":"blue","Size":"16","Owner":"Kelley","AppraisedValue":"750"&#125;&#125;]</span><br></pre></td></tr></table></figure><h2 id="Clean-up（清理）">Clean up（清理）</h2><p>When you are finished using the chaincode, you can also use the following commands to remove the Logspout tool.</p><p>当你使用链码结束之后，你可以通过下面的命令来移除Logspout tool。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop logspout</span><br><span class="line">docker rm logspout</span><br></pre></td></tr></table></figure><p>You can then bring down the test network by issuing the following command from the <code>test-network</code> directory:</p><p>你现在可以在<code>test-network</code> 目录下使用下面的命令来关闭测试网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/Hyberledger-Fabric学习总结</title>
    <link href="https://guozhe001.github.io/2020/12/18/blockchain/fabric/Hyberledger-Fabric%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://guozhe001.github.io/2020/12/18/blockchain/fabric/Hyberledger-Fabric%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-18T02:53:46.444Z</published>
    <updated>2020-12-30T10:00:37.016Z</updated>
    
    <content type="html"><![CDATA[<p><a href="Fabric%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%A2%B3%E7%90%86.md">Fabric核心概念学习与梳理</a></p><p><a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><p><a href="%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93.md">将智能合约部署到通道</a></p><p><a href="Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95.md">Frbirc测试环境错误记录</a></p><p><a href="%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode.md">编写您的第一个Chaincode</a></p><p><a href="%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric.md">通过供应链金融练习Fabric</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;Fabric%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%A2%B3%E7%90%86.md&quot;&gt;Fabric核心概念学习与梳理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/Fabric测试网络使用</title>
    <link href="https://guozhe001.github.io/2020/12/18/blockchain/fabric/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/"/>
    <id>https://guozhe001.github.io/2020/12/18/blockchain/fabric/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-12-18T02:22:59.740Z</published>
    <updated>2020-12-24T08:22:49.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fabric测试网络使用">Fabric测试网络使用</h2><h3 id="2-2-1下载样例源码">2.2.1下载样例源码</h3><p>运行命令下载最新版的<strong>Fabric</strong>和<strong>Fabric CA</strong>以及 <a href="https://github.com/hyperledger/fabric-samples" target="_blank" rel="noopener">hyperledger/fabric-samples</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s</span><br></pre></td></tr></table></figure><p>上面的命令干了这些事情：</p><ul><li>下载 <a href="https://github.com/hyperledger/fabric-samples" target="_blank" rel="noopener">hyperledger/fabric-samples</a></li><li>签出适当的版本标签</li><li>将Hyperledger Fabric平台特定的二进制文件和配置文件安装到Fabric-samples的/ bin和/ config目录中指定的版本</li><li>下载指定版本的Hyperledger Fabric docker镜像，包括：<ul><li>hyperledger/fabric-peer</li><li>hyperledger/fabric-orderer</li><li>hyperledger/fabric-ccenv</li><li>hyperledger/fabric-tools</li><li>hyperledger/fabric-baseos</li><li>hyperledger/fabric-ca</li></ul></li></ul><h3 id="2-2-2使用Fabric测试网络">2.2.2使用Fabric测试网络</h3><h4 id="启动Fabric测试网络">启动Fabric测试网络</h4><p>1.进入fabric-samples/test-network，可以看到network.sh文件,可以运行<code>./network.sh -h</code>来显示帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     ll</span><br><span class="line">total 72</span><br><span class="line">-rw-r--r--   1 apple  staff    777 Dec 14 18:36 README.md</span><br><span class="line">drwxr-xr-x  12 apple  staff    384 Dec 14 18:36 addOrg3</span><br><span class="line">drwxr-xr-x   3 apple  staff     96 Dec 14 18:36 configtx</span><br><span class="line">drwxr-xr-x   5 apple  staff    160 Dec 14 18:36 docker</span><br><span class="line">-rwxr-xr-x   1 apple  staff  18645 Dec 14 18:36 network.sh</span><br><span class="line">drwxr-xr-x   7 apple  staff    224 Dec 14 18:36 organizations</span><br><span class="line">-rwxr-xr-x   1 apple  staff   8202 Dec 14 18:36 scriptUtils.sh</span><br><span class="line">drwxr-xr-x   6 apple  staff    192 Dec 14 18:36 scripts</span><br><span class="line">drwxr-xr-x   3 apple  staff     96 Dec 14 18:36 system-genesis-block</span><br></pre></td></tr></table></figure><p>2.停止原来正在运行的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><p>3.启动网络</p><p>**注意事项：**必须在<code>$USER/fabric-samples/test-network</code>目录下执行此脚本，否则会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up</span><br></pre></td></tr></table></figure><p>这个脚本启动两个peer节点，一个ordering节点。这个脚本不会创建channel，我的脚本运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Creating network "net_test" with the default driver</span><br><span class="line">Creating volume "net_orderer.example.com" with default driver</span><br><span class="line">Creating volume "net_peer0.org1.example.com" with default driver</span><br><span class="line">Creating volume "net_peer0.org2.example.com" with default driver</span><br><span class="line">Creating orderer.example.com    ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">Creating peer0.org2.example.com ... done</span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND                  CREATED        STATUS                    PORTS                              NAMES</span><br><span class="line">31c36a007eb0   hyperledger/fabric-peer:latest      "peer node start"        1 second ago   Up Less than a second     7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com</span><br><span class="line">42f314195c64   hyperledger/fabric-orderer:latest   "orderer"                1 second ago   Up Less than a second     0.0.0.0:7050-&gt;7050/tcp             orderer.example.com</span><br><span class="line">de62f2f44a03   hyperledger/fabric-peer:latest      "peer node start"        1 second ago   Up Less than a second     0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com</span><br><span class="line">e9af4c11538c   cordite/network-map:latest          "/usr/bin/java -cp /…"   5 days ago     Exited (143) 3 days ago                                      network-map</span><br><span class="line">5128423bb8d7   redis:5.0                           "docker-entrypoint.s…"   5 months ago   Exited (0) 7 weeks ago                                       redis</span><br><span class="line">6796aadc5173   mysql                               "docker-entrypoint.s…"   7 months ago   Exited (0) 7 weeks ago                                       mysql</span><br><span class="line">66c3ac55f920   neo4j                               "/sbin/tini -g -- /d…"   7 months ago   Exited (0) 7 months ago</span><br></pre></td></tr></table></figure><p>docker面板显示如下：</p><p><img src="https://gitee.com/guozhe001/images/raw/master/image-20201214185835819.png" alt="image-20201214185835819"></p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html" target="_blank" rel="noopener">Peers</a>是Fabric network的组成部分，Peers存储区块链账本并在提交之前验证交易。Peers运行包含业务逻辑的智能合约，智能合约用于管理区块链上的账本。</p><p>在网络上的每个Peer都属于一个团体，上图显示的测试网络中的两个peer分别属于组织<code>peer0.org1.example.com</code>和组织<code>peer0.org2.example.com</code>。</p><p>每个Fabric network同样包含<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer/ordering_service.html" target="_blank" rel="noopener">ordering service</a>，Peers在验证交易和提交交易到区块链的时候，他们不自己决定交易的顺序和区块中包含哪些交易。在分布式网络中，peers可能分布的特别远，所以让peers对交易顺序达成共识的成本是很高的。</p><p>ordering service的存在是为了让peers专注于交易验证和提交到账本中。在接收到客户端提交的交易时，ordering service会对其进行排序，然后把这些交易添加到区块中。然后将这些区块分发给peer节点，peer节点再把区块写入区块链。Ordering节点还运行系统通道，该通道定义了Fabric network的能力，像如何制作区块以及节点可以使用哪些版本的Fabric。系统通道还定义了哪些组织是属于该联盟的。</p><p>上面的测试网络只运行了一个Ordering节点，在实际的网络中可能存在多个Ordering节点，由一个或多个组织进行操作。不同的Ordering节点使用Raft共识算法来就网络上的交易顺序达成一致。</p><h4 id="创建channel">创建channel</h4><p>通道是特定网络成员之间的专用通信层。通道只能由被邀请加入通道的的组织使用，并且对网络上的其他成员不可见。每个通道都有一个单独的区块链账单，被邀请的组织加入通道上的其他peer以存储channel账本和验证通道上的交易。</p><p>在org2和org2之间创建通道，默认的channel名称为mychannel。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh createChannel</span><br></pre></td></tr></table></figure><p>如果运行成功，则会看到如下日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Channel successfully joined</span><br></pre></td></tr></table></figure><p>也可以指定channel的名称，并且你可以创建多个channel。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh createChannel -c channel1</span><br></pre></td></tr></table></figure><p>如果你想一步启动测试网络并创建channel，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up createChannel</span><br></pre></td></tr></table></figure><h4 id="在channel上启动chaincode">在channel上启动chaincode</h4><p>启动成功之后，就可以开始使用智能合约来操作channel账本了。智能合约包含了管理区块链账本上资产的业务逻辑。运行在网络上的程序可以调用智能合约在账本上创建、修改、交易资产，这些程序也查询智能合约以读取账本上的数据。</p><p>为了确保交易的有效性，使用智能合约创建的交易通常需要通道上的多个组织签名才能被提交到channel账本。交易也需要多次背书，来防止渠道上的某个组织篡改账本或使用未经过同意的逻辑。要签署交易，每个组织都需要在其peer上调用并执行智能合约，然后再签署交易的output。如果output一致并且收集到了足够的签名，交易就可以被提交到账本。指定需要哪些组织执行智能合约的策略叫做背书策略，该策略是为每个chaincode设置的，作为chaincode定义的一部分。</p><p>在Fabric中，智能合约以称为chaincode的软件包部署在网络上。chaincode安装在组织的peers上，然后部署到channel，然后就可以在该渠道中用于认可交易并与区块链账本进行交互。在讲chaincode部署到channel上之前，channel上的组织需要对chaincode的内容达成共识。当所需数量的组织达成共识之后，chaincode就可以被提交到channel上，然后chaincode就准备好可以使用了。</p><p>搭建完成测试环境之后，可以使用下面的命令来启动chaincode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC</span><br></pre></td></tr></table></figure><p>我本地的运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Chaincode definition committed on channel 'mychannel'</span><br><span class="line">Using organization 1</span><br><span class="line">Querying chaincode definition on peer0.org1 on channel 'mychannel'...</span><br><span class="line">Attempting to Query committed status on peer0.org1, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode 'basic' on channel 'mychannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org1 on channel 'mychannel'</span><br><span class="line">Using organization 2</span><br><span class="line">Querying chaincode definition on peer0.org2 on channel 'mychannel'...</span><br><span class="line">Attempting to Query committed status on peer0.org2, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode 'basic' on channel 'mychannel':</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org2 on channel 'mychannel'</span><br><span class="line">Chaincode initialization is not required</span><br></pre></td></tr></table></figure><h4 id="与网络互动">与网络互动</h4><p>在启用测试网络之后，你可以使用peerCLI与测试网络进行互动。peerCLI允许你调用已经部署的智能合约、更新channels；也可以通过CLI更新或者部署新的智能合约。</p><p>请确保你的操作在test-network目录下进行。</p><p>1、把<code>fabric-samples</code>的<code>bin</code>目录下的二进制命令安装到你的客户端环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>2、还需要将FABRIC_CFG_PATH设置为指向fabric-samples存储库中的core.yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>3、现在设置环境变量允许你使用Org1的身份操作peerCLI。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>4、使用下面的命令用资产初始化账本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"InitLedger","Args":[]&#125;'</span><br></pre></td></tr></table></figure><p>如果成功你会看到像下面的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-16 15:35:41.511 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>5、现在你可以使用下面的命令查询账本上的资产</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c '&#123;"Args":["GetAllAssets"]&#125;'</span><br></pre></td></tr></table></figure><p>如果成功你会看到下面的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset1"</span>, <span class="attr">"color"</span>: <span class="string">"blue"</span>, <span class="attr">"size"</span>: <span class="number">5</span>, <span class="attr">"owner"</span>: <span class="string">"Tomoko"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">300</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset2"</span>, <span class="attr">"color"</span>: <span class="string">"red"</span>, <span class="attr">"size"</span>: <span class="number">5</span>, <span class="attr">"owner"</span>: <span class="string">"Brad"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">400</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset3"</span>, <span class="attr">"color"</span>: <span class="string">"green"</span>, <span class="attr">"size"</span>: <span class="number">10</span>, <span class="attr">"owner"</span>: <span class="string">"Jin Soo"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">500</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset4"</span>, <span class="attr">"color"</span>: <span class="string">"yellow"</span>, <span class="attr">"size"</span>: <span class="number">10</span>, <span class="attr">"owner"</span>: <span class="string">"Max"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">600</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset5"</span>, <span class="attr">"color"</span>: <span class="string">"black"</span>, <span class="attr">"size"</span>: <span class="number">15</span>, <span class="attr">"owner"</span>: <span class="string">"Adriana"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">700</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">"ID"</span>: <span class="string">"asset6"</span>, <span class="attr">"color"</span>: <span class="string">"white"</span>, <span class="attr">"size"</span>: <span class="number">15</span>, <span class="attr">"owner"</span>: <span class="string">"Michel"</span>, <span class="attr">"appraisedValue"</span>: <span class="number">800</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>6、网络上的成员想要交易资产或者更新资产时就会调用chaincode，使用下面的命令来调用资产转移chaincode来更改资产的owner。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"TransferAsset","Args":["asset6","Christopher"]&#125;'</span><br></pre></td></tr></table></figure><p>如果成功结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-16 15:43:18.062 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>重新查询可以发现asset6的owner已经更改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset1"</span>,<span class="attr">"color"</span>:<span class="string">"blue"</span>,<span class="attr">"size"</span>:<span class="number">5</span>,<span class="attr">"owner"</span>:<span class="string">"Tomoko"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">300</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset2"</span>,<span class="attr">"color"</span>:<span class="string">"red"</span>,<span class="attr">"size"</span>:<span class="number">5</span>,<span class="attr">"owner"</span>:<span class="string">"Brad"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">400</span>&#125;,&#123;<span class="attr">"ID"</span>:<span class="string">"asset3"</span>,<span class="attr">"color"</span>:<span class="string">"green"</span>,<span class="attr">"size"</span>:<span class="number">10</span>,<span class="attr">"owner"</span>:<span class="string">"Jin Soo"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">500</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset4"</span>,<span class="attr">"color"</span>:<span class="string">"yellow"</span>,<span class="attr">"size"</span>:<span class="number">10</span>,<span class="attr">"owner"</span>:<span class="string">"Max"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">600</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset5"</span>,<span class="attr">"color"</span>:<span class="string">"black"</span>,<span class="attr">"size"</span>:<span class="number">15</span>,<span class="attr">"owner"</span>:<span class="string">"Adriana"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">700</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset6"</span>,<span class="attr">"color"</span>:<span class="string">"white"</span>,<span class="attr">"size"</span>:<span class="number">15</span>,<span class="attr">"owner"</span>:<span class="string">"Christopher"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">800</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>7、我们在调用chaincode之后，我们来查一下这个调用是如何改变资产的。我们使用Org2来操作，配置环境变量如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>执行<code>peer chaincode query -C mychannel -n basic -c '{&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset6&quot;]}'</code>命令结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"asset6"</span>,<span class="attr">"color"</span>:<span class="string">"white"</span>,<span class="attr">"size"</span>:<span class="number">15</span>,<span class="attr">"owner"</span>:<span class="string">"Christopher"</span>,<span class="attr">"appraisedValue"</span>:<span class="number">800</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="中断网络">中断网络</h4><p>通过执行<code>./network.sh down</code>来中断网络，该命令会停止并删除peer河chaincode的容器；删除org的密钥等数据并从Docker中remove掉chaincode的镜像。该命令还会删除网路上的channel，如果有任何问题可以继续运行<code>./network.sh up</code>。</p><h2 id="问题处理">问题处理</h2><p>创建channel失败，日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Channel 'mychannel' created</span><br><span class="line">Join Org1 peers to the channel...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">2020-12-21 11:22:02.781 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 1.769196ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-21 11:22:03.785 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 2.054333ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-21 11:22:05.113 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 2.849348ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br><span class="line">After 5 attempts, peer0.org1 has failed to join channel 'mychannel'</span><br><span class="line">Create channel failed</span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>删除所有的测试网络相关的容器</li><li>运行<code>./network.sh down</code></li><li>删除docker本地未使用的volume</li><li>重试</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fabric测试网络使用&quot;&gt;Fabric测试网络使用&lt;/h2&gt;
&lt;h3 id=&quot;2-2-1下载样例源码&quot;&gt;2.2.1下载样例源码&lt;/h3&gt;
&lt;p&gt;运行命令下载最新版的&lt;strong&gt;Fabric&lt;/strong&gt;和&lt;strong&gt;Fabric CA&lt;/strong</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/7如何使用Hyperledger-Fabric搭建一个区块链项目</title>
    <link href="https://guozhe001.github.io/2020/12/16/blockchain/fabric/7%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hyperledger-Fabric%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/"/>
    <id>https://guozhe001.github.io/2020/12/16/blockchain/fabric/7%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hyperledger-Fabric%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-12-16T09:58:48.767Z</published>
    <updated>2020-12-18T02:55:51.045Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Hyperledger-Fabric搭建一个区块链项目</p><p>步骤如下：</p><ol><li>创建一个ordering service</li><li>添加其他的组织</li><li>创建联盟，创建channel</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何使用Hyperledger-Fabric搭建一个区块链项目&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个ordering service&lt;/li&gt;
&lt;li&gt;添加其他的组织&lt;/li&gt;
&lt;li&gt;创建联盟，创建channel&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux/linux常用命令记录</title>
    <link href="https://guozhe001.github.io/2020/12/15/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/15/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-15T09:40:43.965Z</published>
    <updated>2020-12-30T02:55:51.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar-解压，压缩，帮助：tar-h">tar(解压，压缩，帮助：tar -h)</h2><p>解压，<code>-C</code>标签指定解压到哪个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf -C ./test</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf &lt;archive-filename&gt; [filenames...]</span><br></pre></td></tr></table></figure><h2 id="shasum（hash，帮助shasum-h）">shasum（hash，帮助shasum -h）</h2><p>生成hash，<code>-a</code>标签指定使用哪个算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 README.md</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tar-解压，压缩，帮助：tar-h&quot;&gt;tar(解压，压缩，帮助：tar -h)&lt;/h2&gt;
&lt;p&gt;解压，&lt;code&gt;-C&lt;/code&gt;标签指定解压到哪个目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/fabric/Frbirc测试环境错误记录</title>
    <link href="https://guozhe001.github.io/2020/12/15/blockchain/fabric/Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2020/12/15/blockchain/fabric/Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-15T08:00:42.955Z</published>
    <updated>2020-12-18T02:55:22.198Z</updated>
    
    <content type="html"><![CDATA[<p>Hyperledger-Frbirc测试环境错误记录</p><p>在部署chaincode（<code>./network.sh deployCC</code>）的时候报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     ./network.sh deployCC</span><br><span class="line">deploying chaincode on channel 'mychannel'</span><br><span class="line">executing with the following</span><br><span class="line">- CHANNEL_NAME: mychannel</span><br><span class="line">- CC_NAME: basic</span><br><span class="line">- CC_SRC_PATH: NA</span><br><span class="line">- CC_SRC_LANGUAGE: go</span><br><span class="line">- CC_VERSION: 1.0</span><br><span class="line">- CC_SEQUENCE: 1</span><br><span class="line">- CC_END_POLICY: NA</span><br><span class="line">- CC_COLL_CONFIG: NA</span><br><span class="line">- CC_INIT_FCN: NA</span><br><span class="line">- DELAY: 3</span><br><span class="line">- MAX_RETRY: 5</span><br><span class="line">- VERBOSE: false</span><br><span class="line">Determining the path to the chaincode</span><br><span class="line">asset-transfer-basic</span><br><span class="line">Vendoring Go dependencies at ../asset-transfer-basic/chaincode-go/</span><br><span class="line">~/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go ~/code/open-source/blockchain/hyperledger/fabric-samples/test-network</span><br><span class="line">~/code/open-source/blockchain/hyperledger/fabric-samples/test-network</span><br><span class="line">Finished vendoring Go dependencies</span><br><span class="line">+ peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br><span class="line">+ res=0</span><br><span class="line">Chaincode is packaged</span><br><span class="line">Installing chaincode on peer0.org1...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer lifecycle chaincode install basic.tar.gz</span><br><span class="line">+ res=1</span><br><span class="line">Error: failed to retrieve endorser client for install: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br><span class="line">Usage:</span><br><span class="line">  peer lifecycle chaincode install [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --connectionProfile string       The fully qualified path to the connection profile that provides the necessary connection information for the network. Note: currently only supported for providing peer connection information</span><br><span class="line">  -h, --help                           help for install</span><br><span class="line">      --peerAddresses stringArray      The addresses of the peers to connect to</span><br><span class="line">      --tlsRootCertFiles stringArray   If TLS is enabled, the paths to the TLS root cert files of the peers to connect to. The order and number of certs specified should match the --peerAddresses flag</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --cafile string                       Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint</span><br><span class="line">      --certfile string                     Path to file containing PEM-encoded X509 public key to use for mutual TLS communication with the orderer endpoint</span><br><span class="line">      --clientauth                          Use mutual TLS when communicating with the orderer endpoint</span><br><span class="line">      --connTimeout duration                Timeout for client to connect (default 3s)</span><br><span class="line">      --keyfile string                      Path to file containing PEM-encoded private key to use for mutual TLS communication with the orderer endpoint</span><br><span class="line">  -o, --orderer string                      Ordering service endpoint</span><br><span class="line">      --ordererTLSHostnameOverride string   The hostname override to use when validating the TLS connection to the orderer</span><br><span class="line">      --tls                                 Use TLS when communicating with the orderer endpoint</span><br><span class="line">      --tlsHandshakeTimeShift duration      The amount of time to shift backwards for certificate expiration checks during TLS handshakes with the orderer endpoint</span><br><span class="line"></span><br><span class="line">Chaincode installation on peer0.org1 has failed</span><br><span class="line">Deploying chaincode failed</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hyperledger-Frbirc测试环境错误记录&lt;/p&gt;
&lt;p&gt;在部署chaincode（&lt;code&gt;./network.sh deployCC&lt;/code&gt;）的时候报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>language/java/线程池无法捕获线程的异常踩坑复盘</title>
    <link href="https://guozhe001.github.io/2020/12/15/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2020/12/15/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/</id>
    <published>2020-12-15T02:24:42.056Z</published>
    <updated>2020-12-15T02:24:42.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><h3 id="需求信息">需求信息</h3><p>最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息</p><h3 id="解决方案">解决方案</h3><p>为了使A服务的新增数据接口快速响应，在查询B服务数据详情的地方使用了线程池异步查询与更新。</p><h3 id="问题现象">问题现象</h3><p>在验证时发现数据库中的数据字段不全，经分析缺少的都是需要从B服务查询并更新的字段</p><h3 id="初步定位">初步定位</h3><p>猜测应该是查询B服务时出了一些异常，而由于不规范使用线程池导致异常没有抛出，直接打到了控制台，故A服务的日志系统并看不到错误日志。</p><h2 id="问题解决">问题解决</h2><ol><li>查询B服务数据详情时暂时去掉使用线程池，改为同步调用</li><li>增加容错定时任务，定时查询需要从B服务获取缺失字段的数据进行更新</li></ol><p>上线后观察，新增的数据不再有部分字段缺失的情况；问题解决。</p><h2 id="问题复盘">问题复盘</h2><h3 id="A服务线程池的使用">A服务线程池的使用</h3><p>线程池定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"queryDataDetail-%d"</span>).build());</span><br></pre></td></tr></table></figure><p>线程池使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">add</span>(<span class="title">String</span> <span class="title">contract</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 0、检查合同必须不存在</span></span><br><span class="line">    checkIfExist(contract);</span><br><span class="line">    <span class="comment">// 1、保存合同数据</span></span><br><span class="line">    Entity entity = saveData(contract);</span><br><span class="line">    <span class="comment">// 2、从B服务查询缺失信息</span></span><br><span class="line">    executorService.execute(() -&gt; queryDataDetail(entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如此使用有何问题">如此使用有何问题</h3><p>我重新写了一个测试方法如下：</p><p>1、定义一个会一直抛异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> SystemOutRule systemOutRule = <span class="keyword">new</span> SystemOutRule().enableLog();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">runWithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    log.info(<span class="string">"thread is &#123;&#125;"</span>, thread);</span><br><span class="line">    log.info(<span class="string">"eh=&#123;&#125;"</span>, thread.getUncaughtExceptionHandler());</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NicaiException(<span class="string">"出错啦！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用线程池调用上面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    <span class="comment">// 断言程序打印的日志不包含“出错啦！”</span></span><br><span class="line">    Assert.assertFalse(systemOutRule.getLog().contains(<span class="string">"出错啦！"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、上面的单测断言是成功的，那么异常跑哪里去了？上面的单测在控制台的输出如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807110851677.png" alt="image-20200807110851677"></p><p>4、可以看出上面的异常信息是直接输出到了控制台，而不是由程序输出到控制台，主要原因是主程序没有捕获到此异常导致的。（具体原因还没有深入）</p><h3 id="如何解决线程池的异常捕获问题">如何解决线程池的异常捕获问题</h3><p>上面的测试可以说明到为什么日志里面查不到错误日志，那么如何捕获线程里的异常呢？</p><h4 id="方法1-使用UncaughtExceptionHandler">方法1:使用UncaughtExceptionHandler</h4><p>1、在创建线程池的时候，设置传入的ThreadFactory的UncaughtExceptionHandler属性，此UncaughtExceptionHandler会处理线程中的异常；下面的例子我直接打印了出来异常原因和异常栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithUncaughtExceptionHandler</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool(</span><br><span class="line">            <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                    .setUncaughtExceptionHandler((t, e) -&gt; log.info(<span class="string">"UncaughtExceptionHandler caught, error_message=&#123;&#125;"</span>, e.getMessage(), e))</span><br><span class="line">                    .build());</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">"出错啦！"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：（可以和上面的运行结果进行比对）</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807111728213.png" alt="image-20200807111728213"></p><p>3、从上面的运行结果可以看出异常信息是由程序捕获后再输出出来，这样就不会导致查不到异常日志了。</p><h4 id="方法2-使用guava扩展的FutureCallback">方法2:使用guava扩展的FutureCallback</h4><p>1、guava对jdk的线程做了一些扩展，其中一个就是FutureCallback，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithGuavaThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">    ListenableFuture&lt;String&gt; listenableFuture = executorService.submit(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    Futures.addCallback(listenableFuture, <span class="keyword">new</span> FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"success! result = &#123;&#125;"</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            log.error(<span class="string">"guava FutureCallback caught, error_message=&#123;&#125;"</span>, t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, executorService);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">"出错啦！"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807112535447.png" alt="image-20200807112535447"></p><h2 id="问题总结">问题总结</h2><p>1、通过上面的测试，优化A服务的线程池定义，使之在遇到异常时能够正常被捕获，能输出，方便问题定位；补偿定时任务也能对第一次查询异常进行容错，保证数据能够同步过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">"查询数据详情的线程池异常,error_message=&#123;&#125;"</span>, e.getMessage(), e))</span><br><span class="line">        .setNameFormat(<span class="string">"queryDataDetail-%d"</span>).build());</span><br></pre></td></tr></table></figure><p>2、当然此问题更深层的问题还没有完全解答</p><ul><li>为什么线程里的异常不会被捕获？</li><li>UncaughtExceptionHandler的运行原理是什么？</li><li>Guava的FutureCallback是如何运行的？</li></ul><p>3、<a href="https://github.com/nijixucai/my-tools/blob/master/my-learn/my-experience/src/test/java/com/nicai/experience/concurrency/ExceptionThreadTest.java" target="_blank" rel="noopener">测试代码源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;h3 id=&quot;需求信息&quot;&gt;需求信息&lt;/h3&gt;
&lt;p&gt;最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;为了使A服务的新增数据接口快速响</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>language/java/使用redis自增特性创建唯一id生成器</title>
    <link href="https://guozhe001.github.io/2020/12/15/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://guozhe001.github.io/2020/12/15/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2020-12-15T02:24:42.055Z</published>
    <updated>2020-12-15T02:24:42.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求说明">需求说明</h1><h2 id="产品要求实现一个订单编号，此编号规则如下">产品要求实现一个订单编号，此编号规则如下</h2><h3 id="订单编号规则：">订单编号规则：</h3><p>“字母” + “日期” + “自增ID”</p><h3 id="订单编号举例">订单编号举例</h3><p>比如业务A，在2020-08-04日有三个订单，那么订单编号如下：</p><ul><li>A202008040001</li><li>A202008040002</li><li>A202008040003</li></ul><p>比如业务A，在2020-08-05日有4个订单，那么订单编号如下：</p><ul><li>A202008050001</li><li>A202008050002</li><li>A202008050003</li><li>A202008050003</li></ul><p>通过上面的例子可以看到，后面的“自增ID”每天都会从1开始增加，在一个分布式系统中，要做到每天从1开始不重复并且自增的效果；想到的第一个实现方案就是redis的Incr命令（Redis Incr 命令将 key 中储存的数字值增一）。</p><h1 id="需求实现">需求实现</h1><h2 id="配置redis">配置redis</h2><h3 id="依赖redis相关jar包">依赖redis相关jar包</h3><p>因为此模块继承了spring-boot-starter-parent，所以不需要指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置redis的config">编写配置redis的config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisClusterConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis集群配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RedisProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisClusterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisClusterConfig</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisProperties = redisProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread-safe factory of Redis connections配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> factory of Redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisClusterConfiguration redisClusterConfiguration = <span class="keyword">new</span> RedisClusterConfiguration(redisProperties.getCluster().getNodes());</span><br><span class="line">        redisClusterConfiguration.setPassword(redisProperties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(redisClusterConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建String类型的redis模板</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory factory of Redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String-focused extension of RedisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是配置范型的RedisTemplate，需要设置值的序列化规则为：<strong>StringRedisSerializer</strong>，原因可以参考此文章：<a href="https://blog.csdn.net/tyyh08/article/details/80267261" target="_blank" rel="noopener">Spring Boot中使用RedisTemplate优雅的操作Redis，并且解决RedisTemplate泛型注入失败的问题</a></p><h3 id="测试redis的config代码">测试redis的config代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.BaseAdminSpringTest;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= AdminApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisClusterConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_KEY = Constants.REDIS_KEY_PREFIX + <span class="string">"test:hello"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_VALUE = <span class="string">"world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringRedisTemplateGetAndSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(TEST_KEY, TEST_VALUE);</span><br><span class="line">        String value = stringRedisTemplate.opsForValue().get(TEST_KEY);</span><br><span class="line">        Assert.assertEquals(TEST_VALUE, value);</span><br><span class="line">        stringRedisTemplate.delete(TEST_KEY);</span><br><span class="line">        Assert.assertNull(stringRedisTemplate.opsForValue().get(TEST_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = TEST_KEY;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key, <span class="string">"1"</span>, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">        String initValue = valueOperations.get(key);</span><br><span class="line">        log.info(<span class="string">"key=&#123;&#125;, init value=&#123;&#125;"</span>, key, initValue);</span><br><span class="line">        Assert.assertEquals(<span class="string">"1"</span>, initValue);</span><br><span class="line">        Long increment = valueOperations.increment(key);</span><br><span class="line">        log.info(<span class="string">"key=&#123;&#125;, after increment=&#123;&#125;"</span>, key, increment);</span><br><span class="line">        Assert.assertEquals(Long.valueOf(<span class="number">2</span>), increment);</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        Assert.assertNull(valueOperations.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于redis编写唯一ID生成服务">基于redis编写唯一ID生成服务</h2><h3 id="添加抽象的唯一id生成服务">添加抽象的唯一id生成服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式ID生成服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">Context</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化key时的默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRedisDistributedIDGenerateService</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，直接从redis中获取自增后的值；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID, 如果redis出现异常则返回null，请使用者自行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Optional&lt;Long&gt; <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从redis中获取自增id</span></span><br><span class="line">        Long id = incr(getKey());</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(id) ? Optional.empty() : Optional.of(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，根据传入的上下文和redis中自增后的值最终组装成下一个ID；</span></span><br><span class="line"><span class="comment">     * 获取之后会交给子类检查此ID是否重复，如果重复会从子类中获取最新的ID，然后更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">nextId</span><span class="params">(T context)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Long&gt; id = nextId();</span><br><span class="line">        <span class="comment">// 如果可以从redis中获取值，则说明redis服务正常，需要判重；否则直接从数据库中获取下一个id</span></span><br><span class="line">        String nextId = id.isPresent() ? ifDuplicatedThenUpdate(context, assemblyNextId(context, id.get())) :</span><br><span class="line">                getNewIdFromDbAndUpdateRedis(context, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"context=&#123;&#125;,redisIncrId=&#123;&#125; nextId=&#123;&#125;"</span>, JSON.toJSONString(context), id, nextId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查获取到的ID是否重复</span></span><br><span class="line"><span class="comment">     * 如果重复则说明由于redis的一些原因导致的重复，返回最新的redis中应该存在的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId 下一个ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果当前ID没有重复，则返回null，否则如果重复了则返回redis中应该有的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取下一个id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duplicatedId 重复的id，此入参可能为null，子类需要自己处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库获取下一个id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类根据redis当前的值自行组装最终的ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context    上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisValue redis当前的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">assemblyNextId</span><span class="params">(T context, Long redisValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis自增的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis自增的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用redis的自增方法</span></span><br><span class="line"><span class="comment">     * 如果key不存在则先设置key，再调用自增方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要自增的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增之后的值，如果redis出现异常则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Long increment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先检查redis中是否有key,如果没有,先设置key并且设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (BooleanUtil.isFalse(redisTemplate.hasKey(key))) &#123;</span><br><span class="line">                initOrUpdateValue(key, getKeyInitValue());</span><br><span class="line">            &#125;</span><br><span class="line">            increment = redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"调用redis的自增方法异常，error_message=&#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"key = &#123;&#125;, increment=&#123;&#125;"</span>, key, increment);</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取初始化key时的value值，默认是0，自增之后id从1开始；</span></span><br><span class="line"><span class="comment">     * 如果子类想从其他数字开始则自己覆盖此方法即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化key时的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getKeyInitValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key的超时时间，单位是小时，由子类设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间，单位小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否重复，如果重复则从别的渠道（由子类自己决定从哪个渠道）更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果重复则返回新的nextId，否则返回入参传入的nextId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ifDuplicatedThenUpdate</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否重复，如果重复则从数据库中获取，否则直接返回当前值</span></span><br><span class="line">        <span class="keyword">return</span> checkIfDuplicated(nextId) ? getNewIdFromDbAndUpdateRedis(context, nextId) : nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取新id并更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据数据库的id获得的新id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNewIdFromDbAndUpdateRedis</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        Long maxIdFromDatabase = maxIdFromDatabase(nextId);</span><br><span class="line">        String newId = assemblyNextId(context, maxIdFromDatabase);</span><br><span class="line">        log.warn(<span class="string">"nextId=&#123;&#125; 在数据库中已经存在，maxIdFromDatabase=&#123;&#125; 重新获取新的newId=&#123;&#125;"</span>, nextId, maxIdFromDatabase, newId);</span><br><span class="line">        initOrUpdateValue(getKey(), maxIdFromDatabase);</span><br><span class="line">        <span class="keyword">return</span> newId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化或者更新redis中的自增的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要设置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOrUpdateValue</span><span class="params">(String key, Long value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, String.valueOf(value), getTimeOutHours(), TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"设置redis值异常，value=&#123;&#125; error_message=&#123;&#125;"</span>, value, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文；子类自己定义上下文，然后根据上下文的数据来最终组装ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证编号上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 业务类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String businessType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加一个A服务的唯一id生成服务实现">添加一个A服务的唯一id生成服务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DatePattern;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.dao.ManualVoucherDAO;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.entity.ManualVoucherEntity;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.exception.AccountingException;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.service.AbstractRedisDistributedIDGenerateService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式唯一ID生成-A实现类</span></span><br><span class="line"><span class="comment"> * 编号规则：用途+日期+自增ID，如：A202007310001；A202007310002；A202008070001；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedIDGenerateServiceAImpl</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">AContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUSINESS_TYPE = <span class="string">"A:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID长度不足4位时在前面填充的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> FILLED_CHAR = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的自增ID的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INCREMENT_LENGTH = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期小时数，即在24小时候过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXPIRATION_HOURS = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedIDGenerateServiceAImpl</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">assemblyNextId</span><span class="params">(VoucherNumberContext context, Long redisValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.BLANK, context.getBusinessType(), getDatePeriod(),</span><br><span class="line">                StrUtil.fillBefore(String.valueOf(redisValue), FILLED_CHAR, INCREMENT_LENGTH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.REDIS_KEY_DELIMITER, Constants.REDIS_KEY_PREFIX, BUSINESS_TYPE, getDatePeriod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EXPIRATION_HOURS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求说明&quot;&gt;需求说明&lt;/h1&gt;
&lt;h2 id=&quot;产品要求实现一个订单编号，此编号规则如下&quot;&gt;产品要求实现一个订单编号，此编号规则如下&lt;/h2&gt;
&lt;h3 id=&quot;订单编号规则：&quot;&gt;订单编号规则：&lt;/h3&gt;
&lt;p&gt;“字母” + “日期” + “自增ID”&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
</feed>
